id,page_id,author_id,text,comments,updated_on,version
208,208,87,"h1. Enabling dnssec

The website at dlv.isc.org requires you to place a text record in the zone to prove that you control the zone.  This is how to do that, in a DDNS-enabled zone:

<pre>
root@shipka:/etc/bind# nsupdate -l
> zone bufferbloat.net
> ttl 0
> update add dlv.bufferbloat.net in txt ""<text record>""
> send
</pre>","",2011-09-07 00:27:59.217617,1
89,89,3,"h1. Setting up a wndr3700 toolchain at home

These instructions are for setting up a toolchain on your *own* machine assuming you have an [[account on huchra.bufferbloat.net]] and [[ssh configured on port 222]].

<pre>
cd ~
mkdir src
cd src/
git clone --bare git://nbd.name/openwrt.git openwrt
git clone --reference openwrt ssh://bismark@huchra.bufferbloat.net/home/bismark/src/wndr3700 wndr3700
git clone ssh://bismark@huchra.bufferbloat.net/home/bismark/bin bismark-bin
#If you are planning on doing multiple branches it pays to have a common download directory
mkdir ~/dl ~/bin
cd wndr3700
ln -s ~bismark/dl .
ln -s ~bismark/bin/install_std_packages ~/bin
scp bismark@huchra.bufferbloat.net:/home/bismark/src/wndr3700/feeds.conf .

#less feeds.conf #if you wish to look at what's in there
~/bin/install_std_packages
#(this script basically installs the following, and may be more up to date)
# ./scripts/feeds update
# bash webif webif-theme-xwrt radvd polipo samba3 curl bing babeld qos-scripts
# fping tcpdump  tcptraceroute netperf install ntpd-ssl ntpdate l7-protocols 
# ddns-scripts iperf gnupg ipv6calc
# copying this late this makes sure your packages will be built 
scp bismark@huchra.bufferbloat.net:/home/bismark/src/wndr3700/.config .
make menuconfig # look around and save new version
echo make -jHOWEVER_MANY_CPUS_YOU_WANT_TO_USE_UP | batch
</pre>

# Wait for email to your account on your machine, Or setup a ~/.forward file to send elsewhere (using batch lowers the priority somewhat so your machine will still be usable... but the first build takes a VERY long time... go to lunch... batch will NOT start if your machine is already busy with other work. running the atq utility will show your job with a ""="" sign if it is running)
# You must remain connected to the internet for the first build, and any time you update packages or trees

h2. Coping with updates

Periodically you should do a
<pre>
cd ~/src
cd bismark-bin; git pull; cd ..
cd openwrt; git pull; cd .. #optionally do a git log to see what has changed before and after
cd wndr3700; git pull; ./scripts/feeds update
# and also look at the .config in the main repo and 
</pre>
Note that for serious changes to openwrt you will obsolete the kernel on the router and will no longer be able to use opkg to install your generated packages. You can usually do a feeds update safely without breaking an existing router.

You can customize your [[uberwrt:openwrt build overlays]] to make your default install come closer to ""just working"".

See also [[Working within the bismark feed]] and [[Pushing out changes to bismark]] for details on how to get your package updates into the 
main repos. 


","",2011-04-29 19:19:08.230486,15
217,217,3,"h1. Optimizing for 802.11n

h2. Background

h3. Queue Types

The VI and VO queues have innate properties that are not propagated up to the rest of the stack, notably they expect sub 100ms and 10ms latencies respectively. The VO queue does not retry nor aggregate packets (at present), the VI queue can (and does). 

It is silly to inject jitter of greater than 100ms or 10ms into either of these queues!

h3. Antennas (MIMO)

802.11n can send data from up to 4 antennas (spacial multiplexing) at the same time, to different destinations.

h2. Way forward

h3. TBQL - Time based Queue Limits

The VO and VI queues should have a drop head queue policy based on time in queue. 

h2. Notes

(THIS ISN'T EVEN A DRAFT. NOR IS IT A CORRECT. CONSIDER YOURSELF WARNED. READ NO FURTHER)

Classification, fair queuing and active queue managment as it applies to 802.11n have been keeping me up nights. In particular coming up with a sane way to use DRR or QFQ on 802.11n to any extent has caused some lost hair...

I've started working on a wiki page to sort all the details out, I just wanted to mention a few things this morning...

0) Some form of per destination fair queuing would really help. Enough detail about the destination is not visible outside of the driver level to effectively solve the FQ problem, either - strict FQ would destroy aggregation by splaying

Interestingly the QFQ algorithm (which we need to toss into debloat testing) has a max MSS of 5 which means it's ""mostly fair"" but can still bunch up packets somewhat, which is almost a useful property in the case of wireless-n aggregation.

It would

1) Shorter queues really help wireless-n be more 'interactive' under load, and also punishes g far less (g with n is still terrible). TCP responds amazingly well to the more modest & frequent levels of packet loss and yields the link to other traffic much better. While I have a nice plot of the last set of experiments I hope to do better and have a repeatable experiment soon...

At the moment I'm using a txqueuelen of 40 [2] throughout cerowrt. After having reduced the hardware tx queues [3] to bare minimums, this seems to be a decent tradeoff. (At present! See numerous caveats in the footnotes)

Part of why I did that was that it was proving difficult to find theoretical models/papers that used numbers for buffering in their simulations of greater than the range 50-100, so rather than feed in the worlds actual (insane) numbers for buffering [4] into models, I decided to feed in what the theorists used in the first place, into the real world.

Not so amusingly the bottleneck then moves to the laptop(s), where, again, a txqueuelen of about 40 'feels' right for HT40. Less and wireless-n bandwidth really suffers, more and latency and userfriendly 'fairness' between flows goes to hell.

YMMV! - certainly other drivers than the ones I'm using have 'dark buffers' hidden in them everywhere, exorbitant retries, weird power save behavior, etc, etc.

Now, I'm not saying that '40' is a right number in any way, either - as jim is fond of saying 

And under sub-optimal (or with g) 40 is too large.

What it does suggest is that there is a reasonable upper bound to txqueuelen that is much lower than the current default of 1000 on wireless. With the current structure of the drivers, I tend to think it's about 3x what I'm using - but to get there would require work (per destination fair queuing, and each destination also fair queued as it is aggregated)

The best solution is to implement would actually involve per-destination micro-queuing which would also keep buffers of about 3x the measured aggregation

I hate, like hell, suggesting additional buffering at the mac802.11 layer as a solution.

3) Classification is (as mentioned elsewhere) an aristotlian rathole. However, on what we are calling 'Ants' [1], some classification really pays off with reduced annoyance levels, and I also somewhat accidentally found something really nice which I'll get

I have implemented nearly full (and incorrect on several points in the current patch)


In the previous discussion



[1] ANT: ARP, DHCP, DNS, most routing related messages,

I keep getting people that think that TCP ACKS are ANTS and they are not: TCP ACKs are a different animal entirely. I'm not even sure if I want to call DNS an ANT - I mostly think of ANTs as 'packets that need to go very few hops - usually 1 - in less than 2 seconds - to do their job'

-- ","",2011-11-02 01:01:55.882031,2
46,46,3,"h1. Bufferbloat Related Humor

Without blowing off steam once in a while, any project can get a little tense. 
This is a collection of good jokes about Bufferbloat that have gone by, mostly on irc and in email.

h2. Jim Gettys

“Bufferbloat is surely an equal opportunity destroyer of latency”

h2. Steve Lord

(after seeing the differences between a normal TCP trace and a bufferbloat trace)

“Wow. That's like an EKG on crack.”

h2.  Bill Sommerfeld

Overheard at work: “Bufferbloat .. is that the new global warming?”

h2. Dave Täht

“Wireless routers: We made them. They devolved. There are many copies.”

The bufferbloat bdp equation:

{{mathjax( dark buffers = txqueuelen+tx_ring+powerSave+interference+technologies+aqms+bugs )}}

{{mathjax( bandwidth \times delay \times \sqrt(flows) + {(dark buffers) \over (luck * kluges)})}}

where luck is in the range 0..1 and rapidly approaching 0.

h2. Conversations:

esr: I explained Bufferbloat to a couple close friends. They got it instantly and had exactly the holy-leaping-#@!!-how-did-we-miss-this reaction you'd expect.
dtaht: AWESOME. 2 down, 2 billion to go!

dtaht: Got any additional sysadmin types in mind for the site? It's not what I do normally...
jg: As in people?
dtaht: No. Clones would be best.

del_diablo: BTW: How was the usenet days like?
(dtaht5 doesn't remember what usenet was like. he's having a señor moment)
dtaht5: oh, yea, back then, we used to have to carry our packets scribbled on little tiny pieces of paper.
dtaht5: ""RFC1149"":http://tools.ietf.org/html/rfc1149 was a REAL improvement on how we did things way back when.
del_diablo: RFC1149? Am I reading right? :P
dtaht5: yea. before that, we had to carry the darn packets by HAND!
del_diablo: Well, but its a ancient roman standard  (or older) :(
dtaht5: Oh, don't get me started about when we had to use cuniform and clay tablets... talk about latency!
dtaht5: and man... those kilns ran HOT! Hotter than a guruplug, by far.
(dtaht5 goes to feed the pigeons)

h2. Songwriting:

(composed by ""RevWaldo"":http://slashdot.org/~RevWaldo )

(Here is ""an earlier version of this"":http://www.rossolson.com/dwelling/2003/11/every-packet-is-sacred/ , that's more complete, but slightly less relevant to bufferbloat)

h3. Every Packet is Sacred

Every packet is sacred.
Every packet is great.
If a packet is wasted,
TCP gets quite irate.

Let the heathen drop theirs
When their RAM is spent.
TCP shall make them pay for
Each packet that can't be sent.

Every packet is wanted.
To this we are sworn.
From real-time data from CERN
To the filthiest of porn.

Every packet is sacred.
Every packet is great.
If a packet is wasted,
TCP gets quite irate.
","",2011-10-18 03:18:33.730259,10
98,98,74,"h1. Setting up a Measurement Server

*M-Lab nodes*

* Just after logging in, run the following commands:
<pre>
sudo yum -y install subversion
svn co --username bismark --password broadbandInternet https://svn.comics.unina.it/bismark/trunk/mserver .
./scripts/setup-mlab
</pre>

The measurement server is then operative.
If needed you can change default options by modifying the ~/etc/mserver.conf file.
After modifying the configuration file you have to launch the ./scripts/reload script.

*NOTE* The management server needs to be configured accordingly



*Platform independent*

*  The server needs the following packages installed
<pre>
socat
subversion
</pre>
*  The user designated to run measurements needs sudo permissions (without password) to run *socat*
* checkout https://svn.comics.unina.it/bismark/trunk/mserver to the user home directory
* setup user's crontab with the provided crontab file","",2011-04-28 09:08:39.699224,6
7,7,3,"h1. Emacs and Redmine

* Textile minor mode

svn checkout http://textile-minor-mode.googlecode.com/svn/trunk/ textile-minor-mode-read-only

Annoyingly the ""text"" downloads from redmine have a .txt extenstion rather than a textile extension so you have to turn on texttile-minor-mode manually.
","",2011-01-24 08:03:14.138303,1
8,8,3,"h1. Plugin Tests

{{graphviz(
digraph finite_state_machine {
    rankdir=LR;
    size=""8,5""
    node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;
    node [shape = circle];
    LR_0 -> LR_2 [ label = ""SS(B)"" ];
    LR_0 -> LR_1 [ label = ""SS(S)"" ];
    LR_1 -> LR_3 [ label = ""S($end)"" ];
    LR_2 -> LR_6 [ label = ""SS(b)"" ];
    LR_2 -> LR_5 [ label = ""SS(a)"" ];
    LR_2 -> LR_4 [ label = ""S(A)"" ];
    LR_5 -> LR_7 [ label = ""S(b)"" ];
    LR_5 -> LR_5 [ label = ""S(a)"" ];
    LR_6 -> LR_6 [ label = ""S(b)"" ];
    LR_6 -> LR_5 [ label = ""S(a)"" ];
    LR_7 -> LR_8 [ label = ""S(b)"" ];
    LR_7 -> LR_5 [ label = ""S(a)"" ];
    LR_8 -> LR_6 [ label = ""S(b)"" ];
    LR_8 -> LR_5 [ label = ""S(a)"" ];
}
)}}
","",2011-01-24 08:44:36.623299,1
17,17,64,"h1. Papers

In the discussions on bufferbloat so far, an astounding number of papers have been referenced:

Motorola has a ""very clear management level presentation on the need for fair queuing"":http://www.cascaderange.org/presentations/DOCSIS_1_1_QoS.pdf

Read the slides starting with ""If RED is not good enough, what is?"". 

http://gettys.files.wordpress.com/2010/12/uplink_buffer_all.pdf

""Netalyzr: Illuminating The Edge Network"":http://www.icir.org/christian/publications/2010-imc-netalyzr.pdf 
As outlined in the ""IMC Netalyzr paper"":href=""http://conferences.sigcomm.org/imc/2010/papers/p246.pdf"" section 5.2, the structure you see is very useful to see what buffer sizes and provisioned bandwidths are common. The diagonal lines indicate the latency (in seconds!) caused by the buffering. Both wired and wireless Netalyzer data are mixed in the above plots. The structure shows common buffer sizes that are sometimes as large as a megabyte. Note that there are times that Netalyzr may have been under-detecting and/or underreporting the buffering, particularly on faster links; the Netalyzr group have been improving its buffer test.

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.65.6825&amp;amp;rep=rep1&amp;amp;type=pdf

--

""Battling Bufferbloat"":http://akira.ruc.dk/~tohojo/bufferbloat/bufferbloat-final.pdf

http://simula.stanford.edu/sedcl/files/dctcp-final.pdf

""Fast Object-Based data transfer System(FOBS)"":http://www.umcs.maine.edu/~dickens/pubs/HPDC.FINAL.pdf

""Simple Available Bandwidth Utilization Library(SABUL)"":http://pubs.rgrossman.com/dl/journal-028.pdf

""Reliable Blast UDP (RBUDP)"":http://www.evl.uic.edu/files/pdf/cluster2002.pdf

""Bittorrent Broadnets"":http://www.cs.clemson.edu/~jmarty/papers/bittorrentBroadnets.pdf - with buffers of 20-40 packets (32-64 KB buffers).  As soon as the common uplink saturated, everything went to heck

""Comcast's kill bittorrent 'solution' did only target uploads"":http://www.isoc.org/isoc/conferences/ndss/09/pdf/08.pdf

""Flow Splitting with Fate Sharing in a Next-Generation Transport Services Architecture"":http://dedis.cs.yale.edu/2009/tng/ - also ""available on arXiv"":http://arxiv.org/pdf/0912.0921v1 

http://www.usenix.org/event/nsdi09/tech/full_papers/sanaga/sanaga.pdf

http://guido.appenzeller.net/pubs/sigcomm-extended.pdf

""Optimization of TCP/IP Traffic Across Shared ADSL"":http://www.adsl-optimizer.dk/thesis/main_final_hyper.pdf

""Understanding Bandwidth-Delay-Product in wireless mesh networks"":http://cairo.cs.uiuc.edu/publications/papers/elsevier2004-bdp.pdf

http://yuba.stanford.edu/~nickm/papers/

""Characterizing Residential Broadband Networks"":http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.65.6825&rep=rep1&type=pdf

""Buffer Bloat Calculations"":http://netoptimizer.blogspot.com/2010/12/buffer-bloat-calculations.html

""RAQM (REMOTE Active Queue Management"":http://www.cs.purdue.edu/homes/eblanton/publications/raqm.ps 
h2. More unsorted papers

Marina Thottan has been very kind to send me pointers to recent work on router buffer sizing. As you will see, there are good reasons to believe much conventional wisdom is far from the mark.

She is co-author of a survey paper that covers work done by different groups on router buffer sizing. Here is a link to it:
http://portal.acm.org/citation.cfm?id=1517487&CFID=13973251&CFTOKEN=48745519&qualifier=LU1007961

Nick Mckeown @ Stanford has several talks on buffers for routers.
Here is the link to his web page:
http://tiny-tera.stanford.edu/~nickm/talks/index.html

The specific talks are on this page:
""Internet Routers: Past Present and Future.""
""Buffers: How we fell in love with them, and why we need a divorce.""
""Sizing Router Buffers""
""Network Processors and their memory""
""Designing Packet Buffers for Internet Routers""
""Memories for Internet Routers""

h2. TCP Veno papers

""Veno"":http://wwwbk.ie.cuhk.edu.hk/fileadmin/staff_upload/soung/Journal/J3.pdf 

""Veno And RED"":http://www.ie.cuhk.edu.hk/fileadmin/staff_upload/soung/Conference/C12.pdf

""Fluid based modeling of Veno"":http://web.mysites.ntu.edu.sg/aschfoh/public/Shared%2520Documents/pub/06777512-GC08.pdf

h2. Bad, outdated advice (should be corrected in the field)

http://fasterdata.es.net/TCP-tuning/linux.html",added Battling Bufferbloat by Toke Høiland-Jørgensen,2013-01-19 11:32:43.715292,9
288,288,145,"h1. Hardware Reports on FQ CODEL

Please list successes and particularly, failures, for getting debloated links with OpenWRT on other hardware platforms.
","",2013-08-30 11:16:21.091812,1
235,235,213,"h1. IPv6 Tunnelling

Hurricane Electric (http://he.net) provides a free IPv6 ""6in4"" tunnel that works well with CeroWrt. This gives your router a globally routable IPv6 address so that you can directly connect to other IPv6 resources on the Internet. It's straightforward to do this: first you create a free tunnel account through Hurricane Electric's Tunnelbroker site (http://tunnelbroker.net) and then configure your CeroWrt router. 

The [[IPv6_Tunnel#Sample-Script-for-setting-up-Tunnelbroker-Tunnel|Sample Script for IPv6 tunnel]] makes it easy to set up the tunnel once you have created your Tunnelbroker account. This procedure has been tested with the Modena 3.7.5-2 and newer builds.

NB: As of March 2013 (CeroWrt 3.7.5-2), the automatic re-establishment code of the 6in4 module appears not to be working. You will need to re-establish the tunnel manually (see Step 3 below) when your external IP address changes. Bug is being tracked here: #358

*1. Create an IPv6 6in4 tunnel*

# Go to the IPv6 Tunnel Broker site at http://tunnelbroker.net
# Register to create an account. After you're logged in...
# Click the Create Regular Tunnel link (circled in Figure 1, below) You'll see the ""Create New Tunnel"" page (Figure 2).
# Fill in the ""IPv4 Endpoint (Your side):"" field with your router's external IP address. This is shown in the ""You are viewing from:"" line.
# Click the button that corresponds to the closest Tunnel Server. The page may suggest a server recommendation, as shown in the image. If so, use it.
# Scroll to the bottom of the page and click the ""Create Tunnel"" button. It will take a few moments (less than a minute) to create and register your new tunnel, and show the Tunnel Details page.
# The Tunnel Details page (Figure 3) shows everything you need to know about your tunnel:

 * Your Tunnel ID and its creation date.
 * A text field where you can fill in a human-readable name for the tunnel
 * The IPv6 Tunnel endpoints: both an IPv4 and IPv6 address for the server (far) endpoint, and the IPv4 & IPv6 address for your end of the tunnel.
 * DNS resolver addresses (IPv4 & IPv6) 
 * Routed IPv6 prefixes for a /64 (single network) or /48 address. 
 * rDNS name servers for this block of addresses.
# You can click on any of the legends (""Tunnel ID"", ""Routed /64"", etc.) to see more details. 

You have now created the tunnel. (The Tunnel Broker home page lists all the tunnels that you have established.) Hurricane Electric is listening on their end, waiting to pass IPv6 traffic to and from your external address listed above. Now you need to configure the CeroWrt router to use the tunnel.

*2. Configure CeroWrt to use the IPv6 Tunnel*

# Stay on the Tunnel Details page of the Tunnel Broker web site.
# Click the Example Configurations tab (Figure 4) on the Tunnel Details page. This lists a number of configurations for common routers/operating systems. 
# Select ""OpenWRT Backfire 10.03.1"" from the dropdown. You will see a set of commands listed. 
# Use your favorite text editor to open the [[IPv6_Tunnel#Sample-Script-for-setting-up-Tunnelbroker-Tunnel|Sample Script for TunnelBroker tunnel]] .
# Use the values from the Tunnelbroker web page to fill in the corresponding values in the script. Save the text to file in /tmp and execute the script.
# The full procedure for saving and executing the script is described at the top of the script file.

*3. Manually re-establish the tunnel when your IPv4 address changes*

If you do not have a static IPv4 address for the client end of the tunnel (perhaps you have a DSL or cable modem connection), your tunnel will go down each time your external IPv4 address changes.

The Tunnel Broker has a facility for re-registering your current client IPv4 address. The page at https://ipv4.tunnelbroker.net/ipv4_end.php has details. As a quick fix, you can visit the URL below to inform the Tunnel Broker to update your TUNNELID to autodetect your IPv4 address:

@https://USERNAME:PASSWORD@ipv4.tunnelbroker.net/ipv4_end.php?tid=TUNNELID@

or use the non-HTTPS URL described in the [[IPv6_Tunnel#Sample-Script-for-setting-up-Tunnelbroker-Tunnel|script]] below. If the update goes properly, you see a response similar to this: 

@+OK: Tunnel endpoint updated to: 123.45.67.89@

h2. Sample Script for setting up Tunnelbroker Tunnel

The *tunnelbroker.sh* script sets up a tunnel using the configuration parameters provided by the Hurricane Electric Tunnelbroker.net site. As of CeroWrt 3.10.50-1, this script is pre-installed in @/usr/lib/CeroWrtScripts@ 

The script is also available as part of the ""CeroWrtScripts bundle"":http://www.bufferbloat.net/projects/cerowrt/wiki/CeroWrtScripts on *GitHub:* https://github.com/richb-hanover/CeroWrtScripts/blob/master/tunnelbroker.sh  

Update: On 17Nov2014, the CeroWrtScripts on github were updated to fix a problem with supplying the correct username. Read the tunnelbroker.sh script for more details. The version of the pre-installed script in CeroWrt 3.10.50-1 does *not* contain this fix: edit the file manually to use the correct username - your plain UserID.

h2. Screenshots

The screenshots below illustrate the process of setting up a TunnelBroker account at HurricaneElectric.net

*Figure 1:* Main Page, showing *Create Regular Tunnel* link
!tunnelbroker1.png!

*Figure 2:* Create New Tunnel page
!tunnelbroker2.png!

*Figure 3:* Tunnel Details page
!tunnelbroker3.png!

*Figure 4:* Configuration script for CeroWrt and OpenWrt
!tunnelbroker4.png!

*Figure 5:* Advanced Settings
!tunnelbroker5.png!","",2014-11-17 11:11:58.634729,27
258,258,3,"h1. Tuning Cerowrt

Cerowrt contains some advanced features that are disabled by default due to in part lack of easy means to enable them.

h2. Using DNS forwarders

DNS servers throughout the globe are often badly implemented, and do not support advanced features
such as IPv6 and DNSSEC. However, most ISPs do provide a local DNS server for use that caches a significant amount of data, thus reducing latencies for DNS lookups by a lot. It is best to leverage that DNS server if possible.

We have supplied an example forwarders.conf file with fixed pointers to comcasts' DNSSEC enabled servers, however they do not work if you are not on comcast's network. 

So, find out the DNS servers your ISP provides pass DNSSEC data, and if so, enter those servers into
the forwarders.conf file, and enable using it by uncommenting the relevant line in named.conf.

Your DNS lookups will remain secure, and speed up by a lot.


","",2012-06-08 08:02:01.426817,1
10,10,213,"h1. Technical Introduction to Bufferbloat

Bufferbloat is the cause of much of the poor performance and human pain experienced using today’s Internet. It can be the cause of a form of congestion collapse of networks, though with slightly different symptoms than that of the 1986 NSFnet collapse. Since ""discussion of the best terminology for the problem reached no consensus"":http://mailman.postel.org/pipermail/end2end-interest/2009-September/007769.html , [[Jim Gettys]] invented a term that might best convey the sense of the problem. 

bq. Bufferbloat[1] is the undesirable latency that comes from the existence of excessively large (bloated) buffers in systems, particularly network communication systems.

In a shared network, “bufferbloat” is a phenomenon whereby buffering of packets causes high latency and jitter, as well as reducing the overall network throughput. 

With TCP/IP, during [[network congestion]] bufferbloat causes extra delays, limiting the speed of internet connections. Other network protocols are also affected, including UDP-based protocols, partly because they share buffers in the router with TCP/IP connections. This can cause problems by restricting the speed of connections, affecting interactive applications, [[gaming]] and [[VoIP]]. It has only become apparent in recent years, as more modern network equipment implements larger buffers as memory prices fall.

The problem is that the TCP congestion avoidance algorithm relies on packet drops to determine the bandwidth available. A TCP sender increases the rate at which it sends packets until packets start to drop, then decreases the rate. Ideally it speeds up and slows down until it finds an equilibrium equal to the speed of the link. However, for this to work well, the packet drops must occur in a timely manner, so that the sender can select a suitable rate. If a router on the path has a large buffer capacity, the packets can be queued for a long time waiting until the router can send them across a slow link to the ISP. No packets are dropped, so the TCP sender doesn't receive information that it has exceeded the capacity of the bottleneck link. It doesn't slow down until it has sent so much beyond the capacity of the link that the buffer fills and drops packets. At this point, the sender has far overestimated the speed of the link. 

In a network router, packets are often queued before being transmitted. Packets are only dropped if the buffer is full. On older routers, buffers were fairly small so filled quickly and therefore packets began to drop shortly after the link became saturated, so the TCP/IP protocol could adjust. On newer routers buffers have become large enough to hold several megabytes of data, which can be equivalent to 10 sec. or more of data. This means that the TCP/IP protocol can't adjust to the speed correctly, as it appears be able to send for 10 sec without receiving any feedback that packets are being dropped. This creates rapid speedups and slowdowns in transmissions.

The problem also affects other protocols. The router's buffer can easily build up several seconds worth of data before packets start to drop. Those packets in the queue block (can be ahead of) interactive applications and cause problems for [[DNS]], [[ARP]], [[NTP]], [[DHCP]], gamers and [[VoIP]]. This is even the case with DiffServ, which has multiples buffers (queues). HTTP and VoIP may be buffered independently, but each buffer will still be independently susceptible to bufferbloat.

Systems suffering from bufferbloat will have bad latency under load under some or all circumstances, depending on if and where the bottleneck in the communication’s path exists. Bufferbloat encourages congestion of networks; bufferbloat destroys congestion avoidance in transport protocols such as HTTP, TCP, Bittorrent, etc. Network congestion avoidance algorithms depend upon timely packet drops or ECN; bloated buffers violate this design presumption. Without active queue management, these bloated buffers will fill, and stay full.

More subtlety,  poor latency, besides being painful to users, can cause complete failure of applications and/or networks, and extremely aggravated people suffering with them.

Bufferbloat is seldom detected during the design and implementations of systems as engineers are methodical people, seldom if ever test latency under load systematically, and today’s memory is so cheap buffers are often added without thought of the consequences, where it can be hidden in many different parts of network systems.

You see manifestations of bufferbloat today in your operating systems, your home network, your broadband connections, possibly your ISP’s and corporate networks, at busy conference wireless networks, and on 3G networks. You can use the ""DSLReports Speed Test"":http://dslreports.com/speedtest to measure bufferbloat directly.

Bufferbloat is a mistake we’ve all made together. What's the solution? We have had extremely good results with the ""CoDel"":http://www.bufferbloat.net/projects/codel/wiki algorithm, and the related fq_codel which reduce bufferbloat by several orders of magnitude.

h2. See also

* ""Bufferbloat wikipedia"":http://en.wikipedia.org/wiki/Bufferbloat ,[[Dark Buffers]] 
* ""The Buffer Bloat Project"":/projects/bloat
* ""CoDel"":http://www.bufferbloat.net/projects/codel/wiki and fq_codel

h2. External links

* ""Jim Gettys Ramblings"":http://gettys.wordpress.com/category/bufferbloat/

h2. Footnotes

fn1. For the English language purists out there, formally, you are correct that “buffer bloat” or “buffer-bloat” would be more appropriate.

!>/images/Attribution_ShareAlike.png!:http://en.wikipedia.org/wiki/Wikipedia:Text_of_Creative_Commons_Attribution-ShareAlike_3.0_Unported_License","",2015-05-20 21:55:03.298991,19
9,9,24,"h2. Dark buffers

Large network buffers can be thought of as 'dark buffers', analogous to 'dark matter' in the universe. They are undetectable under most circumstances, and you can detect them only by indirect means. Buffers do not cause problems when they are empty. But when they fill they introduce additional latency (and create other problems, possibly very severe) to other traffic sharing the link.

The ""Buffer Bloat project"":/projects/bloat is dedicated to finding and mitigating Dark Buffers.

","",2011-02-08 09:52:06.359981,4
6,6,3,"h1. Sandbox

* Optimimum buffering according to Kleinrock

{{mathjax( bandwidth \times delay \times \sqrt(flows))}}

* Bufferbloat Equation vs Kleinrock

{{mathjax( bandwidth \times delay \times \sqrt(flows) + {(dark buffers) \over (luck * hacks)})}}

where luck is in the range 0..1 and rapidly approaching 0.

The congestion window of TCP/Cubic is determined by the following function:

{{Mathjax(W_{cubic} = C(t − K)^3 + W_{max})}} where C is a scaling factor, t is the elapsed time from the last window reduction) W_max is the window size just before the last window reduction, and 

{{Mathjax( K = \sqrt[3]{(W_{max} β/C)})}} where β is a constant multiplication decrease factor applied for window reduction at the time of loss event (i.e., the window reduces to βW_m_a_x at the time of the last reduction).

I had tested inline images before, and they just worked.

This doesn't,

!jigsawfish_small.png!

Attachment?

!attachment_jigsawfish_small.png!

Does a full url work?

!http://www.bufferbloat.net/attachments/14/jigsawfish-small.png!

Does a mirrored url work?

!http://mirrors.bufferbloat.net/jigsawfish-small.png!

Partial url?

!attachments/14/jigsawfish-small.png!

Url with a link?

!/images/jigsawfish-small.png!:http://www.lwn.net

* Macro List

{{macro_list}}","",2011-01-31 20:57:45.980453,29
13,13,213,"h1. Glossary

{{>toc}}

These terms are defined in the context of the overall topic, Bufferbloat, and their relevance to the recognition, detection, description, mitigation of this problem. As such, references to others' definitions may be given for completeness but should be prefaced or augmented by subjective and/or objective definition of the relationship to the Bufferbloat problem.


h1. Bufferbloat

Bufferbloat is the cause of much of the poor performance and human pain experienced using today’s Internet. It can be the cause of a form of congestion collapse of networks, though with slightly different symptoms than that of the 1986 NSFnet collapse. Since ""discussion of the best terminology for the problem reached no consensus"":http://mailman.postel.org/pipermail/end2end-interest/2009-September/007769.html , [[Jim Gettys]] invented a term that might best convey the sense of the problem. 

bq. Bufferbloat[1] is the existence of excessively large (bloated) buffers in systems, particularly network communication systems.

See [[Bufferbloat]] for extended definition - ""Also now defined on Wikipedia"":http://en.wikipedia.org/wiki/Bufferbloat

_please leave this term at the top of the list_

h2. Active Queue Management (AQM)

""Wikipedia"":http://en.wikipedia.org/wiki/Active_queue_management : ""In Internet routers, active queue management (AQM) is a technique that consists in dropping or ECN-marking packets before a router's queue is full."" This is important because the dropped/marked packets are critical to the proper operation of network protocols such as TCP. AQM techniques help to reduce symptoms of [[bufferbloat]], where networks work fine when there's not much traffic/load on the network but degrade dramatically when there is load. 

h3. Random Early Detection (RED, RED 93, nRED)

definition needed (should this be moved to AQM?)

h3. Stochastic Fair Blue (SFB)

definition needed - should other queuing protocols be put here too, or in Alphabetical order?

h2. Congestion Control (TCP)

definition needed - references to TCP Vegas, TCP cubic and others? or separate definitions?

h2. {{include(Dark Buffers)}}

h2. Explicit Congestion Notification (ECN)

Defined in ""RFC3168"":http://www.ietf.org/rfc/rfc3168.txt defines a method (negotiated using ECN bits in packets) whereby a router sets a bit on the transited packet if congestion is impending - and the receiving program in turn sets the bit on the ACK packet back to the sending program, which then is to act as if a packet had been dropped (as far as shutting the congestion window size). ECN cannot eliminate packet loss but can, if used with reasonable AQM, pre-warn and possibly prevent much packet loss. 

h2. Fairness

definition needed

h2. Goodput

The actual payload throughput of a link, stripped of all the traffic that is retries and other overhead. Application sender to Application receiver.  More detail at ""Wikipedia"":http://en.wikipedia.org/wiki/Goodput

h2. Latency

The delay between transmission of information and its arrival.  Network latency is more important than throughput in user perception of how smooth and responsive an interface is.  You can read a more technical definition at ""Wikipedia"":http://en.wikipedia.org/wiki/Latency_%28engineering%29

Jim Gettys adds: As a UI guy, my metrics have always been (since I learned this stuff first hand in the 1980s), that:

    * No perceptible delay to all human interactions requires less than 20ms (rubber banding is hardest)
    * semi-tolerable rubber banding needs less than 50ms
    * typing needs to be less than 50ms to be literally imperceptible
    * typing echo needs to be less than 100ms to to be usually not objectionable
    * echo cancellation gets harder as well (the best echo cancellation needs to be done as close to all participants as possible, even the latency over a broadband link is undesirable).
    * then there are serious gamers for whom even a millisecond may be an advantage and the difference between life and death

h3. Latency under Load

definition needed (generic - basic loading paradigm, specific - how it is measured/reported - updated as we define this measurement)

h2. Packet Loss

definition needed

h2. Queuing discipline

A quueing discipline (Qdisc fir short) is an algorithm for controlling when packets are shipped out of a buffer to a downstream link.  Well-tuned queuing disciplines increase network performance while decreasing peak load. Poorly-tuned ones wreak havoc.  A list of well-known Qdiscs used on TCP/IP networks follows:

* RED
* nRED
* SFB
* ESFQ
* SFQ
* HTB
* HSFC
* MQ
* ""Choke"":http://lwn.net/Articles/422477/

h2. Throughput (network throughput)

Aggregate total of packet traffic on the link which may include TCP retries and other overhead not directly contributing to the ""Goodput"" (application sender to application receiver) traffic.

h2. Utilization (network utilization)

definition needed

h2. Window (Congestion Window)

definition needed

h2. Windows XP Problem 

(the ongoing retirement of and its potential effect on the overall internet)

definition needed","",2012-02-14 19:25:25.89373,23
209,209,3,"h1. Evaluating tcp behavior

h1. TBD

We really need to document how to do wireshark/tcpdump, bpf filters, then do analysis via wireshark, tcptrace, xplot.org","",2011-09-08 11:18:38.050365,1
109,109,49,"h1. Cape Town Release of BISMark

h2. Release notes and installation guide

* [[CAPETOWN INSTALLATION GUIDE|Installation Guide]]
* [[CAPETOWN FAQ|FAQ]]

BISMark, by default, ""phones home"". If, at any point, you wish to stop your participation, simply remove the bismark-mgmt and bismark-active packages.

h2. Builds

Please see the [[CAPETOWN INSTALLATION GUIDE|installation guide]] for the 'stable' build.

For the daring:

* Development builds are at: http://huchra.bufferbloat.net/~bismark/capetown/ Here are [[Capetown Build]] instructions

h2. What is BISMark?

Learn more about BISMark ""here"":http://projectbismark.net


","",2011-07-18 15:25:59.868676,15
59,59,3,"h1. Web User Management

{{include(Password)}}

{{include(Anti-spam)}}","",2011-03-19 10:51:14.420644,1
18,18,3,"h1. Talks

meh. embedding youtube bad.

Van Jacobson actually gave that talk at a http://www.linux.org.au/conf/2006/"" LCA 2006/a, in Dunedin, where it justifiably made it into a best of conference set and deservedly received a standing ovation.","",2011-01-26 20:45:26.486509,1
60,60,3,"h1. Server Access

{{include(Password)}}

{{include(Anti-spam)}}","",2011-03-19 10:51:49.671798,1
99,99,6,"h1. Wlan script for Debian style /etc/network/if-up.d directory

<pre>
#!/bin/sh

IFTOOL=/sbin/ifconfig
TXQUEUELEN=32

test -x $IFTOOL || exit 0

# Don't bother to reload when lo is configured.
if [ ""$IFACE"" != ""wlan0"" ]; then
    exit 0
fi

# Only run from ifup.
if [ ""$MODE"" != start ]; then
	exit 0
fi

SETTINGS=""txqueuelen $TXQUEUELEN""

[ -z ""$SETTINGS"" ] || $IFTOOL ""$IFACE"" $SETTINGS

exit 0
</pre>
","",2011-04-20 15:53:17.181817,1
70,70,59,"h1. IPV6 RTTs

Here be traceroute6's and ping6's from far flung parts to shipka.bufferbloat.net;

[[Australian IPV6 RTTs]]","",2011-03-20 22:33:16.849094,1
236,236,213,"h1. CeroWrt 3.3 Release Notes

CeroWrt is a routing OS built on the ""OpenWrt firmware"":http://openwrt.org . It is a research project intended to resolve the bufferbloat epidemic in home networking today, and to push forward the state of the art of edge networks and routers. SubProjects include proper IPv6 support, tighter integration with DNSSEC, and most importantly, reducing bufferbloat in both the wired and wireless components of the stack.

The final CeroWrt 3.3 ""Sugarland"" build is ""3.3.8-26"":http://huchra.bufferbloat.net/~cero1/3.3/3.3.8-26/ , built on 18 Sept 2012.
Download from http://huchra.bufferbloat.net/~cero1/3.3/3.3.8-26/

*Note:* The Sugarland set of builds has been superceded by the ""Modena (3.7) set of builds"":http://www.bufferbloat.net/projects/cerowrt/wiki/CeroWrt_37_Release_Notes

*Features*

The CeroWrt 3.3 series of builds include the following features and capabilities:

* Linux 3.3.8 kernel. Many of the fixes for bufferbloat are being implemented in this 3.3  kernel, so we are tracking these developments carefully. http://kernel.org
* The ""CoDel"":http://www.bufferbloat.net/projects/codel/wiki algorithm from Kathie Nichols and Van Jacobson along with Eric Dumazet's adaptation of Fair Queueing on top. These in turn rely on the Byte Queue Limits that were implemented in the Linux 3.3 kernel. These techniques replace earlier Active Queue Management fixes for bufferbloat including: Stochastic Fair Queueing-Random Early Drop (SFQRED), but for comparison previous technologies such as SFQ and RED continue to be included.

* IPv6 support. Another major goal of CeroWrt is to make IPv6 networking in the home as simple as IPv4.
* Babel mesh routing protocol (Quagga-babeld). Other protocols such as ra, ospf, and bgp are also available.
* DNSSEC and DNSSEC proxying - Secure extensions to the DNS system. Proxying is currently in testing.
* OpenWrt features. Because we track the OpenWrt code base carefully, we incorporate most of the capabilities of that distribution. We actively push our changes/enhancements back toward the OpenWrt trunk. http://openwrt.org
* An attractive web GUI for configuration - LuCI
* CeroWrt has the following packages either built-in and enabled, or optionally loaded:

*IPv6 packages:*
- radvd 1.8.3-3 - router advertisement daemon http://www.litech.org/radvd/
- 6to4 version 9-1 - IPv6 tunnel through IPv4 (not turned on by default)
- 6in4 version 11-1 - IPv6 tunneling (not turned on by default)
- 6rd 
- wide-dhcpv6-client 20080615-11 - DHCPv6 support for IPv6 

*Other modules:*
- strongswan4 4.5.3-2 - IPsec VPN http://www.strongswan.org/
- openvpn 2.2.2-2 - SSL VPN http://openvpn.net/
- avahi-daemon 0.6.30-4 - reflector for zeroconf/mDNS-SD/Bonjour names http://avahi.org/
- samba36-server 3.6.5-2 - file and printer service  http://www.samba.org
- bind 9.9.1-P1-19 - fast, stable DNS support http://www.isc.org/software/bind
- ntp 4.2.7p256-1 - network time client http://www.ntp.org/
- enhancements to the LuCI web GUI
- iptables 1.4.12.2-1git-5 - framework for packet filtering and network address/port translation http://www.netfilter.org/
- iproute2 - utilities for controlling TCP/IP traffic in a Linux kernel http://www.linuxfoundation.org/collaborate/workgroups/networking/iproute2
- dnsmasq 2.62-4 - DNS forwarder and DHCP server designed for home routers and NAT http://www.thekelleys.org.uk/dnsmasq/doc.html

*Other measurement tools are available for installation:*
- snmpd 5.4.2.1-5 - for monitoring network traffic
- fprobe 1.1-1 for monitoring NetFlow traffic
- iperf 2.0.5-1
- scamper

h2. Releases

h3. 3.3.8-26 ""Sugarland""

- bind-9.9.1-P3 CVE fix

Experimental stuff

- ns2_codel, nfq_codel, efq_codel available optionally
- wifi queuing boosted from very low values to a compromise that preserves more bandwidth
- debloat change to lower target to 5ms, quantums to 1000


h3. 3.3.8-17

- bind-9.9.1-P2 CVE fix
- 6to4 fixes for interface assignment
- 6to4 route propagation workaround (#406)
- AQM gui module removed (too confusing, wasn't working stuff)

Experimental Stuff

- wifi queuing kept at low values
- debloat change to lower target to 5ms, quantums to 256 (from mtu)
","",2013-03-16 10:21:33.904478,26
72,72,3,"h1. Backups

http://www.rsnapshot.org/

","",2011-03-21 15:04:02.884826,1
5,5,3,"h1. Sysmom wiki

!>/images/bofh.png!:http://pages.cs.wisc.edu/~ballard/bofh/bofhserver.pl

* The [[Servers]] we have up and in (#35) the queue. Our [[projects]], public and private. How we are [[coping with crashes]]. The [[mailing lists]] we have in operation. The [[web and database server]] systems. The [[ipv6]] support. The Search engine problem (#2) 

* [[Virtual Servers]] Reference

* Overall guidelines about the [[bloat:Dogfood Principle]] we are using throughout

* The start at [[Backups]], [[Disaster Planning]], [[Password]], [[Web User Management]], and [[Server Access]], [[Anti-spam]] techniques.

* [[Using the Email Interface to Bufferbloat's Redmine]], [[Emacs and Redmine]] For those that can't stand the web and the [[sandbox]] for those that must.

* [[Plugin Tests]], [[Drafts]] - trying to find the minimal amount of reformatting for good results.

* [[IPV6 RTTs]] - logging initial data from far flung places.","",2011-03-21 20:48:54.928378,22
75,75,3,"h1. Perfect wireless router

While we are all geeks here, there are several commercial vendors struggling with building CPE gear that we might be able to learn from, notably comcast's struggles with the 160N and e3000, and google's. 

But I'd really like a discussion. One existing answer ([[wisp6]]) is pretty radical in scope with special problems. The [[Build Configuration]] describes what we have so far. 

This RFC is not bad:

http://www.rfc-editor.org/in-notes/authors/rfc6204-diff.html","",2011-04-21 04:20:16.90049,4
263,263,3,"h1. 338-11 tests

<pre>
m@cruithne:~/3.3.8-11$ netperf -H 172.25.45.1 
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.25.45.1 () port 0 AF_INET
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    10.06      37.80   
m@cruithne:~/3.3.8-11$ netperf -l 60 -H 172.25.45.1 &
[1] 19912
m@cruithne:~/3.3.8-11$ MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.25.45.1 () port 0 AF_INET
netperf -l 60 -H 172.25.45.1 &
[2] 19913
m@cruithne:~/3.3.8-11$ MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.25.45.1 () port 0 AF_INET
netperf -l 60 -H 172.25.45.1 &
[3] 19914
m@cruithne:~/3.3.8-11$ MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.25.45.1 () port 0 AF_INET
netperf -l 60 -H 172.25.45.1 &
[4] 19915
m@cruithne:~/3.3.8-11$ MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.25.45.1 () port 0 AF_INET
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.45      18.32   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.23      16.76   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.17      16.35   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.04      16.50   

</pre>

<pre>
root@village:~# tc -s qdisc show dev sw10
qdisc mq 1: root 
 Sent 8347990 bytes 100563 pkt (dropped 121777, overlimits 0 requeues 11389) 
 backlog 39006b 591p requeues 11389 
qdisc fq_codel 10: parent 1:1 limit 100p flows 1024 quantum 1514 target 5.0ms interval 100.0ms 
 Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0) 
 backlog 0b 0p requeues 0 
  maxpacket 256 drop_overlimit 0 new_flow_count 0 ecn_mark 0
  new_flows_len 0 old_flows_len 0
qdisc fq_codel 20: parent 1:2 limit 1200p flows 1024 quantum 1514 target 13.0ms interval 100.0ms ecn 
 Sent 864 bytes 8 pkt (dropped 0, overlimits 0 requeues 0) 
 backlog 0b 0p requeues 0 
  maxpacket 256 drop_overlimit 0 new_flow_count 0 ecn_mark 0
  new_flows_len 0 old_flows_len 0
qdisc fq_codel 30: parent 1:3 limit 1200p flows 1024 quantum 1514 target 13.0ms interval 100.0ms ecn 
 Sent 6963197 bytes 98910 pkt (dropped 121777, overlimits 0 requeues 11253)
                    ^^^^^               ^^^^^ WTF?
 backlog 39006b 591p requeues 11253 
  maxpacket 1514 drop_overlimit 0 new_flow_count 952 ecn_mark 33
  new_flows_len 0 old_flows_len 6
qdisc fq_codel 40: parent 1:4 limit 1000p flows 1024 quantum 1514 target 50.0ms interval 100.0ms 
 Sent 1383929 bytes 1645 pkt (dropped 0, overlimits 0 requeues 136) 
 backlog 0b 0p requeues 136 
  maxpacket 1514 drop_overlimit 0 new_flow_count 184 ecn_mark 0
  new_flows_len 0 old_flows_len 0
</pre>

doing TCP_MAERTS instead...
","",2012-07-12 16:42:28.007231,1
51,51,3,"h1. Server Information 

Most of the servers currently in operation are hosted by isc.org in their redwood city facility. ISC has a mechanism for [[coping with crashes]] using RT that you can use for outright server failure, however they are not capable of doing more than power cycling a machine. 

[[IP address assignment]]

h2. Physical Servers

h3. siwa.bufferbloat.net

Intended as a backup DNS and email server, this machine has been somewhat flaky (two crashes in 2 months) and we plan to retire it. 
Its primary purpose at present is to manage the [[mailing lists]].

h3. shipka.bufferbloat.net

This is currently the principal [[web and database server]] for our [[projects]]. 

h3. toutatis.teklibre.com

Functions as a mirror for mirrors.bufferbloat.net, and serves as a network monitoring console (rt and nagios) for various services.

It is also running the debris from teklibre itself and Dave Täht's own websites. 

h3. backup.bufferbloat.net

An atom box located at Jim Gettys house and available only via [[ipv6]].

h3. huchra.bufferbloat.net

The first in a series (we hope) of significantly more capable servers. It is an 8 core 2U machine, with mirrored drives. The primary intent of this server is to do builds of various OSes, but it needs to become stable first, which thus far, it hasn't.

h3. git.infradead.org

The debloat-testing kernel tree is hosted at git.infradead.org due to the kind contribution of David Woodhouse

I think it's in MIT's facilities.

h3. Virtual Servers

Some services are being hosted at github.com

h2. Server History

h3. In the beginning...

Dave Täht had the first two servers sitting in a box at ISC for nearly a year, relics of the [[bloat:wisp6]] project. When he was convinced of the severity of the problem (Jan 10), he pulled some strings, and got them up and running with the core services we needed to get off the ground by Feb 1. In that haste some fundamental help-me-sleep-better-at-night things like [[disaster planning]] were skipped.

They are very weak machines- pentium IIIs - which among other things have poor support for virtualization. 

We hope to start working more with virtualization with the advent of huchra, and the other things that need to be addressed can be seen on ticket #35. 

The servers are all configured by the [[bloat:Dogfood Principle]] - and amazingly, we've survived multiple slashdottings without a hitch. 

h3. OSes

All servers are running ubuntu 10.10. Why? It was what jg and dave taht had on our laptops. Whether this was a good choice or not remains to be seen. Certainly redhat would be more stable. 

h3. Naming scheme

All machines are named after asteroids. Given the quantity of asteroids available, we don't expect to run out of names any time soon.

(We hope to get an asteroid named after ""John Huchra"":http://en.wikipedia.org/wiki/John_Huchra , if there isn't one already)

h3. Security

All bufferbloat machines have [[ssh]] on port 222, rather than port 22. This cuts the script kiddie issues by 99.999% and is easily managed by those on the sysadmin team by adding a:

<pre>Host *.bufferbloat.net
     Port 222</pre>

to your ~/.ssh/ssh_config file

What firewalling exists is weak to non-existent, but there are very few routes into each machine, so it's easier to sleep at night. That can be improved, obviously. 

Aside from that password files are currently shared manually, and the passwords are distributed to only three people at present, according to the two man rule. We've tried to make it possible to divide work by having passwords on nearly every major subsystem distinct from the others.

/etc is managed via etckeeper (#3)

h3. IPv6 support

[[IPv6]] support is integral to the entire system. All systems are managed via IPv6. Some (internal) web sites can only be managed via IPv6.

h3. DNS

Principal [[DNS]] is currently provided by name.com, which ""features"" a bug in their NXDOMAIN lookup for ipv6 that results in invalid DNS lookups. (#25) To work around this, all servers actually are using teklibre.com as their domain in the resolver. In the future, we will re-take control of DNS and use ISC.org as secondary name service.

h2. Future infrastructure choices

... opening this up to debate ...

h3. Upcoming machines

huchra.bufferbloat.net is the primary machine we hope to get online in April.

h3. Virtual Servers

We hope to establish mirrors for openwrt based builds in various locations in the world, off of the virt.bufferbloat.net subdomain.

Moving towards a more virtual server architecture has many benefits but additional management and security overhead. One key thing to address early is to make sure we can get accurate time across whatever virtual solutions we chose.

h3. Test servers

h3. VOIP server

Due to the large number of people involved all over the world, and the difficulty in co-ordinating across 24 time zones, we hope to establish a good IPv6 server on the East coast somewhere that can also do voip conference calls and act as a central PBX for more folk.

","",2011-04-25 14:25:33.463379,15
218,218,3,"h1. Experiments

We have a set of useful experiments you can perform and analyze. See bug #289 for some of the scripts (for now)

and we'll get more info up here soon,","",2011-11-18 07:34:04.246566,1
323,323,107,"h1. Cake Technical Information

h2. Introduction

Cake is a _comprehensive queue management_ system, implemented as a _queue discipline_ (qdisc) for the Linux kernel.  It is designed to replace and improve upon the complex hierarchy of simple qdiscs presently required to effectively tackle the bufferbloat problem at the network edge.

For installation and configuration instructions, please see the main [[Cake]] page.

h2. Philosophy

Cake's fundamental design goal is _perceived simplicity_.  This is achieved by integrating lots of functionality into one qdisc, resulting in:

* Information sharing between functional components, improving latency performance.
* Eliminated message-passing overhead (improving throughput performance), and unmanaged queuing between qdiscs.
* Greatly simplified configuration for common use-cases, compared to building equivalent functionality using existing qdiscs.

Cake is logically arranged as several layers of functionality:

* Shaper
* Priority queue
* Flow isolation
* AQM
* Packet management

Each of the above layers is based on state-of-the-art techniques, many of which have improvements not previously realised.  These are briefly explained below.

Additionally, most calculations are now performed on a time basis, with the remainder on a bytes basis.  This is a fundamental improvement over many qdiscs which count only packets, which in practice vary greatly in size.

h2. Shaper

Cake's shaper is _not_ a ""token bucket filter (TBF)"":http://linux-ip.net/articles/Traffic-Control-HOWTO/classful-qdiscs.html.  It operates in _deficit mode_, which is essentially the opposite way to how a TBF works.

A major drawback of TBFs is that they require the bucket size to be configured explicitly.  This not only runs counter to Cake's goal of perceived simplicity, but limits latency performance in the typical Cake application, immediately upstream of a bottleneck link's dumb FIFO.  On flow startup, a TBF will dump the contents of its bucket into the FIFO immediately, so the rate of the TBF must be reduced significantly below the link rate in order to let the FIFO drain.  Meanwhile, latency suffers proportionally to the size of the bucket.

Cake instead schedules packets based on time deficits.  If no deficit exists when a packet is requested, it can be sent immediately.  The transmit time of the following packet is then calculated, and until that time the shaper is placed in deficit mode.  While in deficit mode, packets are scheduled using a watchdog timer whenever a request arrives too soon, and transmission times are calculated for a continuous packet train.  This continues until the queue drains; if a packet is requested, but none are available _and_ the next transmission time has been reached, the shaper returns to the quiescent state in which the next packet can be sent immediately.

Deficit mode makes the burst size dependent only on hardware and kernel latency (including timer resolution), and minimises bursts without requiring manual tuning.  Cake's shaper can therefore be set much closer to the actual link speed without jeopardising latency performance.  Modern hardware can achieve sub-millisecond bursts in most cases.

CPU efficiency is also improved by inverting the user's ""bytes per time"" setting into a ""time per byte"" measurement, so that the packet scheduling operation is essentially a multiply-accumulate rather than involving a division.  This is implemented using a manual floating-point representation (mantissa and shift) for maximum precision and dynamic range.  This contributes to improved throughput on low-end CPUs.

h2. Priority Queue

Diffserv is poorly specified, and not widely deployed outside environments where Highly Paid Consultants are available to set it up.  Cake's priority layer aims to improve that situation by making a basic yet robust Diffserv-based priority queue available with no end-user effort.  Hopefully, application support will follow.

Cake provides four traffic classes by default, nominally corresponding to the four classes provided by 802.11e and 801.2p.  However, the precise mapping between Diffserv codepoints (DSCPs) and traffic classes is different.  In increasing order of nominal priority:

* Bulk, with no bandwidth threshold
* Best Effort, with 15/16 bandwidth threshold
* Video, with 3/4 bandwidth threshold
* Voice, with 1/4 bandwidth threshold

Most traffic falls into the Best Effort class.  VoIP, NTP and gaming traffic should be directed to the Voice class, BitTorrent should be directed to the Bulk class, and the Video class is available for any bulk traffic that requires elevated priority.

Cake implements _soft admission control_, and so is robust against starvation attacks relying on strict priority, which would otherwise be easy to trigger by accident.  If a traffic class (including all traffic in higher classes than itself) exceeds its bandwidth threshold, it is demoted in priority until it falls below the threshold again.  Hence, if there is no competing traffic, any traffic class can use the full link bandwidth, but it is always possible for new traffic in a different class to start up.

The bandwidth threshold is tracked using the same algorithm as in the shaper, at bandwidths which are scaled from the shaper's overall bandwidth setting.  Packets are not actually delayed at this layer; the actual transmission time is merely checked against the deficit schedule.  Priority itself is implemented using a Weighted Deficit Round Robin scheme, with the weight of each class depending on whether its threshold is exceeded or not.

The progression of the bandwidth thresholds is roughly inverse to priority.  As with DRR++ (below), the assumption is that more latency-sensitive traffic generally requires less bandwidth, and that there is a fundamental tradeoff between priority and bandwidth which is required for network stability.  Enforcing that tradeoff in this manner should encourage applications to choose an appropriate DSCP for their traffic, rather than lazily applying the highest available priority for ""maximum"" performance.

h2. Flow Isolation

This was the original core of Cake, inheriting the basic design of ""fq_codel's"":https://tools.ietf.org/html/draft-ietf-aqm-fq-codel flow isolation scheme.  It consists of a hash function over the 5-tuple flow identifier to distribute packets to a large number of queues, and a scheme similar to ""DRR++"":http://www.researchgate.net/profile/Mike_MacGregor/publication/3867218_Deficits_for_bursty_latency-critical_flows_DRR/links/54a20b700cf256bf8baf7c61.pdf to choose which queue to service.  A separate set of queues and DRR++ state is provided for each traffic class.

Cake's DRR++ scheme uses two lists of active queues.  Newly active queues are placed in the ""new flow"" list, which is served with strict priority over the ""old flow"" list.  After servicing, queues are always placed in the ""old flow"" list.  Queues found to be empty on servicing are removed from the active lists.  This relatively simple scheme naturally prioritises ""sparse"" flows over ""bulk"" flows, on the assumption that latency-sensitive traffic is likely to be sparse.

A major enhancement in Cake over fq_codel is replacement of the plain hash function with an 8-way set-associative version.  Plain hashes are susceptible to the ""birthday problem"" in which the probability of hash collision reaches 50% when the table occupancy reaches the square root of the table size (32 flows for 1024 queues), assuming a high-quality hash; we have also found that the hash function fq_codel relies on is suboptimal.

In the set-associative hash, the set of queues is divided into _sets_ of 8 _ways_.  Ways are tagged with the flow identifier last assigned to them, allowing hash collisions to be detected and avoided if another way in the same set is available; either already tagged for the correct flow, or empty and inactive.  This is similar to the way set-associative caches in CPUs work.

h2. Active Queue Management

Cake uses a variant of the ""CoDel AQM"":https://tools.ietf.org/html/draft-ietf-aqm-codel, instantiated for each flow-isolation queue.  This arrangement is again inherited from fq_codel, but subsequently modified for improved performance.  The major changes to date are:

* The @count@ variable now saturates rather than wrapping, and thus handles overload conditions far better.  These are most likely seen with unresponsive and anti-responsive flows with a high packet rate.
* The @target@ and @interval@ parameters are auto-tuned based on the shaper bandwidth.  Target is never less than 1.5 MTUs' link occupancy, and Interval is never less than 8 times target.  This improves throughput on slow links (under 1Mbps), and has been tested successfully down to 64Kbps.  At higher bandwidths, @target@ defaults to 5ms and @interval@ to 100ms; these are also the defaults for standard CoDel.
* When the dropping state is rapidly left and re-entered, @count@ is halved rather than decremented.  This improves the long-term stability of the signalling frequency.
* Entering drop state now depends on how quickly the sojourn time is increasing.  This effectively gives @interval@ a 6:1 dynamic range around its nominal value, rather than a fixed value.  Hence response to TCP's rapid slow-start growth is sharpened and to slow congestion-avoidance growth is dulled.
* CoDel can now be instructed to ignore ECN capability by the packet-management layer, in case of an out-of-control queue length; it will then drop instead of marking, and mark the following packet instead (if it is ECN capable).  This improves robustness against maliciously unresponsive flows and ECN washing.

h2. Packet Management

In addition to the four major layers, there are a number of miscellaneous functions which are grouped here for convenience:

* Maximum queue length in bytes (not packets) is dynamically calculated based on shaper bandwidth.
* Queue overflow is handled by dropping from the head of the longest queue.  The active queue lists are used to optimise search time.
* Downstream packet encapsulation can be accounted for, both as a constant overhead and as ATM cell quantisation.
* GRO/GSO aggregates are peeled into individual MTU-sized packets when appropriate.  This greatly improves flow isolation on Ethernet hardware with excessively aggressive aggregation.

h2. Configuration

Sensible defaults are provided for every aspect of Cake's configuration.  There are no mandatory parameters.  All parameters can be specified using a single 'tc' invocation, and most parameters can be updated without losing packets using tc's ""change"" command.

In many cases, it is only necessary to set Cake's ""bandwidth"" parameter, which sets up the shaper layer and performs auto-tuning in several other places.  If omitted, the shaper is set to infinite bandwidth (zero time per byte) and thus effectively disabled.  This can be made explicit by specifying the ""unlimited"" keyword instead.

The priority-queue layer is configured using the ""besteffort"" (disables it), ""precedence"" (legacy mode, 8 classes), ""diffserv8"" and ""diffserv4"" keywords.  The default, described above, is ""diffserv4"".

The flow-isolation layer is configured using ""flowblind"" (disables it), ""hosts"" (ignores protocol and port fields), ""dsthost"" (uses only destination address), ""srchost"" (analogous), and ""flows"" (default, uses entire 5-tuple).

The AQM layer has no configuration options.  However, it is planned to add simple tuning options for different prevailing RTTs that may be significantly different from the Internet-scale 100ms currently assumed.  Satellite links tend to impose longer RTTs, and enclosed LANs tend to have much shorter RTTs.

Encapsulation compensation has a rich set of shortcut keywords, corresponding to typical ADSL and VDSL configurations and straightforward variants thereof.  The ""overhead"" parameter and ATM compensation flag (""atm"" vs. ""noatm"") can also be specified directly.  Overhead compensation is turned off completely with the ""raw"" keyword, and the ""conservative"" keyword sets up a quick-fix, with ATM cells and a full cell of overhead, for where the actual overhead is uncertain.

h2. Statistics

Cake produces a rich set of statistics detailing the performance of the various algorithms, and this can also be used to infer information about the traffic passing through it.  Simply run @tc -s qdisc@.

As of the 'fishcake' release, the statistics for each traffic class are:

* *rate* - the priority layer's threshold bandwidth.
* *target* and *interval* - the AQM layer's tuned parameters.
* *Pk/Av/Sp delay* - the peak, average and sparse-flow delays experienced by recent packets.  These are tracked using ""biased EWMAs"":https://en.wikipedia.org/wiki/Peak_programme_meter.
* *pkts* - the total number of packets sent.
* *way inds/miss/cols* - the set-associative hash reports 'indirect hits', 'misses' and 'collisions' whenever it needs to search the set.  All other packets are 'direct hits' and are not directly counted.
* *bytes* - total bytes sent.
* *drops* and *marks* - number of packets dropped (by AQM or queue overflow) and ECN-marked (by AQM).

Additional statistics are planned in the near future, which will require enlarging the stats struct and breaking compatibility with existing versions of userspace code (tc).
","",2015-08-17 13:44:40.250387,6
15,15,3,"h1. Good blog discussions

* [[Jim Gettys]] Original series on BufferBloat
	""First puzzle piece"":http://gettys.wordpress.com/2010/10/02/first-puzzle-piece/
	""Browsers and TCP revisited"":http://gettys.wordpress.com/2010/10/13/browsers-and-tcp-revisited/
	""Home Router Puzzle Piece One—Fun with your switch"":http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/
	""Home Router Puzzle Piece Two—Fun with wireless"":http://gettys.wordpress.com/2010/12/02/home-router-puzzle-piece-two-fun-with-wireless/
	""The criminal mastermind: bufferbloat!"":http://gettys.wordpress.com/2010/12/03/introducing-the-criminal-mastermind-bufferbloat/
	""Whose house is of glass, must not throw stones at another"":http://gettys.wordpress.com/2010/12/06/whose-house-is-of-glasse-must-not-throw-stones-at-another/
	""Bufferbloat and network neutrality—back to the past"":http://gettys.wordpress.com/2010/12/07/bufferbloat-and-network-neutrality-back-to-the-past/
	""Mitigations versus Solutions of Bufferbloat in Broadband"":http://gettys.wordpress.com/2010/12/08/bufferbloat-mitigations/
	""Bufferbloat and congestion collapse—Back to the Future?"":http://gettys.wordpress.com/2010/12/09/bufferbloat-and-congestion-collapse-back-to-the-future/
	""Mitigations and Solutions of Bufferbloat in Home Routers and Operating Systems"":http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/
	""RED in a Different Light"":http://gettys.wordpress.com/2010/12/17/red-in-a-different-light/
	""Bufferbloat in 802.11 and 3G Networks"":http://gettys.wordpress.com/2011/01/03/aggregate-bufferbloat-802-11-and-3g-networks/
* Discussions
        ""LWN"":
        ""LWN"":
        ""Slashdot"":
        ""Ycombinator"":http://news.ycombinator.com/item?id=2002992
        ""Buffer Bloat - The calculation"":http://netoptimizer.blogspot.com/2010/12/buffer-bloat-calculations.html
        ""Did Bufferbloat Kill my Internet Radio?"":http://nex-6.taht.net/posts/Did_Bufferbloat_Kill_My_Net_Radio/
	""Cringley: 2011 predictions: One word—bufferbloat.  Or is that two words?"":http://www.cringely.com/2011/01/2011-predictions-one-word-bufferbloat-or-is-that-two-words/
        ""It's hard to break a program when the network keeps breaking"":http://boston.conman.org/2011/01/04.1
        ""Sometimes Losing Something Is A Good Thing"":http://digital-rag.com/article.php/Buffer-Bloat-Packet-Loss
","",2011-02-06 17:32:40.250254,8
133,133,3,"h1. Machines

h2. Main machines

{{include(jupiter)}}
{{include(metis)}}
{{include(callisto)}}

h2. Client machines

{{include(aitne)}}","",2011-05-28 23:09:53.562138,3
151,151,3,"h1. RFC: Improving DSCP support in Linux

{{include(Diffserv Linux Improvement Overview)}}

# [[Basic Diffserv Improvements to Linux]]
# [[More advanced Diffserv support in Linux]]
# [[Radical Diffserv improvements]]
# [[Save_the_Mice|Stop shooting system control packets]]!
# [[Analysis of existing firewalls and shapers]]

You can also see these suggestions as [[Diffserv_RFC|one big web page]].

This is very much a WIP and may at some point evolve into a more formal RFC and actual code.


","",2011-06-22 13:31:07.125358,7
24,24,3,"h1. Notable Quotes

{{>toc}}

(Starring in alphabetical order)

h2. ""Vint Cerf"":http://en.wikipedia.org/wiki/Vint_Cerf 

bq. ??“Bufferbloat is a huge problem. The only way we're going to fix this problem is to get the people making the devices that have these large scale buffers in them to artificially reduce their size. The problem is a feedback loop - it takes too long to discover that there is a problem because we allow everything to fill up the buffers. Because memory got cheap, people stuff buffers in because they thought it would help... and in fact at some point it doesn't. I hope that Gettys and others are able to persuade people that they really need to re-engineer systems to not have more memory than is absolutely necessary. [elided] How many bad things have happened and somebody said 'I was only trying to help?'.”?? 
-- from his ""keynote speech at the 2011 Linux Users Conference"":http://a9.video2.blip.tv/9350007685272/Linuxconfau-KeynoteVintonGCerf483.ogv

h2. ""Denton Gentry"":http://codingrelic.geekhold.com/2011/03/random-early-mea-culpa.html

bq. ??“Our biggest mistake was in making queue management optional, and making it *scary*.”??

h2. ""Van Jacobson"":http://en.wikipedia.org/wiki/Van_Jacobson

bq. ??“Something else that has impeded progress here—all that R&D aimed at maximizing the bandwidth between supercomputer centers. Remember that most of the network research in the U.S. has been funded so far by the NSF (National Science Foundation) with the goal of demonstrating very high bandwidth between academic institutions. This is great for the .01 percent of the Internet community that has those links available to them, but it doesn't do much good for the billion other people in the world who have 2-megabit or less. We've put a lot of effort into protocol, router, and algorithm development that makes it possible for a single TCP to saturate a 40-gigabit link, but we haven't put anything even remotely like that effort into producing usable cellphone data links, DSL links, or home-cable links. That's where the really hard problem is because it requires that you start to think about how the buffering actually works and how it turns into latency.”??

h2. ""Paul Jenkins"":http://www.pauljenkinstech.info/2011/01/12/bufferbloat-an-invisible-menace-that-is-slowing-down-the-internet/

bq. “Without this being resolved, Internet phones are dead in the long run as more people are jamming up the Internet with Roku, Hulu and Netflix – streaming video Internet no doubt exasperating the present problem. And gamers, who are willing to spend heavily to win, may give up if their Internet connection makes it impossible to win. ”

h2. ""Rob Landley"":http://landley.livejournal.com/43985.html

bq. “The end result [of bufferbloat] is crazy bursts of throughput and multisecond latency spikes.”

h2. ""Kathleen Nichols"":http://www.pollere.net/about.html

bq. “Most traffic control mechanisms do not work the way people think they work. Intuition fails us.”

h2. ""Eric Raymond"":http://en.wikipedia.org/wiki/Eric_S._Raymond 

bq. ??“Wow. This is *not complicated*. How did we miss this for so long?""??

h2. ""Dave Täht"":http://www.taht.net 

bq. ??“After going off this cliff, we need to replace the wheels and engine, and strap on wings before we hit bottom.”??

h2. ""Linus Torvalds"":http://lkml.indiana.edu/hypermail/linux/kernel/0904.0/02094.html

bq. ??“Latency is more important than throughput. It's that simple.”??

h2. ""Nick Weaver"":http://www.icsi.berkeley.edu/~nweaver/

bq. ??“When testing for this particular problem, the *outliers* actually prove to be the good networks.”??
","",2012-04-27 18:24:15.562148,21
144,144,49,"h1. Capetown flashing instructions

# Download the release:
http://mirrors.projectbismark.net/downloads/beta/openwrt-ar71xx-generic-wndr3700v2-jffs2-factory.img
# Follow the flashing instructions  
* [[Flashing instruction for Linux|Linux]]
* [[Flashing instruction for Mac|Mac]]
","",2011-07-18 15:29:00.697336,3
239,239,213,"h1. OCEAN CITY old News item - rc6 (beta 2) is suitable for beta testing

*Summary:* rc6 (beta 2) is suitable for beta testing. Originally published on 19 Sep 2011.

h1. About CeroWrt

CeroWrt is a project built using OpenWrt to resolve endemic problems in home networking today, and to push the state of the art of edge networks and routers forward. Projects include proper IPv6 support, tighter integration with DNSSEC, wireless mesh networking, among others, notably reducing bufferbloat in both the wired and wireless components of the stack.

h1. CeroWrt's Goals

CeroWrt is a build of the OpenWrt routing platform intended for use by individuals, network engineers, researchers, teachers, and students interested in advancing the state of the art on the Internet, and in particular, those investigating the problems of latency under load, bufferbloat, wireless-n, and the inter-relationships between various TCP & QoS algorithms.

It comes with many network test tools installed and available via optional packages for network diagnosis and testing - notably netperf, iperf, nuttcp, httping, bing, fping, and others. Doing the network testing on the router itself eliminates the variables introduced by random clients, and makes possible independent analysis of local wired, local wireless, and performance of both over the LFN.

6 TCP algorithms are included - TCP Westwood+ is the default. Many AQM algorithms are included - of note, SFB, and DRR.
 
CeroWrt breaks with home router conventions in several ways. CeroWrt comes with a high performance integral web server with which you can establish local web services and provide web content and services 24x7.

IPv6 (6to4) is enabled *by default*.

With IPv6, first class name services become a necessity rather than a ""nice to have"" . Manual configuration of name services with IPv4 and IPv6 literal addresses is no longer feasible by most people, if indeed it ever was. Toward the goal of ""plug and play"" home environment able to publish IPv6 addresses into the global Internet name space without manual configuration, CeroWrt includes the Bind name server. Security in the home environment is also a goal, ergo CeroWrt's support for DNSSEC using ISC Bind in a chrooted jail.

A core goal for CeroWrt is to provide a well understood platform, where contributors can perform tests with confidence that their results can be duplicated by others.

CeroWrt is the base on which other specialised builds may be built in the future. The default build is too big (~9MB) to be compatible with more commonly available routers.

There are other features all intended to help make insight into networking problems easier. In particular, bufferbloat, wherever we could find it, has been reduced, but not yet eliminated entirely; that requires the research in AQM and buffer management for which CeroWrt is intended.

The current draft of the web pages on the router can often be seen at: http://jupiter.lab.bufferbloat.net/, running on a CeroWrt router, of course.

h1. Interesting features of this release:

Ocean City Release includes:

* Extensive debloating
* major surgery on the ath9k (wireless driver) vastly improving its aggregation and buffering behavior. Our thanks to Andrew McGregor and Felix Fietkau for this great work
* ISC Bind 9 with DNSSEC, running in a chroot jail
* Numerous debugging and diagnostic tools
* ECN is enabled
* Multiple TCP algorithms (Cubic, Bic, Westwood+, Vegas)
* Multiple traffic shapers (now including DRR and SFB)
* Simulations are possible of packet loss and delay by using NETEM
* Native, 6to4, and 6in4 IPv6 support
* Mesh routing (babel 1.2)
* The polipo web proxy
* Local lighttpd Web Server
* Rsync
* netperf is installed by default
* Bridging different radios and ethernet has become very problematic, particularly in the face of multicast traffic and radically different wireless bandwidth. CeroWrt routes all networks rather than bridges
* Many additional packages are not installed by default, but are available in the CeroWrt package repository. These include nuttcp, iperf, httping, bing, dibbler, and many others.

While we have tried very hard to produce a usable web interface for the normal use of CeroWrt as your primary Internet router (and do desire you use it as such and give us feedback!), some things, such as configuration of the web proxy, or alternate TCP algorithms can require non-GUI editing via SSH.

As this is a research and development platform, there will be no long term support for this release and future RCs will likely require a complete reflashing and reconfiguration of your router. We apologize for the inconvenience but the state of the art and the problems we are trying to solve are rapidly moving targets that we must track closely. We will feed back the results of this work into stable distributions.

h1. The Beta 2 ""Ocean City"" release (RC6)

CeroWrt is aimed at (currently) a single hardware platform for which fully open drivers are available: the Netgear WNDR3700v2, a current 802.11abgn router using the Atheros AR7161 rev 2 with gigabit Ethernet ports. CeroWrt runs on the WNDR3700v2 only as it requires more than 8Mbytes of flash. Note that there may still be WNDR3700v1's in the retail channel. Information on distinguishing them can be found in the bufferbloat wiki at http://www.bufferbloat.net/projects/bismark/wiki/Wndr3700v2

The Ocean City release is based on Linux 3.0.4; the DNS server is ISC Bind 9.8.1 running from xinetd and in a chroot jail.

Systematic testing of this software has begun and the performance of the router is at this date unknown relative to other firmware.

Release candidate RC6 firmware can be downloaded from:

http://huchra.bufferbloat.net/~cero1/cerowrt-wndr3700-1.0rc6/

Installation directions can be found at:
http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_INSTALLATION_GUIDE

Release notes are at:
http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_RELEASE_NOTES

FAQs are at: 
http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_FAQ

IRC discussions on CeroWrt take place at irc.freenode.net: #bufferbloat
IRC discussions on OpenWrt in general take place on:irc.freenode.net: #openwrt

The roadmap for rc7 can be found at: http://www.bufferbloat.net/projects/cerowrt/roadmap

Mailing lists:

General discussion about CeroWrt takes place on the bloat-devel list found at:
    https://lists.bufferbloat.net/listinfo/bloat-devel

General bufferbloat discussions can be found at:
    https://lists.bufferbloat.net/listinfo/bloat

Thanks for giving CeroWrt a try!

The network you save may be your own.","",2012-03-17 09:19:24.012084,1
240,240,213,"h1. OCEAN CITY old News Item - rc7 slipping

*Summary:* rc6 testing is going well, kernel.org is down and dave needs a vacation, so rc7 is going to slip a few weeks. Details of the rc7 plan below. [Original News item posted 24Sep2011; moved to the Wiki 17Mar2012]

As the kernel development process has slowed due the ongoing recovery
from the kernel.org, bottlenecking changes to cerowrt and
debloat-testing... and I can't offer anything but empathy to those at
kernel.org getting things back online....

... and I just arrived in Paris to work out of the lincs.fr lab there
for the winter, where I hope to be doing some deep analysis of the
data collected so far, and working on the harder algorithmic and
theoretical problems...

Now seems like the perfect time to finally take some vacation.

so (sept 30-oct 10) I will be taking some serious time off in Paris
and Giverny to recharge my batteries, and also find a place near the
lab to live, and get integrated with matters here...

So, I've slipped cerowrt's dates back a couple weeks. Some pruning of
the current list is in order if we are ever to get something
distributable.

Cerowrt-1.0-rc6 is proving stable, however during that process we've
found a few major issues that are on the roadmap to fix in rc7. At the
kernel level, many are trivial (yet important - see bugs 266,265)
fixes that should automagically arrive after the Linux development
process gets back closer to normal. We're now struggling mostly with
issues higher on the stack (see bugs 277, 113, 268, etc), and an
onslought of new packages and feature requests from various parties
(274, 279) - all of which are too much, combined, to deal with, in my
exhausted, jetlagged state.

http://www.bufferbloat.net/projects/cerowrt/roadmap

All: Please feel free to add features, bugs, and suggestions to the
rc7 release and rc7 release plan after reviewing the RC6 release
notes.

http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_RELEASE_NOTES

All: Also feel free to jump in and fix some of this stuff - much of it
now is in mainline code, not openwrt or kernel code. Example: bug 224
is so simple yet crosses so many boundries as to make my head spin -
and it's all over a SINGLE BIT. The right answer is patches to glib
and uclibc, or so I think. Another simple set of patches is fixing
dscp marking under ipv6 for things like openssh.... a great mystery
regarding TOS setting under IPv6 has been resolved in bug 249...

http://www.bufferbloat.net/issues/249

And do keep testing RC6! Downloads available at:
http://huchra.bufferbloat.net/~cero1/

My efforts this coming week will be in getting bloatlab #1 up and
fully operational. Preliminary documentaion on that lab is at:

http://www.bufferbloat.net/projects/cerowrt/wiki/BloatLab_1

and iperf and netperf servers are enabled on jupiter and io.

I'm very happy with how far we have come with the bufferbloat effort
in the 9 months since the inception of bufferbloat.net - in particular
the recent lwn.net article (which will be available to non-subscribers
soon) and the responses to it were heartwarming as to how much people
'got' what we have been trying describe, diagnose, and fix.

And I'm really glad everyone has been so helpful, and also really glad
to finally be planning a little time away from the bloat.
","",2012-03-17 09:20:46.285618,1
203,203,3,"h1. Using the CeroWrt test tools

http://www.wcisd.hpc.mil/nuttcp/Nuttcp-HOWTO.html
","",2011-08-30 13:34:57.188881,1
57,57,3,"h1. Password Management

Presently all passwords to all systems are distributed to two people (jg and dtaht) and kept in their respective password databases. One other individual (Richard Pitt) has access to the core servers in event of disaster via ssh key. We intend to hold these passwords tightly until various folk prove themselves and limit access to specific services without root access wherever possible. 

h2. SSH keys

h2. SSL keys

h2. Password database unification

h2. Virtualized servers

h2. IPsec infrastructure



","",2011-03-19 10:46:35.296006,1
74,74,3,"h1. Huchra

http://en.wikipedia.org/wiki/John_Huchra

!http://en.wikipedia.org/wiki/File:Huchra%27s_Lens.jpg!

Since the lensing effect is results in 4 stars, and this is a quad core box...","",2011-03-21 22:14:37.830577,4
56,56,3,"h1. Ipv6 Support

At one level using IPv6 to the extent we are doing so is a mistake. Finding IPv6 enabled co-location facilities is turning out to be a larger problem than dreamed. On the other hand, it does supply a near-infinite number of IPs to use for specialized services, allows us to apply the [[bloat:Dogfood Principle]] to all sorts of testing, and hopefully will lead to the use of more IPv6 throughout our userbase.

There are AAAA and A records for all servers. Some (backup, admin) only have IPv6 addresses.

{{include(bloat:Ipv6)}}","",2011-03-20 07:56:39.866907,3
61,61,3,"h1. Projects hosted by bufferbloat.net

In addition to the main [[Bloat:Wiki|Bufferbloat]] Project, there are several others, public, private, and pending that we are starting up.

The [[bismark:wiki|bismark]] Project is an extension of the pre-existing data collection exercise of GAtech. Because of needing to keep certain kinds of data private, this project is run by bismark-admins@lists.bufferbloat.net.

The (tenatively named) [[uberwrt:wiki|uberwrt]] project is intended to co-ordinate work around the openwrt distribution for several different kinds of hardware. Work from here flows into [[Bloat:Wiki|Bufferbloat]] , [[bismark:wiki|bismark]], and ""openwrt"":http://www.openwrt.org. It will become open after being announced (and hopefully), to some extent, funded.

There will undoubtedly be other projects at some point or another, as we hope to draw more people into tackling various aspects of the bufferbloat problem. Notably fixing shapers in the field seems to be very important.

Core drivers of subproject creation basically involve:

* Sufficient interest in managing the project with bufferbloat.net resources

* Enough people

* A need for a separate git tree of some kind

* Public/Private participation

* Etc.

See also the [[mailing lists]] for more details.","",2011-03-19 19:10:48.46042,7
52,52,3,"h1. Mailing lists and aliases

There are more mailing lists on bufferbloat.net that immediately appear. Some are not in use and may be discontinued or subverted.
There will probably be other mailing lists added for commits and for other projects as they arise.

Early on we made the decision to not use web forums, and also gateway to [[netnews]], given the highly technical userbase we wished to attract.

h2. Public Mailing lists

""bloat"":https://lists.bufferbloat.net/listinfo/bloat General purpose mailing list
""bloat-devel"":https://lists.bufferbloat.net/listinfo/bloat-devel code related discussions
""bloat-biz"":https://lists.bufferbloat.net/listinfo/bloat-biz marketing and business development related discussions
""sysmom"":https://lists.bufferbloat.net/listinfo/sysmom discussions of bufferbloat.net specific project planning issues

h2. Private

* The Bismark project

""bismark-users"":https://lists.bufferbloat.net/listinfo/bismark-users
""bismark-devel"":https://lists.bufferbloat.net/listinfo/bismark-devel

* Theory

""theory"":https://lists.bufferbloat.net/listinfo/theory Intended as a high-end background discussion for pre-publication and sensitive work, this is not currently in use.

* Advocacy

""advocacy"":https://lists.bufferbloat.net/listinfo/advocacy

* Chatter

""chatter"":https://lists.bufferbloat.net/listinfo/chatter Intended at some point to be a discussion zone for pre-publication materials, and a ""writers cabal"". Also unused. 

h2. Aliases

Multiple services are managed by conventional email aliases and gateways to/from the redmine system.

support: ""|/home/redmine/bin/support""
sysadmin: ""|/home/redmine/bin/sysadmin""
bb: ""|/home/redmine/bin/bb""
security: ""|/home/redmine/bin/security""
","",2011-03-19 19:17:59.897533,2
73,73,3,"h1. Virtual Servers

All servers are named of the form: name.virt.bufferbloat.net. All are (at present) located on [[huchra]]. Most will only be available via the web and ssh via IPv6. I will probably use names rather than numbers in the future.

Please note that these are blocked by several other bugs/features #35 #36 #32 #29 and especially #25 right now

To connect to the console:

virt-viewer --connect qemu+ssh://YOUR_LOGIN@huchra.bufferbloat.net:222/system vmNUMBER

|vm|Server|OS|Bits|CPUS|Purpose|
|noc|noc|ubuntu 10.10|64|2|Site management|
|11|""debian64"":ssh://debian64.virt.bufferbloat.net|squeeze|64|2|Kernel Builds|
|12|uberwrt|ubuntu 10.10|64|8|Building openwrt and [[uberwrt:Wiki|Uberwrt]]|
|13|badluck|||
|14||||
|15||||
|16||||
|17|arch32|arch|32|2|Kernel Builds|
|18|arch64|arch|64|2|Kernel Builds|

== not installed yet ==

|19|centos32|centos 5.5|32|1|Kernel Builds|
|20|freebsd|||||

== Random Notes

https://help.ubuntu.com/community/KVM/Managing 

http://www.howtoforge.com/kvm-guest-management-with-virt-manager-on-ubuntu-8.10

http://www.bytemark.co.uk/index


","",2011-03-22 06:47:50.544215,5
105,105,3,"h1. Features

* ISC bind9 (latest version)
** DNSSEC support
** Local Subdomain support
** Dynamic DNS support
* ISC DHCPD (latest version)
* IPv6 support
* Native webserver ([[lighttpd]])
* DAAP support
* [[QoS]]
* Python

* Public and Private wireless interfaces","",2011-05-02 06:54:56.556178,3
71,71,59,"h1. Australian IPV6 RTTs

Submitted by Kim/adhoc from University of Adelaide. No native IPv6 here at UoA, so the following are run from this Desktop over a sit tunnel to the AARNET tunnel broker...
 TSP_CLIENT_ADDRESS_IPV4=129.127.x.y
 TSP_CLIENT_ADDRESS_IPV6=2001:0388:f000:0000:0000:0000:0000:1455
 TSP_SERVER_ADDRESS_IPV4=202.158.196.131
 TSP_SERVER_ADDRESS_IPV6=2001:0388:f000:0000:0000:0000:0000:1454


h2. tracepath6, traceroute6 & ping6 to the following hosts;
# shipka.bufferbloat.net
# backup.bufferbloat.net
# ipv6.gatech.edu
# mirror.ipv6.internode.on.net


$ tracepath6 shipka.bufferbloat.net
 1?: [LOCALHOST]                        0.024ms pmtu 1280
 1:  2001:388:f000::1454                                  27.192ms 
 1:  2001:388:f000::1454                                  23.991ms 
 2:  2001:388:1:5001::1                                   24.542ms asymm  3 
 3:  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au        24.515ms 
 4:  6453.syd.equinix.com                                 24.671ms 
 5:  2405:2000:ffb0::1                                    93.462ms 
 6:  POS12-1-1.core1.TV2-Tokyo.ipv6.as6453.net           125.158ms 
 7:  no reply
 8:  2001:5a0:1200::35                                   228.456ms asymm  7 
 9:  2001:5a0:1200::a                                    208.697ms asymm  4 
10:  int-0-0-1-0.r2.sql1.isc.org                         223.135ms asymm  5 
11:  each2.isc.org                                       206.149ms reached
     Resume: pmtu 1280 hops 11 back 59 

$ traceroute6 shipka.bufferbloat.net
traceroute to shipka.bufferbloat.net (2001:4f8:3:36::52), 30 hops max, 80 byte packets
 1  2001:388:f000::1454 (2001:388:f000::1454)  24.334 ms  24.313 ms  25.083 ms
 2  2001:388:1:5001::1 (2001:388:1:5001::1)  26.694 ms  26.685 ms  26.669 ms
 3  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au (2001:388:1:d:222:90ff:fe5f:2740)  26.967 ms  26.955 ms  27.185 ms
 4  6453.syd.equinix.com (2001:de8:6::6453:1)  26.909 ms * *
 5  2405:2000:ffb0::1 (2405:2000:ffb0::1)  105.621 ms * *
 6  POS12-1-1.core1.TV2-Tokyo.ipv6.as6453.net (2001:5a0:2200::3d)  145.881 ms  135.655 ms  136.232 ms
 7  if-15-0-0.804.core2.S9R-Singapore.ipv6.as6453.net (2001:5a0:2200::12)  247.915 ms  248.133 ms  248.105 ms
 8  2001:5a0:1200::35 (2001:5a0:1200::35)  246.706 ms 2001:5a0:1200::31 (2001:5a0:1200::31)  247.808 ms  246.678 ms
 9  2001:5a0:1200::a (2001:5a0:1200::a)  228.879 ms  229.121 ms  229.068 ms
10  int-0-0-1-0.r2.sql1.isc.org (2001:4f8:1b:1::8:2)  228.777 ms  208.276 ms  207.700 ms
11  each2.isc.org (2001:4f8:3:36::52)  205.339 ms  204.509 ms  205.336 ms

$ ping6 -c 8  shipka.bufferbloat.net
PING shipka.bufferbloat.net(each2.isc.org) 56 data bytes
64 bytes from each2.isc.org: icmp_seq=1 ttl=59 time=205 ms
64 bytes from each2.isc.org: icmp_seq=2 ttl=59 time=206 ms
64 bytes from each2.isc.org: icmp_seq=3 ttl=59 time=209 ms
64 bytes from each2.isc.org: icmp_seq=4 ttl=59 time=205 ms
64 bytes from each2.isc.org: icmp_seq=5 ttl=59 time=222 ms
64 bytes from each2.isc.org: icmp_seq=6 ttl=59 time=205 ms
64 bytes from each2.isc.org: icmp_seq=7 ttl=59 time=205 ms
64 bytes from each2.isc.org: icmp_seq=8 ttl=59 time=206 ms

--- shipka.bufferbloat.net ping statistics ---
8 packets transmitted, 8 received, 0% packet loss, time 7008ms
rtt min/avg/max/mdev = 205.427/208.363/222.304/5.394 ms


$ tracepath6 backup.bufferbloat.net
 1?: [LOCALHOST]                        0.033ms pmtu 1280
 1:  2001:388:f000::1454                                  48.350ms 
 1:  2001:388:f000::1454                                  24.933ms 
 2:  2001:388:1:5001::1                                   25.955ms asymm  3 
 3:  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au        24.734ms 
 4:  6453.syd.equinix.com                                 24.606ms 
 5:  2405:2000:ffb0::1                                    93.569ms 
 6:  POS12-1-1.core1.TV2-Tokyo.ipv6.as6453.net           125.264ms 
 7:  no reply
 8:  no reply
 9:  2001:5a0:1200:300::16                               323.722ms asymm 18 
10:  pos-1-14-0-0-cr01.sanjose.ca.ibone.comcast.net      341.039ms asymm 17 
11:  pos-0-14-0-0-cr01.denver.co.ibone.comcast.net       335.282ms asymm 16 
12:  no reply
13:  no reply
14:  no reply
15:  2001:558:d0:1e::2                                   322.806ms asymm 20 
16:  2001:55c:62e5:6320::1                               384.061ms asymm 18 
17:  2001:55c:62e5:6320:92fb:a6ff:fe85:d16c              366.462ms reached
     Resume: pmtu 1280 hops 17 back 46 

$ traceroute6 backup.bufferbloat.net
traceroute to backup.bufferbloat.net (2001:55c:62e5:6320:92fb:a6ff:fe85:d16c), 30 hops max, 80 byte packets
 1  2001:388:f000::1454 (2001:388:f000::1454)  23.269 ms  23.242 ms  23.225 ms
 2  2001:388:1:5001::1 (2001:388:1:5001::1)  23.637 ms  23.996 ms  23.985 ms
 3  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au (2001:388:1:d:222:90ff:fe5f:2740)  24.617 ms  24.608 ms  24.593 ms
 4  6453.syd.equinix.com (2001:de8:6::6453:1)  24.569 ms * *
 5  2405:2000:ffb0::1 (2405:2000:ffb0::1)  93.629 ms * *
 6  POS12-1-1.core1.TV2-Tokyo.ipv6.as6453.net (2001:5a0:2200::3d)  124.894 ms  123.130 ms  123.112 ms
 7  2001:5a0:1200:400::9 (2001:5a0:1200:400::9)  230.289 ms  229.382 ms  229.363 ms
 8  2001:5a0:1200:300::1 (2001:5a0:1200:300::1)  231.878 ms  229.175 ms  230.468 ms
 9  2001:5a0:1200:300::1a (2001:5a0:1200:300::1a)  321.465 ms 2001:5a0:1200:300::16 (2001:5a0:1200:300::16)  320.275 ms  321.427 ms
10  pos-1-14-0-0-cr01.sanjose.ca.ibone.comcast.net (2001:558:0:f5c0::1)  322.872 ms  323.593 ms  320.804 ms
11  pos-0-14-0-0-cr01.denver.co.ibone.comcast.net (2001:558:0:f560::1)  320.336 ms  320.218 ms  319.952 ms
12  2001:558:0:f6c2::2 (2001:558:0:f6c2::2)  321.518 ms  322.593 ms  321.540 ms
13  2001:558:d0:12::1 (2001:558:d0:12::1)  321.642 ms  321.162 ms  321.493 ms
14  2001:558:d0:b::2 (2001:558:d0:b::2)  323.298 ms  324.036 ms  323.258 ms
15  2001:558:d0:1e::2 (2001:558:d0:1e::2)  321.672 ms  323.016 ms  321.477 ms
16  2001:55c:62e5:6320::1 (2001:55c:62e5:6320::1)  339.260 ms  338.168 ms  333.946 ms
17  2001:55c:62e5:6320:92fb:a6ff:fe85:d16c (2001:55c:62e5:6320:92fb:a6ff:fe85:d16c)  334.690 ms  337.048 ms  333.674 ms

$ ping6 -c 8 backup.bufferbloat.net
PING backup.bufferbloat.net(2001:55c:62e5:6320:92fb:a6ff:fe85:d16c) 56 data bytes
From 2001:558:d0:1e::2 icmp_seq=1 Destination unreachable: Address unreachable
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=2 ttl=46 time=336 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=3 ttl=46 time=346 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=4 ttl=46 time=333 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=5 ttl=46 time=337 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=6 ttl=46 time=388 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=7 ttl=46 time=339 ms
64 bytes from 2001:55c:62e5:6320:92fb:a6ff:fe85:d16c: icmp_seq=8 ttl=46 time=344 ms

--- backup.bufferbloat.net ping statistics ---
8 packets transmitted, 7 received, +1 errors, 12% packet loss, time 7009ms
rtt min/avg/max/mdev = 333.913/346.926/388.599/17.534 ms


$ tracepath6 ipv6.gatech.edu
 1?: [LOCALHOST]                        0.034ms pmtu 1280
 1:  2001:388:f000::1454                                  24.270ms 
 1:  2001:388:f000::1454                                  23.696ms 
 2:  2001:388:1:5001::1                                   24.297ms asymm  3 
 3:  so-0-1-0.bb1.a.hnl.aarnet.net.au                    117.870ms asymm  4 
 4:  so-0-1-0.bb1.a.sea.aarnet.net.au                    171.120ms asymm  5 
 5:  abilene-1-is-jmb-776.lsanca.pacificwave.net         194.801ms asymm  6 
 6:  2001:468:ff:305::1                                  268.725ms asymm  7 
 7:  xe-2-3-0.0.rtr.atla.net.internet2.edu               245.626ms asymm  9 
 8:  2001:468:ff:e43::2                                  245.984ms asymm 10 
 9:  2610:148:fe00:c::2                                  246.676ms asymm 11 
10:  no reply
11:  no reply
12:  no reply
13:  no reply
14:  no reply
15:  no reply
16:  no reply
17:  no reply
18:  no reply
19:  no reply
20:  no reply
21:  no reply
22:  no reply
23:  no reply
24:  no reply
25:  no reply
26:  no reply
27:  no reply
28:  no reply
29:  no reply
30:  no reply
31:  no reply
     Too many hops: pmtu 1280
     Resume: pmtu 1280 

$ traceroute6 ipv6.gatech.edu
traceroute to ipv6.gatech.edu (2610:148:fd8f:d7fc:203:baff:fe8f:29d), 30 hops max, 80 byte packets
 1  2001:388:f000::1454 (2001:388:f000::1454)  24.464 ms  24.435 ms  24.413 ms
 2  2001:388:1:5001::1 (2001:388:1:5001::1)  25.081 ms  25.315 ms  25.288 ms
 3  so-0-1-0.bb1.a.hnl.aarnet.net.au (2001:388:1:1b::2)  118.217 ms  118.180 ms  118.155 ms
 4  so-0-1-0.bb1.a.sea.aarnet.net.au (2001:388:1:1c::2)  173.572 ms  173.836 ms  174.103 ms
 5  abilene-1-is-jmb-776.lsanca.pacificwave.net (2001:504:b:80::131)  195.750 ms  195.731 ms  196.031 ms
 6  2001:468:ff:305::1 (2001:468:ff:305::1)  227.375 ms  225.552 ms  225.532 ms
 7  xe-2-3-0.0.rtr.atla.net.internet2.edu (2001:468:ff:1c2::2)  243.722 ms  243.531 ms  243.515 ms
 8  2001:468:ff:e43::2 (2001:468:ff:e43::2)  243.856 ms  243.837 ms  243.818 ms
 9  2610:148:fe00:c::2 (2610:148:fe00:c::2)  244.618 ms  255.102 ms  244.395 ms
10  * * *
11  * * *
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  * * *
22  * * *
23  * * *
24  * * *
25  * * *
26  * * *
27  * * *
28  * * *
29  * * *
30  * * *


$ ping6 -c 8 ipv6.gatech.edu
PING ipv6.gatech.edu(2610:148:fd8f:d7fc:203:baff:fe8f:29d) 56 data bytes
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=1 ttl=53 time=310 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=2 ttl=53 time=246 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=3 ttl=53 time=244 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=4 ttl=53 time=276 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=5 ttl=53 time=275 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=6 ttl=53 time=244 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=7 ttl=53 time=244 ms
64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=8 ttl=53 time=245 ms

--- ipv6.gatech.edu ping statistics ---
8 packets transmitted, 8 received, 0% packet loss, time 7010ms
rtt min/avg/max/mdev = 244.758/261.173/310.789/22.894 ms


$ tracepath6 mirror.ipv6.internode.on.net
 1?: [LOCALHOST]                        0.034ms pmtu 1280
 1:  2001:388:f000::1454                                  24.640ms 
 1:  2001:388:f000::1454                                  24.081ms 
 2:  2001:388:1:5001::1                                   24.563ms asymm  3 
 3:  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au        25.232ms 
 4:  gi0-0-226.bdr1.syd6.internode.on.net                 24.765ms 
 5:  te0-0-0.bdr1.syd6.internode.on.net                   24.455ms 
 6:  pos15-0-0.bdr1.adl6.internode.on.net                 46.256ms 
 7:  gi1-17.cor3.adl2.internode.on.net                    48.026ms asymm  9 
 8:  gi1-17.cor3.adl2.internode.on.net                    54.187ms !A
     Resume: pmtu 1280 

$ traceroute6 mirror.ipv6.internode.on.net
traceroute to mirror.ipv6.internode.on.net (2001:44b8:8020:7a80::20), 30 hops max, 80 byte packets
 1  2001:388:f000::1454 (2001:388:f000::1454)  22.918 ms  23.231 ms  23.218 ms
 2  2001:388:1:5001::1 (2001:388:1:5001::1)  23.202 ms  23.186 ms  23.472 ms
 3  tengigabitethernet2-1.pe1.c.syd.aarnet.net.au (2001:388:1:d:222:90ff:fe5f:2740)  23.704 ms  23.693 ms  23.679 ms
 4  gi0-0-226.bdr1.syd6.internode.on.net (2001:44b8:b060:2::4739:1)  23.873 ms * *
 5  te0-0-0.bdr1.syd6.internode.on.net (2001:44b8:b060:1::15)  24.514 ms * *
 6  pos15-0-0.bdr1.adl6.internode.on.net (2001:44b8:8060:1::9)  46.939 ms * *
 7  gi1-17.cor3.adl2.internode.on.net (2001:44b8:8060:16::2)  46.309 ms  46.294 ms  46.521 ms
 8  mirror.internode.on.net (2001:44b8:8020:7a80::20)  45.757 ms  45.747 ms  45.968 ms

$ ping6 -c 8 mirror.ipv6.internode.on.net
PING mirror.ipv6.internode.on.net(mirror.internode.on.net) 56 data bytes
64 bytes from mirror.internode.on.net: icmp_seq=1 ttl=55 time=44.9 ms
64 bytes from mirror.internode.on.net: icmp_seq=2 ttl=55 time=44.9 ms
64 bytes from mirror.internode.on.net: icmp_seq=3 ttl=55 time=71.0 ms
64 bytes from mirror.internode.on.net: icmp_seq=4 ttl=55 time=45.1 ms
64 bytes from mirror.internode.on.net: icmp_seq=5 ttl=55 time=45.3 ms
64 bytes from mirror.internode.on.net: icmp_seq=6 ttl=55 time=50.7 ms
64 bytes from mirror.internode.on.net: icmp_seq=7 ttl=55 time=45.9 ms
64 bytes from mirror.internode.on.net: icmp_seq=8 ttl=55 time=60.2 ms

--- mirror.ipv6.internode.on.net ping statistics ---
8 packets transmitted, 8 received, 0% packet loss, time 7010ms
rtt min/avg/max/mdev = 44.912/51.036/71.015/9.025 ms


TODO; Please add more paths to trace to and I'll add them here.


","",2011-03-21 16:39:57.295122,9
238,238,213,"h1. OCEAN CITY old News Item - rc5 is suitable for testing

*Summary:* After a week of testing in the lab, we are delighted to report that the last major bugs (#216 and #195) appear to be stomped in Cerowrt 1.0. While our testing continues, we welcome other testers to download the firmware and give the router a try! Originally published on 17 Aug 2011.

h1. About CeroWrt

CeroWrt is a project to resolve endemic problems in home networking today, and to push the state of the art of edge networks and routers forward. Projects include tighter integration with DNSSEC, wireless mesh networking (Wisp6), measurements of networking and censorship issues (BISMark), among others, notably reducing bufferbloat in both the wired and wireless components of the stack.

h1. CeroWrt's Goals

CeroWrt is a build of the OpenWrt routing platform intended for use by individuals, network engineers, researchers, teachers, and students interested in advancing the state of the art on the Internet, and in particular, those investigating the problems of latency under load, bufferbloat, wireless-n, and the inter-relationships between various TCP & QoS algorithms.

CeroWrt breaks with home router conventions in several ways. CeroWrt comes with a high performance integral web server with which you can establish local web services and provide web content and services 24x7.

First class name services become a necessity rather than a ""nice to have"" with IPv6 deployment. Manual configuration of name services with IPv4 and IPv6 literal addresses is no longer feasible by most people, if indeed it ever was. Toward the goal of ""plug and play"" home environment able to publish IPv6 addresses into the global Internet name space without manual configuration, CeroWrt includes the Bind name server. Security in the home environment is also a goal, ergo CeroWrt's support for DNSSEC using ISC Bind in a chrooted jail.

A core goal for CeroWrt is to provide a well understood platform, where contributors can perform tests with confidence that their results can be duplicated by others.

CeroWrt is the base on which other specialised builds may be built in the future. The default build is too big (~9MB) to be compatible with more commonly available routers.

There are other features all intended to help make insight into networking problems easier. In particular, bufferbloat, wherever we could find it, has been reduced, but not yet eliminated entirely; that requires the research in AQM and buffer management for which CeroWrt is intended.

h1. Interesting features of this release:

Ocean City Release includes:

* Extensive debloating
* ISC Bind 9 with DNSSEC, running in a chroot jail
* Numerous debugging and diagnostic tools
* ECN is enabled
* Multiple TCP algorithms (Cubic, Bic, Westwood+, Vegas)
* Multiple traffic shapers (now including DRR and SFB)
* Simulations are possible of packet loss and delay by using NETEM
* Native, 6to4, and 6in4 IPv6 support
* Mesh routing
* The polipo web proxy
* Local lighttpd Web Server
* Rsync
* Bridging different radios and ethernet has become very problematic, particularly in the face of multicast traffic and radically different wireless bandwidth. CeroWrt routes rather than bridges.
* Many additional packages are not installed by default, but are available in the CeroWrt package repository.

While we have tried very hard to produce a usable web interface for the normal use of CeroWrt as your primary Internet router (and do desire you use it as such and give us feedback!), some things, such as configuration of the web proxy, or alternate TCP algorithms can require non-GUI editing via SSH.

As this is a research and development platform, there will be no long term support for this release and future RCs will likely require a complete reflashing and reconfiguration of your router. We apologize for the inconvenience but the state of the art and the problems we are trying to solve are rapidly moving targets that we must track closely. We will feed back the results of this work into stable distributions.

h1. The Beta 1 ""Ocean City"" release (RC5)

CeroWrt is also aimed at (currently) a single hardware platform for which fully open drivers are available: the Netgear WNDR3700v2, a current 802.11abgn router using the Atheros AR7161 rev 2 with gigabit Ethernet ports. CeroWrt runs on the WNDR3700v2 only as it requires more than 8Mbytes of flash. Note that there may still be WNDR3700v1's in the retail channel. Information on distinguishing them can be found in the bufferbloat wiki at http://www.bufferbloat.net/projects/bismark/wiki/Wndr3700v2

The Ocean City release is based on Linux 2.6.39.4; the DNS server is ISC Bind 9.8.0-P4 running from xinetd and in a chroot jail. RC5 is based on OpenWrt head of development as  of commit 65dea0f0b144abbeb445c9d24a605aba506678a0,  Thu Aug 11 13:52:40 2011 +0000.

Systematic testing of this software has just begun and the performance of the router is at this date unknown relative to other firmware.

Release candidate firmware can be downloaded from:

http://huchra.bufferbloat.net/~cero1/

Installation directions can be found at:
http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_INSTALLATION_GUIDE

Release notes are at:
http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_RELEASE_NOTES
IRC discussions on CeroWrt take place at irc.freenode.net: #bufferbloat
IRC discussions on OpenWrt in general take place on:irc.freenode.net: #openwrt

Mailing lists:

General discussion about CeroWrt takes place on the bloat-devel list found at:
    https://lists.bufferbloat.net/listinfo/bloat-devel

General bufferbloat discussions can be found at:
    https://lists.bufferbloat.net/listinfo/bloat

Thanks for giving CeroWrt a try!

The network you save may be your own.

","",2012-03-17 09:17:47.079325,1
138,138,3,"h1. Ideas

Tracking [[protocol usage with iptables]]","",2011-05-28 08:19:09.100034,1
142,142,3,"h1. Pdsh

The parallel distributed shell:

https://computing.llnl.gov/linux/pdsh.html

To use it, your public key needs to be in authorized_keys on the routers for 'root',
and you need to set several variables appropropriately via

. /etc/profile.d/pdsh 

configured (at present) with a /etc/genders file of:

<pre><code style=""bash"">
dtaht@metis:~$ cat /etc/genders 
# slc cluster genders file
# '%n' substitutes nodename into value
#slci,slcj,slc[0-15]  eth2=e%n,cluster=slc,all
dp4  squeeze
metis,callisto  squeeze
metis,callisto  mgmt,debian
# There are still two routers MIA
aitne,io,thebe,leda,elara             routers,openwrt
jupiter gw,openwrt
</code></pre>

See  [[Experiment - QoS]] as one example of advanced usage. ","",2011-05-28 11:51:22.853205,2
145,145,3,"h1. Openvpn on Mac

http://code.google.com/p/tunnelblick/","",2011-05-29 16:45:17.893988,1
324,324,3,"h1. Dave Taht's Media Guidance

{{>toc}}

With the upcoming publication of the ""CeroWrt letter to the FCC on the Wifi lockdown issue"":http://fqcodel.bufferbloat.net/~d/fcc_saner_software_practices.pdf ...

While I do not wish to enforce any rules on the 260 signers, these are the guidelines I intend to follow, for myself, and have a bit of detail below on how I, personally would like to interface with others... I figure this doc should be split in two, and my personal stuff broken out.

To make our points it would be helpful for anyone answering a press or other inquiry, to try first to make the inquirer understand the problems we face on fixing the internet from our perspectives, be it performance, security, reliability, or whatever.

Among other things, we have asked the FCC's chief engineer to discuss the issues with us ""directly and publicly this friday"":https://plus.google.com/u/0/events/cp7g87eq2g5fde8b8i5bn2p8oo0 .

h2. Media inquiries email

I have set up an alias, media@bufferbloat.net to handle media inquiries. Feel free to direct media requests for access to signers of the FCC letter there, and we'll handle it.

Still feel free to do your own outreach, blogging, tweeting, etc.

But, if you get into trouble on a question, PLEASE don't guess. Try to ask the appropriate questions of the public bloat, make-wifi-fast or cerowrt-devel mailing lists, cc-ing the questioner. Far too few in the media use these as effectively as we do. Or forward the request to media@bufferbloat.net and we'll handle it.

h2. Reaching Dave

I can generally always be reached best via email, or google hangout. Being partially deaf leads me to vastly prefer situations where I can have high quality audio, or read lips, either one on one, or in a videoconference. f2f, email or network chat are way better than a conventional phone call or mass meeting.

My personal contact info: 

email or hangout: dave.taht@gmail.com
webrtc: https://appear.in/davetaht
phone: +46 54 700 1161

I do have a skype account (davetaht) but best - always! - to reach me first via email to set up a good time. 

I am presently a guest researcher at karlstadt university, in sweden, after a stay at the lincs, in paris, this summer. Prior to that I was contracting for gfiber part time, but mostly working on getting ""make-wifi-fast off the ground"":http://www.bufferbloat.net/projects/make-wifi-fast/wiki/Wiki


h2. I plan to always show bufferbloat in action

In doing an interview, first, always, make the interviewer open a new browser window (chrome or firefox), and run http://www.dslreports.com/speedtest/ - and send you his/her result!

The odds are extremely good that they will get a rating of B or worse for bufferbloat. This leads naturally to explaining that *we fixed that*, with some ""new theory"":http://www.bufferbloat.net/projects/codel , and *just software* making possible better and more consistent voip, gaming, web, and videoconferencing performance... and to the question, of, how, then, do you upgrade or retrofit  a billion devices to use the fixes, with broken millions more shipped every day, with FCC approval?

This is a ""chart of the worldwide scope of the bufferbloat problem on uplinks"":http://www.dslreports.com/speedtest/results/bufferbloat?up=1 Downlinks are not as bad, but still bad. Everybody running the results of the CeroWrt project's code is usually at 30ms or less of induced delay. Everyone else can have delays measured in *seconds*. What a productivity loss! What a bad fate for the future for voip and videoconferencing!

You can also a ""breakdown by ISP"":http://www.dslreports.com/speedtest/results/isp , and other drill-downs.

The results of this test are particularly devastating if they run this test while in a video conference with you. If they don't get a bad result, wave hands and suggest they try it elsewhere, in a coffee shop, at home, etc.

The odds are certain that in several of those cases, bad network behavior will happen, which you can talk to. How do you get added the mere 50 lines of BQL code needed to the DSL blob firmware on 100s of millions of devices? Or the 1000 lines of fq_codel or cake to other hardware, or the fairly tiny number of additional changes to wifi blob firmware - to make it perform so much better than it ever did before. This is a truly tiny amount of code to add to everything when compared to the millions required to make it work in the first place.

In my experience *normal users* care a hell of a lot more about performance than security, and most of the public security discussion is security theater. Network performance *matters*.

h2. On ""open source"" vs ""public, maintained, and frequently updated source""

Throughout the letter you will only see open source mentioned once, and specifically that we ask that the FCC ""review and rescind"" any rules that interfere with open source best practices. We are not requiring open source here, but asking that rules that make using open source techniques difficult, or impossible, be reviewed and fixed. The core bit of code we care about seeing made public - the ""binary blob"" at the lowest level of the device driver or it's onboard firmware - is as big a PITA for open source network stacks built on top of that blob as those using more closed ones.

""open source' as we well know, since heartbleed, does not always get *maintained*, automatically. There are far too maintainers and only a ""few orgs"":http://icei.org dedicated to maintenence. I (speaking on behalf of the CeroWrt project and *not* all the 260 signers) do not care what license be slapped on the firmware sources, only that the code be *human-readable, public, maintained, and regularly updated*.

Sure, doing that as open source as per the OSI definitions  would be smart, but not having it be public, AND maintained is the far larger problem.

if someone translates what you are saying into an open source rant, rant back about getting the code public, maintained, etc.

h2. Security and safety

While I am of course mostly focused on the bufferbloat issue, there are also all the public safety issues induced by un-updatable firmware, not just on the internet but in cars and the like.  Although the 5 mandates in the letter are buried deep within it, those are the most important parts of the letter to the FCC, as it is out of the box thinking that needs to be considered by all regulators of software and hardware  - and is what needs to be discussed with the public and regulators. The mandates are nearly done, and we will probably have to produce a faq, and ultimately pursue legislation on the scale of the original clean air and water act to get anywhere.

In the past 5 years, I have spent vastly more time dealing with the larger problems of secure updates, ipv6, and system security in general than I have actually spent on make-wifi-fast or bufferbloat. My answer to these other problems are often hard to describe... for example my answer to the persistent stack smashing and return oriented programming attacks is to sink what spare time I can into helping fund and finalize ""millcomputing"":http://millcomputing.com/docs/ 's new cpu - and I do wish we had not needed to address all these also in the context of the original CeroWrt project! We'd have fixed wireless-n by now!

Still, I am shifting all security related questions to someone(s) else, with paul vixie taking the lead with the hopeful assistance of jim gettys, nick feamster, bruce schneir, and others.  If I thought about the security nightmares of heartbleed, dnschanger, the moon worm, and the 100s of millions of dollars being spent to deal with DDOS and other forms of attack, more than I already do, I would cease to be able to get out of bed in the morning.

On wifi, david reed is our main go-to guy when going deep into EE-land. andrew mcgregor is also good as is david lang, but at more practical land. I'm not as good at the EE stuff, but better on all of make-wifi-fast's stuff we outlined in the appendexes to the make-wifi-fast design document mentioned in the letter.

h2. Unburying the 5 mandates from the ""fcc letter"":http://huchra.bufferbloat.net/~d/fcc_saner_software_practices.pdf

bq. We advocate: that rather than denying users the ability to make any changes to the router whatsoever, router vendors be required to open access to their code (especially code that controls RF parameters) to describe and document the safe operating bounds for the software defined radios within the Wi­Fi router. In this alternative approach, the FCC could mandate that:

bq. 1. Any vendor of SDR, wireless, or Wi­Fi radio must make public the full and maintained source code for the device driver and radio firmware in order to maintain FCC compliance. The source code should be in a buildable, change controlled source code repository on the Internet, available for review and improvement by all.

bq. 2. The vendor must assure that secure update of firmware be working at shipment, and that update streams be under ultimate control of the owner of the equipment. Problems with compliance can then be fixed going forward by the person legally responsible for the router being in compliance.

bq. 3. The vendor must supply a continuous stream of source and binary updates that must respond to regulatory transgressions and Common Vulnerability and Exposure reports (CVEs) within 45 days of disclosure, for the warranted lifetime of the product, or until five years after the last customer shipment, whichever is longer.

bq. 4. Failure to comply with these regulations should result in FCC decertification of the existing product and, in severe cases, bar new products from that vendor from being considered for certification.

bq. 5. Additionally, we ask the FCC to review and rescind any rules for anything that conflict with open source best practices, produce unmaintainable hardware, or cause vendors to believe they must only ship undocumented “binary blobs” of compiled code or use lockdown mechanisms that forbid user patching. This is an ongoing problem for the Internet community committed to best practice change control and error correction on safety ­critical systems. This path has the following advantages:

bq. ● Inspectability: ­ ​Skilled developers can verify the correctness of software drivers that are now hidden in binary “blobs”.

bq. ● Opportunity: for innovation ­ ​Many experiments can be performed to make the network “work better” without affecting compliance.

bq. ● Improved spectrum utilization: ­ ​A number of techniques to improve the use of Wi­Fi bands remain theoretical possibilities. Field trials with these proposed algorithms could prove (or disprove) their utility, and advance the science of networking.

bq. ● Fulfillment of legal (GPL) obligations: ­​ Allowing router vendors to publish their RF­ controlling source code in compliance with the license under which they obtained it will free them from the legal risk of being forced to cease shipping code for which they no longer have a license.

bq. Requiring all manufacturers of Wi­Fi devices to make their source code publicly available and regularly maintained, levels the playing field as no one can behave badly. The recent Volkswagen scandal with uninspected computer code that cheated emissions testing demonstrates that this is a real concern.

h2. CeroWrt vs Make-wifi-fast

CeroWrt was a research project. When we got stability, we pushed all the innovations up into linux and openwrt and elsewhere. fq_codel, in particular has been widely adopted across the entire industry. 

make-wifi-fast as formerly structured has been my attempt to simplify things enough to just focus on fixing wifi, as most of everything else is now moving along smartly, but I am increasingly expecting we will have to do another cerowrt (cerowrt v3!) scale project to get everything right. My problem with doing that is that much of the theory work is basically done and what remains is a ""mere matter of engineering"", the cost estimate for which was in the millions, for which we only have thousands. (I personally have support from the university of karstadt and two small comcast research grants coming in next week - but it does not compare to the scope of the task).

I do not have sufficient funding for a f/t build engineer, which is partially why my ""patreon page exists"":https://www.patreon.com/dtaht - but also, for the last year, I was pouring every spare dime and all the time I could into the theory bits of make-wifi-fast, working only part time at my now former job a gfiber, and I do, keep hoping that some day, the world will look up and be grateful for wifi enough for normal folk to want to see it made better... despite the seeming desires of governments and carriers to ruin it further.

I have slept on a ""lot of great couches"":http://esr.ibiblio.org/?p=4162 during ""this project"":http://esr.ibiblio.org/?p=4566 , but I am not scaling anymore inside my tight constraints, and huge demands on my time.

h2. Using social media

I am generally bad at using social media, but this time I intend to tweet, g+, and facebook, and I encourage people to do the same, as
well as post links to other valuable material such as the arstechnica and wired articles. I don't know what hashtag to use: #savewifi ?

Please feel free to point others at my old blog or ""g+"":https://plus.google.com/u/0/107942175615993706558/posts pages, but I do tend to treat ""my facebook"":https://www.facebook.com/dtaht as more personal and private and ask that only genuine friends (and everyone directly in the cerowrt/bufferbloat efforts I consider a friend by now, do drop in!) try to friend me there.

h2. Be yourself

People that I know well and trust keep telling me to just be myself. I keep explaining to them that for every public appearance I make on whatever subject I'm talking about, I spend weeks under the bed working through every possible question and response, I always end up rewriting the entire talk at 2am the previous night, and am a wreck afterwards for weeks, also. This note here is basically the kind of stuff I usually write for myself over the course of those weeks.... only usually it's pages and pages longer!

... more notes to be added here ...

h2. Avoid other politics

Lastly, I really hate politics. I'd rather run the bufferbloat project, (and write code once in a while!), and play piano, but this latest outrage finally pushed me over the edge, (after two years of trying to free up any 802.11ac firmware to work with)to where I am willing to go to Washington, hand out routers, and explain the basics of how networks really work and software engineering in front of the FCC and on the floor of Congress, or if I have to, standing outside with guitar and picket sign.

In the near term at least, I am not going to answer any questions about my religion, political parties, or any of my personal background
outside of the issues at hand. People that want to learn some of my other views can read the 15 years of history ""on my old blog, starting here"":http://the-edge.blogspot.se/2002_06_09_archive.html#77710440 . I have a lot of stuff in the period 2002-2006 that was quite interesting in now current contexts. (I am not going to revise a word of although I do regret quite a few things), and even after reading those many may remain confused by my usage of irony, sarcasm or humor, and I would prefer people ask questions of ideas in my old material rather than take them as givens.

In particular, I tracked the Ron Paul campaign for a while, but am not by most measures, a libertarian. I have long believed that governments make (functional or dysfunctional) markets possible, and I have no idea to what party or vein of thought that belongs to!? I go where the data takes me. Is there a political party for that?

What I was actually fascinated with, at the time (and since), was how mass media attempts to wedge thinking into an A or B choice, both often based on misinformation, or a tiny slice of the wrong part of the problem. Which is what is happening here on so many technology  fronts...

Being someone that always thinks out of the box, and perpetually aware of or trying to create thousands of other choices, I have striven my whole life to get people to escape simple frameworks like that, and use critical thinking and conversations with conflicting thinkers to achieve consensus solutions and clarity.

Choosing to always work on constructive safety and performance enhancing things for the internet is how I cope with the endless
barrage of scary clueless stupidity coming from elsewhere across the social, corporate and political spectrum.

If I didn't have the skills and intelligence to persist at that, sometimes at great personal and financial cost, I would have despaired long ago, and worked harder on means for humanity to leave the planet than I already have.

I still might sit down and compile answers to a few basic questions about myself, and I'll try to be amusing about it. I don't think anyone groks why I call myself a fugi chef on g+ for example....","",2015-10-15 09:33:20.245888,32
282,282,3,"h1. CeroWrt 3.7 Release Notes

This release is obsolete. Please See the [[CeroWrt 310 Release Notes]] for the current release.

CeroWrt is a routing OS built on the ""OpenWrt firmware"":http://openwrt.org . It is a research project intended to resolve the bufferbloat epidemic in home networking today, and to push forward the state of the art of edge networks and routers. Subprojects include proper IPv6 support, tighter integration with DNSSEC, and most importantly, reducing bufferbloat in both the wired and wireless components of the stack.

The current CeroWrt release is code-named ""Modena"", version ""3.7.5-2"":http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.7.5-2/ , built on 3 February 2013
Download the latest build from from http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.7.5-2/

CeroWrt Modena has proven to be highly stable, both from an ordinary operational standpoint as well as being able to survive heavy load testing. A number of people are using it as their primary router.

*Features*

The CeroWrt 3.7 series of builds include the following features and capabilities:

* Linux 3.7.5 kernel. Many of the fixes for bufferbloat are being implemented in this 3.7  kernel, so we are tracking these developments carefully. http://kernel.org
* The ""CoDel"":http://www.bufferbloat.net/projects/codel/wiki algorithm from Kathie Nichols and Van Jacobson along with Eric Dumazet's adaptation of Fair Queueing (fq_codel) on top. These in turn rely on the Byte Queue Limits that were implemented in the Linux 3.3 kernel. These techniques replace earlier Active Queue Management fixes for bufferbloat including: Stochastic Fair Queueing-Random Early Drop (SFQRED), but for comparison previous technologies such as SFQ and RED continue to be included. 
* Test releases of ns2_codel and nfq_codel - built on top of the current ns2 models of the code and not yet in mainline linux.

* IPv6 support. Another major goal of CeroWrt is to make IPv6 networking in the home as simple as IPv4.
* Babel mesh routing protocol (Quagga-babeld). Other protocols such as ra, ospf, and bgp are also available.
* DNSSEC and DNSSEC proxying - Secure extensions to the DNS system. Proxying is currently in testing.
* OpenWrt features. Because we track the OpenWrt code base carefully, we incorporate most of the capabilities of that distribution. We actively push our changes/enhancements back toward the OpenWrt trunk. http://openwrt.org
* An attractive web GUI for configuration - LuCI
* CeroWrt has the following packages either built-in and enabled, or optionally loaded:

*IPv6 packages:*
- radvd has been obsoleted as the new features in dnsmasq replace it
- dhcpv6-pd support
- dhcpv6 server support
- 6to4 version 9-1 - IPv6 tunnel through IPv4 (not turned on by default)
- 6in4 version 11-1 - IPv6 tunneling (not turned on by default)
- 6rd 
- wide-dhcpv6-client replaced with the new features in dnsmasq


*Other modules:*
- strongswan4 4.5.3-2 - IPsec VPN http://www.strongswan.org/
- avahi-daemon 0.6.30-4 - reflector for zeroconf/mDNS-SD/Bonjour names http://avahi.org/
- samba36-server 3.6.5-2 - file and printer service  http://www.samba.org
- ntp 4.2.7p256-1 - network time client http://www.ntp.org/
- enhancements to the LuCI web GUI
- iptables 1.4.12.2-1git-5 - framework for packet filtering and network address/port translation http://www.netfilter.org/
- iproute2 - utilities for controlling TCP/IP traffic in a Linux kernel http://www.linuxfoundation.org/collaborate/workgroups/networking/iproute2
- dnsmasq 2.66-13beta - DNS forwarder and DHCP server designed for home routers and NAT http://www.thekelleys.org.uk/dnsmasq/doc.html

*Other measurement tools are available for installation:*
- snmpd 5.4.2.1-5 - for monitoring network traffic
- fprobe 1.1-1 for monitoring NetFlow traffic
- iperf 2.0.5-1
- scamper

h2. Releases

h3. 3.7.5-2 ""Modena""

Bind9 is obsoleted
Openvpn will be available in a later release

Experimental stuff

- ns2_codel, nfq_codel, efq_codel available optionally
- wifi queuing boosted from very low values to a compromise that preserves more bandwidth
- debloat change to lower target to 5ms, quantums to 1000


h3. 3.7.5-2

- bind removed
- 6to4 fixes for interface assignment
- 6to4 route propagation workaround (#406)
- AQM gui module removed (too confusing, wasn't working stuff)

Experimental Stuff

- wifi queuing kept at low values
- debloat change to lower target to 5ms, quantums to 256 (from mtu)","",2014-07-25 02:46:56.275911,7
289,289,213,"h1. CeroWrt 3.10 Release Notes

{{>toc}}

*CeroWrt 3.10 Beta Test Release Notes* 

Current version is *3.10.50-1*, built on 28 July 2014. The current build can be downloaded from: http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr See the *Status* section (below) for more information. 

*About CeroWrt*

CeroWrt is a wireless router OS built on the ""OpenWrt firmware"":http://openwrt.org . It is a research project intended to resolve the bufferbloat epidemic in home networking today, and to push forward the state of the art of edge networks and routers. Sub-projects include proper IPv6 support, tighter integration with DNSSEC, and most importantly, reducing bufferbloat in both the wired and wireless components of the stack.

*Features*

* High performance routing in a relatively inexpensive “home” router - the Netgear WNDR3800. 
* A major improvement to the problem of bufferbloat. VoIP, Skype, gaming, and other latency-sensitive applications continue to work well even during heavy up/download.
* IPv6 support. Another major goal of CeroWrt is to make IPv6 networking in the home as simple as IPv4. IPv6 subnet assignment and other features are enabled, and have been extensively tested on comcast's deployment.
* Linux 3.10.x kernel. Many of the fixes for bufferbloat have been implemented in mainline Linux. This means that bufferbloat is improving for the rest of the world. http://kernel.org
* CeroWrt defaults to the fq_codel queueing discipline that implements the ""Codel"":http://www.bufferbloat.net/projects/codel/wiki algorithm from Kathie Nichols and Van Jacobson along with Eric Dumazet's adaptation of Fair Queueing (fq_codel) on top. 
* CeroWrt also includes these queueing disciplines for experimentation: fq_codel, efq_codel, nfq_codel, sfq, codel, ns2_codel, RED, ARED, SFQRED, QFQ and Cisco's PIE. 
* Babel routing protocol with source specific routing support (babels). ""Source Sensitive Routing"":http://hal-univ-diderot.archives-ouvertes.fr/docs/00/94/72/34/PDF/source-sensitive-routing.pdf allows for multiple exit nodes on IPv6 and IPv4 among other things.
* Improved DNS handling by incorporating dnsmasq for both DNS and DHCP support. CeroWrt 3.10 enables DNSSEC by default, but see note in the Status section.
* Incorporates [[CeroWrt_and_BCP38|Best Common Practices 38]] (BCP38) to defeat Denial of Service attacks which employ IP Source Address Spoofing. 
* Adequate entropy for the random number generators, for better encryption (WPA, SSL), ethernet drivers, etc.
* All the features expected from a modern small office/home (SOHO) router:
   - Dynamic DNS to establish a static DNS name even if the IP address from your IPS changes
   - UPnP (Universal Plug and Play) and SSDP proxy that allows DLNA discovery across CeroWRT's routed (not bridged) interfaces
   - mDNS (multicast DNS) that both allow other computers on the local network to find each other 
   - Polipo caching web proxy
   - All the features of the OpenWrt distribution, including the attractive LuCI web GUI for configuration. We track the OpenWrt development code base (“Barrier Breaker”) and incorporate the capabilities of that distribution. http://openwrt.org and http://wiki.openwrt.org/doc/howto/luci.essentials
* CeroWrt has a broad set of useful packages built-in or optionally loaded. See the list of Major Packages below.

CeroWrt remains a vehicle for research around many aspects of networking, both in SOHO and high-performance settings. CeroWrt is only built for the WNDR3800 router (or the similar WNDR3700v2 model) so we can spend our time on these new features without worrying about hardware compatibility. We actively push our developments back into the mainline kernel and OpenWrt's Barrier Breaker sources so these features will become available in other equipment. 

*Status*

The current CeroWrt release is code-named “Toronto"", and has proven to be highly stable, both from an ordinary operational standpoint as well as being able to survive heavy load testing. Many people are using this beta release of CeroWrt as their primary router, and we encourage you to do so as well. 

* Download the current build from: http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr 
* Use the ""installation and configuration instructions"":http://www.bufferbloat.net/projects/cerowrt/wiki/Installation_Guide to get up and running. 
* See also the [[Debugging CeroWrt]] page for information to collect when submitting trouble reports.

*Open Issues*

* We are hopeful that this version fixes a nasty wifi ( #442 ) bug, but we are still testing. 
* DNSSEC is enabled by default, but we are still seeking a robust method for getting an accurate time on boot before we can release a version we can call stable. (There's a chicken and egg problem... DNSSEC requires an accurate time stamp; To look up the current time, CeroWrt needs to talk to an NTP server; to find an NTP server, CeroWrt needs to do a DNS lookup. There are a few solutions: we need to choose one that's robust.) 
* [Fixed] Releases 3.10.36-4 (9 Apr 2014) and later also include the fix for the major OpenSSL bug, ""heartbleed"", see: http://heartbleed.com/ )

*What has Changed since CeroWrt 3.7.5-2:*

* Linux 3.10 kernel which has incorporated many fixes to bufferbloat, as well as finding many long-standing errors in the TCP/IP stack.
* A GUI for setting Smart Queue Management (SQM) parameters for slower links. See [[Setting_up_SQM_for_CeroWrt_310|Setting up SQM for CeroWrt 3.10]].
* CeroWrt defaults to fq_codel on the ge00 (wide area) interface, using the simple.qos queue setup script (see /usr/lib/sqm/simplest.qos)
* Updated packages for:
   - DNS and DNSSEC using dnsmasq (http://www.thekelleys.org.uk/dnsmasq/doc.html);
   - Native IPv6 as well as 6in4, 6to4, IPv6 NAT, etc.;
   - Babel Routing protocol (http://www.pps.univ-paris-diderot.fr/~jch/software/babel/); (quagga and olsr and BATMAN are available as options)
   - mDNS (http://avahi.org/);

* Much work to support the current dnsmasq for both DNS naming as well as IPv4/IPv6 address assignment
* [[CeroWrt_and_BCP38|Best Common Practices 38]] (BCP38) is on by defaut to defeat Denial of Service attacks which employ IP Source Address Spoofing. 
* Deep scrutiny of the entire Linux networking stack has identified a number of errors which are fixed in CeroWrt and also pushed back into the Linux kernel, including TSO handling; improvements of RTT computations; fixed many unaligned access traps in the IPv6 code.
* Incorporates work to improve the entropy for /dev/random and get_cycles()
* Firewall improvements; block external access to SNMP (port 161) by default; uses pattern matching syntax to simply/decrease number of filter rules.
* Includes recent Cisco PIE queue discipline for comparison with fq_codel
* Web interface on port 81 is now using HTTPS by default with perfect  forward secrecy

*Major Packages distributed with CeroWrt:*

_(Note: these package numbers may not reflect the versions in the current beta. They will be updated when we make a full release.)_

* *DNS Packages:*
- dnsmasq-dhcp6 2.71
- avahi-daemon 0.6.31-5 - reflector for zeroconf/mDNS-SD/Bonjour names 

* *IPv6 Packages:*
- 6to4 version 12-1 - IPv6 tunnel through IPv4 (not turned on by default)
- 6in4 version 15-1 - IPv6 tunneling (not turned on by default)
- 6rd version 5-1
- iptables & ip6tables version 1.4.21-1 - iptable firewall for v4 and v6
- kmod-ipt-nat6 version 3.10.32-1 - IPv6 NAT

* *Routing:*
- babels version 20131225-git-3-1 - Routing code

* *Diagnostic/measurement tools:*
- snmpd  version 5.4.2.1-5 - for monitoring network traffic
- netperf-latest version - 2.6.0r658-4

* *Other tools/package:*
- Linux 3.10.32 kernel
- mosh server version 1.2.4-1 - an SSH alternative (optional)
- All the tools installed by default on an OpenWrt router
- Polipo version 1.0.5-3

h1. Progress Notes - Earlier Releases

The following items are the rough notes that accompanied each of the updates from 3.7.5-2 to the current build.

h2. CeroWrt 3.7.5-2 - 3 Feb 2013

Previous stable ""Modena"" release

h2. 3.8.6-2 - 7 Apr 2013

Up to Openwrt head
** DONE update to dnsmasq 2.66rc4
** DONE update iptables
 But is there npt66 support?
** DONE fix igmp patch
** DONE update quagga, netperf,
** TODO babel refresh
** DONE Change name to berlin
** DONE Fix kernel config for additional TCPs


h2. 3.8.6-3 - 10 Apr 2013

This has a merge from openwrt from over the weekend (fixes to qos-scripts, some ipv6 gui support, I forget what else)

also the requested mtr package is built and available via opkg.
the openvpn gui didn't build.

h2. 3.8.8-4 - 24 Apr 2013

+ Refresh to openwrt barrier breaker head

 this now contains nearly all the patches formerly separately in cerowrt!

 ++ fq_codel is on by default on ALL interfaces with default quantum of 300
      (yes, openwrt has obsoleted pfifo_fast!)
 ++ unaligned access patches, etc, etc
 + dhcp-pd SERVER support
the usual multitude of other openwrt fixes... all tested extensively
at the battlemesh conference.

+ Update to dnsmasq 2.67test2

Toke got really busy in building his own version of cero and adding

+ AQM scripts and gui
+ tahoe-lafs added (untested)
+ uftp4 updated

- no upnp/ssdp fix because I'm clueless

h2. 3.8.13-3 - 18 May 2013

Very much a development release - I want to clearly note that I can crash the router over wifi using the rrul test easily. I can (furthermore) crash the x86 linux-3.9.2 iwl driver on my laptop even more easier than I can crash the router. The combination of the two problems are making debugging impossible.

So... pretty please... with sugar on top... don't install this on your default gw?

If on the other hand, you have a jtag debugger handy, and don't have a iwl card on your laptop, and can look into the wifi issues, please do so... (all you have to do is bump up /etc/xinetd.d/netserver to 16 and run the netperf-wrapper against it for a few minutes)

There are otherwise a huge number of interesting things that have accumulated for this release cycle.

I was very happy that most of what was in Modena has landed in openwrt and the mainline linux kernels last month. Relieved, actually. I felt that I could take a break... even thought I could quit... spent a few days on a beach in Morocco and got bored to death... so....

The BIG new thing in this release is a version CISCO's PIE AQM algorithm, which after nearly a year of development and analysis was released as open source last week. The version of pie I just put in cero has not been fully verified to be correct, but has the additional features of ECN and TSQ support over the original. I hope to bake this a lot more over the coming week. (the wifi issue is annoying but secondary at the moment to finally! finally! fiddling with PIE)

There was the usual huge resync with openwrt. dslite landed recently in particular, but there have just been a huge number of updates across the board that I've lost track of. FW3 for example, is a fast, in-c replacement for the old firewall scripts, and openwrt is now using multi-table support in preparation for handling src/dst routing better.

Toke contributed tahoe-lafs and suggested trying out the tinc vpn system, so those are available as an optional package. tinc is kind of neat. a meshy vpn system. Never heard of it before now.

Toke also has been a great help elsewhere, notably in getting a gui and scripts going for the backend AQM system, working on a new build script to make it easier for others to build cero, and lots, lots more.
Rich Brown & Toke updated the onboard documentation significantly
Electra convinced me to make batman-adv available (but not enabled) by default
Babeld 1.4 has a new convergence smoothing algorithm (but quagga-babeld is still the default)
OpenWrt's QOS web page and backend scripts have been replaced by the new AQM page
The AQM scripts are now correct for EF and ECN.
fq_codel is now the default on everything with a quantum of 300

h2. 3.8.13-7 - 12 June 2013

I've had it up and running a few days on a couple routers,

and yes, I'm still trying to take some time off but:

+ can't crash it over wifi anymore
+ AQM + gui is coming along, am looking at gargoyle's methods a bit now...

- Known bug: 6in4 does not work via the gui or openwrt config file - this bug has existed for about a month now
and I haven't looked into it. I did look into fixing fq_codel performance under 6in4, and that patch is in here,
so after a bit more testing I'll try to get that upstream...

- the results I get from 802.11e are even more dismal than usual when the VI and VO queues are in full use.
+ For purely best effort wifi traffic, things look pretty good.

I am seriously considering disabling 802.11e negotiation in the next release.

I did prove 6in4 is working with the std-from-hurricane-electric script, so it's a bug in netifd, cero's config, or elsewhere at the openwrt level...

modprobe ipv6
ip tunnel add he-ipv6 mode sit remote $the_he_tunnel  local $my_local_ip ttl 255 tos inherit

# Note that I don't know if openwrt turns on tos inherit or not, btw, need to look into it. It's potentially useful

ip link set he-ipv6 up
ip addr add $mylink/64 dev he-ipv6
ip route add ::/0 dev he-ipv6
ip -f inet6 addr

h2. ??? - Mid June 2013

- Work on htb queuing (Only affected ATM?) - lots of problems, helped straighten out in CeroWrt and also other distros/kernel?

- Tweak for Windows file sharing (see Robert Bradley, 21 Jun 2013)

- Toke's note re: CeroWrt build script - 30 Jun 2013

h2. 3.10.10-1 - 9 Sep 2013

+ readlink fix (hopefully fixes sysupgrade)
+ usual merge with openwrt head (tons of ath9k changes)
+ dnsmasq 2.67test10
+ ipv6subtrees back in
+ the final htb atm patches
+ eliminated maxpacket check in codel

- did not fold in edumazet's new fq code
- 100% totally untested. May a braver soul than I give it a shot. I won't be near a cero box til thursday, otherwise.

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.10-1/

-I'm not sure if I got the ""last"" of the aqm gui patches in there or not...

...

Anyway... I had hopes to get a stable release out in august. I AM very happy about the major stuff that got fixed, instead... but...

Since we didn't... I now have a ton of other matters piled up. Not least of which is a pending trip to england and the eu.

So for the next month I don't see how I'm going to be able to put more than a day a week into cerowrt. Tops. So I have tagged up this ""release"" and pushed all the baked portions of the sources to github. I'm still a little dubious of the ipv6 subtrees bit....


h2. 3.10.13-2 - 1 Oct 2013

+ Proved it is possible to build an OS release on a ""Narrowboat""
-  but not test one without hacking at the 12v power supply off the solar panel
+ merge with openwrt head
+ dnsmasq 2.67test17
+ ipv6subtrees now part of 3.10.12
+ htb adsl fixes also
+ Simon kelly is starting to finalize dnsmasq 2.67 now that summer is over

- still no fix for the sysupgrade bug
- Most of the get_cycles() and /dev/random keruffle has settled down
but I did not fold the latest patchset for that into this. The
discussion on PRNGs was very illuminating and worth reading.There were
multiple threads on this topic on lkml, this is one:

https://lkml.org/lkml/2013/9/10/188


- I'd meant to push out some fixes to codel to the kernel mainline, didn't.
- PIE was submitted to the kernel mainline a few days ago but was
kicked back, also that version as submitted is pretty different from
what is in cero
- Been trying to find a sane answer for dns-sd support and haven't found one.

I will be returning to the US a bit early (tomorrow) and hope to gain
a week to solidify cero some more towards getting towards an honest
beta. But: If you are happy with previous dev builds I don't think
there is reason to use this one.

h2. 3.10.15-5 - 14Oct2013

totally untested. I will be back in front of a router in the yurtlab
monday morning  PDT.

+ resync with openwrt
- revert back to dnsmasq 2.66 (openwrt head)

Judging from the conversation it sounds like the dnsmasq bug may well
not be the latest dnsmasq at all! but a modern openwrt not interacting
with the multiple devices correctly. So I've reverted dnsmasq to
openwrt head to test that assumption...

... in the morning. Unless someone beats me to it.


h2. 3.10.17-1 - 20 Oct 2013

+ sync with openwrt
+ dnsmasq 2.67rc4
+ get_cycles() and /dev/random fixes
+ mild firewall changes
+ actually sort of tested
-  sysupgrade still busted
- didn't package the jitter rng

The simple expedient of putting a script in /etc/rc.local to restart
pimd, minissdpd, and dnsmasq 60 seconds after boot appears to get us a
working dhcp/dns on the wifi interfaces once again.

dnsmasq wasn't busted, it was how it interfaces to netifd. the march
down to something deployable resumes with rc4.

This is the first test that I know of, of some of the RNG fixes
upstream, notably the mips code does the right thing with a highly
optimized ""get_cycles()"".

There are two changes to the firewall code

1) There has been a long-standing error in not blocking port 161
(snmp) from the outside world. It is now blocked by default.

Although I am not aware of any exploits of this (besides the
information leakage) I would recommend blocking this port by default
on your existing builds, also, or disabling the snmp daemon entirely
if you do not use it.

2) Usage of the ""pattern matching syntax"" on various firewall rules.

Instead of 3 rules for se00,sw00,sw10, and 4 for gw00,gw10,gw01,gw11
there are now 1 rule for s+ and one rule for gw+

This does not show up in the web interface correctly. I'd also like to
get to a more efficient rule set for the blocked ports, perhaps with
ipset...

...

It's sort of my hope that with these fixes that the march towards a
stable release can resume, and we get some fresh shiny new bugs out of
this.

Upcoming next are a revised version of pie, more random number fixes,
and I forget what else.

h2. 3.10.17-2 - 20 Oct 2013

- lighttpd didn't work

h2. 3.10.17-3 - 21 Oct 2013


+ this fixes the lighttppd bug noted in -2.
+ has support for signed packages
+ better random support
+ tested long enough to check for the -2 regression
+ Added (slow implementation of) port-mirroring http://code.google.com/p/port-mirroring/

- doesn't do https yet
- still abuses rc.local for starting up late daemons

Also - git 378abc says “Added support for port-mirroring via iptables”

h2. 3.10.17-5 - 30 Oct 2013

3.10.17-5 has the ""final"" version of cisco's pie, the ""final"" version
of dnsmasq 2.67, and imho was finally feature complete.

regrettably it still has the sysupgrade bug and a bug was found in
dnsmasq that has not been fully addressed yet, and I haven't had the
chance to evaluate the differences between this version of pie and the
last.

It seems wise to stick with 3.10.17-3 for now unless you specifically
want to play with pie.

h2. 3.10.17-6/	01-Nov-2013 18:44 	- 	 

+ resync with openwrt
+ dnsmasq 2.68test1
+ pie v3 (as submitted to the netdev list)
- no sysupgrade fix
- dnsmasq still restarted via /etc/rc.local

h2. 3.10.18-1/	10-Nov-2013 14:47 	

Not sure what the changes were, but it seemed to work better

h2. 3.10.21-1/	01-Dec-2013 17:05 	- 	 

This is nothing more than a resync with openwrt and a bugfix for
dnsmasq. It is completely untested.

+ fresh merge with openwrt
++ bunch of ath9k fixes
+ update to dnsmasq 2.68rc4 (fixes cname and a few other bugs)

- haven't found time to address http://www.bufferbloat.net/issues/436
   plan to update the machine involved to this version.
   hope to get more reports from the field. ? Would like to find someone
   with comcast ipv6 to try this on....

- the /sbin/mount bug explanation sounded plausible but haven't tried it
   will do so shortly

- have several reports of a successful ""fragmentation?"" crash attack
  in openwrt in general, but no details.


h2. 3.10.21-2/	14-Dec-2013 11:23 	- 	

? 

h2. 3.10.23-1/	11-Dec-2013 10:31 	- 	 

The upcoming 3.10.23-1 development release has a refresh of mac80211,
and a bug fix related to multicast, so I have some hope for it.

It has also the latest dnsmasq 2.68 (which fixes a bug in cname
handling in particular), and also pie v3 but I am (as usual) not in a
position to test it right now.

It is my hope that now that the bug happens a lot we can track it
down. Or, that it's fixed. :)

I just put that release up at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.23-1/

It does not have the updated aqm-scripts code and gui (sorry
sebastian), nor the pie v4 drop that just got rejected for kernel
mainline. I'll try to do a respin this weekend with those, and poke
harder at the dma tx issue after I get back in the lab. Thoughts
towards being able to isolate the cause and minimize the effect are
welcomed - it's one of the biggest barriers to declaring a stable
release at this point!

h2. 3.10.24-1/	13-Dec-2013 12:45 	

Build city is now London (not sure where transition happened)

I have applied the patch to the next build of cerowrt-3.10.24-1 
(see https://lists.bufferbloat.net/pipermail/cerowrt-devel/2013-December/001734.html ) for
the wndr3700v2 and 3800 which will be here when the build completes:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.24-1

I have folded this [patch] into cerowrt-3.10.24-1. Note that in addition to
this problem the last couple builds have been testing dnsmasq 2.68
which may have also broke at the same time, and I am far from the
yurtlab right now so I am unable to test before sunday. (use fixed ip
addrs if it's still busted)

New settings in AQM tab for:
- Advanced configuration (allows you to choose queueing discipline and associated setup script)
- Linklayer Adaption mechanism (allows you to choose between none, htb-private, and tc-stab, and then set associated parameters)

h2. 3.10.24-5/	16-Dec-2013 12:45 	

+ hopefully nasty interface initialization bug fixed
http://www.bufferbloat.net/issues/437
+ dnsmasq 2.68
+ pie v4
+ latest AQM & AQM GUI code
+ TSQ fix (part of 3.10.24)
+ package signing enabled by default

- I can get a DMA tx error out of it
- untested as a final set of commits because I've been at it all day
and I turn into a pumpkin at midnight
- I still haven't looked at the mount-utils bug (does it mount ext4?
btrfs? do fsck without that package?)

h2. 3.10.24-7/	22-Dec-2013 

+ latest ""AQM"" code (thx Sebastian!)
+ fix for the major kernel trap (thx Robert!)
+ babels src routing support by default (thx Matthieu & babel team!)
+ dnsmasq reload fixes (thx jow!)
+ resync with openwrt (thx #openwrt)
+ Fix for WMM mode in wifi (old patch accidentally dropped)
+ quagga still available as a separate package

- untested as a whole (only in pieces)
- There may be more kernel traps lurking
- babels doesn't redistribute /27s for some reason (and there is no src
specific routing support in the scripts as yet, either)
- I chickened out and didn't remove the dnsmasq restart from rc.local
- Still working on ipv6  stuff (I did test a HE tunnel, which, after
 disabling 6relayd and uncommenting everything in /etc/dnsmasq.conf
 ""just worked"")

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.24-7/

But I expect I'll get another one out before the new year.

I'd like to settle on some name to replace ""AQM"" over the holiday.

_NB:_ This build didn't work well, and was moved to a ""bad"" directory on the download page

h2. 3.10.24-8/	24-Dec-2013 

+ committed, tagged and pushed
+ AQM renamed to ""SQM""
+ fixed boo tup problems in -7 - busybox config had changed in openwrt (thx toke!)
+ latest ""SQM"" code (thx Sebastian & Toke!).
+ ICMP is now deprioritized (helps vs ping floods and sweeps. hopefully)
+ fix for the major kernel trap (thx Robert!)
+ babels src routing support (thx Matthieu & babel team!)
+ babels distributes all routes (ipv6 and ipv4) on all interfaces its enabled on
+ dnsmasq reload fixes (thx jow!)
+ resync with openwrt (thx #openwrt)
+ Fix for WMM mode in wifi (old patch accidentally dropped). VO queue is effectively disabled now.
+ quagga still available as a separate package
+ DMA tx error hopefully gone
+ Packages signed by default
+ Portions tested by all you wonderful users

- untested as a whole (only in pieces)
- There may be more kernel traps lurking - there are several thousand on boot, but I was unable to trigger any
- I chickened out and didn't remove the dnsmasq restart from rc.local
- Still working on ipv6  stuff (I did test a HE tunnel, which, after disabling 6relayd and uncommenting everything in /etc/dnsmasq.conf ""just worked"")
- STILL haven't got around to fixing the mount utils error in sysupgrade
- SQM doesn't start on boot right

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.24-8/

IMPORTANT NOTES 1: If you have an aqm setting you've backed up - the filename has changed so you will need to copy it sqm and change your file to refer to package sqm. Better to recreate from scratch...

2) and there is some sort of race on first boot that stops the sqm script from running. (probably module insertion) you will need to toss a /etc/init.d/sqm restart into /etc/fixdaemons to fix that. Something more robust is needed. It IS restartable from the gui, but...

I expect I'll get another cero out before the new year. The biggest problem I see is that I can't get ipv6 from comcast to work. As to that being cero (6relayd?) or this crappy cable modem, don't know. Need to setup a dhcpv6 server to test it. I'd also really like to get mosh to work (I have an ipv6 enabled version in my github), to poke into the upnp issues with apple boxes, and add https support to the gui (now that all the random number fixes have stablized) 

In looking at traffic the majority incoming from comcast appears to have diffserv stomped on, so I think an option for squashing inbound diffserv would be good. (or there is some other problem that has simple.qos mostly using the background htb bucket)

Also high on my list is figuring out how to use babels to let me setup ipv6 native, ipv6 tunneled and 6to4 all at the same time, and have it get routed properly.

the bad 6relayd interaction with dnsmasq has to be resolved somehow. I'm not sure to what extent the features of dnsmasq and 6relayd intersect. I keep just disabling it and enabling /etc/dnsmasq.conf. I'd like to get 6relayd to work to see what it does...

Any other outstanding issues that are major? One thing that has really become apparent has been the need for a comprehensive test suite...

I would still be hesitant to inflict this on spouses and family on christmas morning, but a Merry Christmas to all, and to all a good Net!

h2. 3.10.26-7/	21-Jan-2014

This is a special release intended only for comcast users with ipv6
capable modems and CMTSes.

NOTE: If you are running any form of tunneling for ipv6 (e.g. hurricane)
do NOT try this release, as it breaks badly.

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/comcast/3.10.26-7/

I strongly recommend all cerowrt users on comcast, upgrade.[1]

If you are on comcast and dare not upgrade to this, comment out these
lines in /etc/config/network

#config interface ge01 # wan6 on some release.
#        option ifname   @ge00
#        option proto    dhcpv6
#       option 'broadcast' '1'
#        option 'metric' '2048'
#        option 'reqprefix' '60'

and reboot to disable dhcpv6 on the external interface entirely.

I have been having flashbacks to the IPX/SPX transition... but it
really did bring a tear to my eye to finally have ipv6 connectivity
for the first time, native. And to see no real difference in RTT
between ipv4 and v6.

http://snapon.lab.bufferbloat.net/~d/bev/comcast_native_ipv6/

Oh brave new world that may have new protocols in it.

A bunch of other stuff landed in cero, and if you are not tunneling,
and your spouse and family are willing, you can try:

+ openwrt sync from head
+ RA spamming filter stopping mega firewall reloads on comcast ipv6 -
thx steven barth!
+ switch from dnsmasq to using odhcpd for ipv6 RAs (thx #openwrt!)
+ Comcast ipv6 actually tested by me
+ GUI is now https - thx sebastian! (we still have some work left here)
   For snowden points, it also does perfect forward secrecy.
+ GUI has selectable skins (pick one, any one)
+ SQM starts correctly on boot and other restarts
+ SQM now scales better to higher rates
+ updated on-board documentation ( example:
http://cero2.bufferbloat.net/cerowrt/index.html )
+ updated uftp, ccnx, new libnettle package (for dnsmasq 2.69) - thx
stephen walker
+ sysupgrade fixed

on the minus side

- We still have some timing problems in picking up the RAs,
particularly from wifi.
  If you don't get ipv6 addresses on your wifi client after a fresh
boot of cero,
reconnect the wifi client. After cero is fully booted. and has
dhcpv6-pd'd addresses, you'll get them. Usually.

- bcp38: didn't get 'round2it src/dst routing solves half of it
- updated shaperprobe, ditg, same
- HT40+ DOES appear to be NOT working. (this has been the case for a while)
- Hurricane electric ipv6 tunnels are *badly broken* as in *will
disable your router* with a zillion extra processes.

a huge change in openwrt made saturday was a switch to source specific routing,

e.g, if you have two ipv6 providers, (or a vpn, and so on)
stuff from source A will go out the right destination for destination A,
and stuff from source B will go out the right destination for
destination B. At least in theory.

so you will see ""from"" routes.

root at cerowrt:~# ip -6 route
default from :: via fe80::201:5cff:de41:b841 dev ge00  proto static  metric 1024
default from 2001:E:L:I:D:E:D:Z via fe80::201:5ccf:fe41:b841 dev ge00
proto static  metric 1024
default from 2601:X:Y::0::/60 via fe80::201:5ccf:fe41:b841 dev ge00
proto static  metric 1024
2601:X:Y:0::/64 dev gw00  proto kernel  metric 256  expires 345262sec
2601:X:Y:1::/64 dev gw10  proto kernel  metric 256  expires 345262sec
2601:X:Y:2::/64 dev se00  proto kernel  metric 256  expires 345262sec
2601:X:Y:3::/64 dev sw00  proto kernel  metric 256  expires 345262sec
2601:X:Y:4::/64 dev sw10  proto kernel  metric 256  expires 345262sec
unreachable 2601:X:X:0::/60 dev lo  proto static  metric 2147483647  error -128

I figure there is much work to be done to get things like ipsec and openvpn
and bird/quagga/babeld to work well again, but source/dest routing was
desparately needed, so...

[1] All my testing was done on an ARRIS TM822G cablemodem. (I have a profoundly
low opinion of several other cablemodems, notably the technicolor...)
There are a few other testers on other cablemodems, please report
in...

I return now to my regularly scheduled workweek from last wednesday.
Share and enjoy.

h2. 3.10.28-14/19-Feb-2014

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.28-14/

+ all known instruction traps killed
+ build almost entirely replicatable now
+ package set almost equivalent to pre 3.10.28 releases
+ squid added as an optional package
+ dnssec support for dnsmasq enabled by default
+ ohybridproxy, mdnsresponder, mdnsd packages optional, not very usable
  frankly, sorting this out is going to take a meeting at ietf homenet
+ ipv6 tunneling at the same time as native fixed
+ multiple routing bugs squashed
  (but not clear if default routes are right)
+ pie v4 and ns2/Xfq_codel re-incorporated
+ some sctp support added
+ pimd apparently fixed (tested with uftp, pimd -r)
+ fixdaemons script obsoleted
+ upnpd and natpmp hopefully mostly fixed
+ usb filesystems tested
+ gpsd 3.10 (pushed to openwrt also)
+ sysupgrade was fixed a few releases back
  (please use sysupgrade -n on this release and get a fresh config)
+ jffs2 version produced (untested)

A huge thanks for the timely intervention by multiple googlers in
donating some badly needed compute resources. A thanks also to
Sebastian for some new SQM work, Gabor Juhos for finding the last
instruction traps (and blogic/cyrus for fixing it), Simon Kelly for
continuing to make dnsmasq great(er), Toke for beating up dnssec,
#openwrt, #bufferbloat...

... and all you lovely, patient, users.

The negatives are few, minor, but pesky.

- package signing still broken
- could use an update to shaperprobe for mlab support
- No nsec3 support in dnssec
- probable issues with ntp time fetching verses dnssec
- no procd support for babeld
- no bcp38
- concerned about missing usb and 3g device functionality
  anybody got a HUWEI device?
- if you have dns issues please share them here.
  dnssec can be disabled via commenting out two lines
  we also still have issues in using dns with multiple
  upstreams. Fixes in pipeline.
- concerned about other source specific routing issues
  particularly interop with tinc, openvpn and strongswan,
  and what happens when interface ipv6 addrs change
- need to benchmark and improve wifi some more
- should probably switch to pre-compiling luci web interface
- haven't looked into ht40+ issues (HT20 is pretty good)
- needs to stay UP for a while before I'm willing to freeze

Not a lot of this really matters...

I'm hoping this is the best release we've had since
the comcast disasters. Go forth and test.

I HAVE NOT tested it as a home gateway. I will try to do so before
saturday. Feel free to beat me to it.

I will try to get out *one* more release before I leave for Britain
next week.

h2. 3.10.28-16/22-Feb-2014
 
Minor release:

latest sqm, some nice fixes for https://dev.openwrt.org/ticket/14092 a
couple fixes for odchpd, etc....

homestretch.

h2. 3.10.32-1/23-Feb-2014

THIS BUILD IS NOT STABLE! 

DON'T get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/bad/3.10.32-1

However, it does contain the following changes:

Tested for all of an hour  (as an interior gateway, not external).

Summary: We still have issues with the 5.x ghz channels

On the plus side, a device (Android nexus 7 2.4ghz) works now when
before it didn't. On the minus side another device (nexus 4 5ghz)
doesn't. No RX is ever seen
on that channel...

To keep my facts straight...

+ sync with openwrt head (with all changes pushed to date)
+ diff added back into system
+ radsecproxy added as an optional package (allows for enterprise wifi
logins securely)
+ updated kernel to current stable
+ SQM does more of the right thing with ""target"" at low bandwidths, has
   a few other tweaks, IMHO is nearly ready to go upstream to openwrt
+ ton of ath9k related fixes

- HT20 is still the default for wireless 5ghz.
+/- package signing is being reworked
+/- source specific dns stuff in there but not integrated with netifd
- no bcp38 still (help?)

I'm hoping we'll soon be able to call the kernel bits of this thing
""stable"". I was hoping we've nailed the last of the major kernel bugs
at this point.
the wifi fixes looked good in theory...

https://dev.openwrt.org/changeset/39688
https://dev.openwrt.org/ticket/14092

NOTE: I'm out of time to work on this for the week, probably.

I will be doing some benchmarking of 3.10.28-16 but have to get on a
plane for england tuesday, have a lecture at Queen Mary college in
London thursday, and ietf
the week following (and another lecture at Cambridge the week after),
still have to pack, write a bunch of things, etc. I hope we get the
mdns hybrid proxy and hnetd issues sorted at ietf.

I'd also like to be able to test things like huawei 3g devices
(commonly available in the EU, but not the US), am not sure all the required
modules are built.

h2. 3.10.32-9/14-Mar-2014

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.32-9/

I've been running this a few days now with no problems.

+ resync with openwrt head
+ upnp (when enabled) works with a yamaha receiver, torrent, and a few
other things
+ with no ipv6, 0 unaligned instruction traps
+ Latest SQM code
+ Latest dnsmasq with dnssec enabled
+ everything rolled up from the comcast releases

- untested with ipv6 as yet
- haven't tried blue-ray
- My nexus-4 still fails to get an address at 5ghz (but felix's
succeeds) so I'm going to assume
there's something wrong with my nexus-4. A newer nexus-7 works
correctly. There were a ton
of noise rejection patches from openwrt head that made it into this release...

It looks like you can increase the dnsmasq cache to 9999 and improve
the hit rate
on the namebench test without impacting memory much. Not that
namebench is representative.
And various test sites for dnssec return green.

In other plus's: a whole bunch of vm boxes were donated by google and
after a bit of fiddling by travis yesterday the build cluster is in
the best shape I've ever seen it.

http://buildbot.openwrt.org:8010/buildslaves

It's my hope that by speeding up build cycle time this will make
openwrt head much more stable,
and thus cerowrt more stable, and speed up the pending barrier breaker
release of openwrt by a lot.

I have kind of taken 2 weeks off from cero and have to look at my
notes for what else is
a barrier to a stable release. As best I recall my last two wishlist
items were procd support
for babeld, and bcp38 support. We have issues still with upnp. hnetd,
and ohybridproxy are entirely untested, and I am fiddling with the
auto target/interval calculation with various methods.

h2. 3.10.32-12/21-Mar-2014

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.32-12/

-  currently untested (but a really small delta from -10 and -11)
+ Resync with openwrt head
+ dnsmasq 2.69rc1 (close approximation thereof)
+ This is the first release with toke's bcp38 code installed (and
enabled by default). I am hoping people simply don't even notice it's
there... (it's off the firewall web page)

Dave Täht writes:

The only problems I foresee happening are:

1) some devices are dependent on double-nat to be configurable -
notably most cable modems depend on 192.168.100.1 to get configured
the first time. I thought about adding that in as a default exception,
and still may.

2) People using this on an interior gateway on a complex network will
need to either disable bcp38 or (preferably) add their rfc1918
network(s) to the exception list on the interior gateway (not on the
external gateway). For example, the yurtlab lives on subnets
172.21.0.0/20.

3) I am not prescient, however, and the only way to find out what
problems will be created is to inflict it on^H^H^H^H^H^H^H kindly ask
the cerowrt userbase to try it.

- Jim Gettys tells me that after a day or so of heavy use of
3.10.32-9, the 2.4ghz radio gets thoroughly wedged after a succession
of DMA tx errors and only a reboot can clear it.

I am in the process of rebuilding the yurtlab and can get back into
heavy wifi testing over the next week or so. In the interim,
please beat up wifi any way you can...

I would really like to get to a stable beta release by the end of the month.

h2. 3.10.34-4/2-Apr-2014

+ resync with openwrt
   they seem to be settling down...
+ Toke's ntp + dnssec stuff
+ Yet Another Patch to try and isolate the wireless hang problem
    that happens to jg every day or so and nearly no-one else.
+ Fix to babel's meshing interfaces
+ dnsmasq updated to head (seems to be stabilizing)
+ Tested for a couple hours

- I am under the impression we haven't enabled ""auto"" for
target and interval yet in SQM.

-There is some stuff in here I don't grok yet like this

Author: cyrus <cyrus at 3c298f89-4303-0410-b956-a3cf2f4a3e73>
Date:   Tue Apr 1 18:52:09 2014 +0000

    odhcpd: add preliminary support for managed DHCPv6-PD and CER-ID

h2. 3.10.36-3/7-Apr-2014

+ Resync with openwrt

  This includes a new hostapd and a new version of wireless-testing

+ update to openssl 1.01g - closes CVE-2014-0160

- totally untested as yet (I am away from my routers and have other
fish to fry right now)

h2. 3.10.36-4/9-Apr-2014

as usual, it can be found at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.36-4/

+ dnsmasq 2.69 with dnssec enabled by default
+ possible workaround for wifi bug #442 in increased qlen_*
+ fix for ipv6 access to https://gw.home.lan:81
+ fresh merge with opewrt
+ update to 2048 bit cert generation
+ fix for openssl heartbleed (fix also in -3) bug
+ tested for an hour
+ change to sqm to basically always use ""simplest.qos"" on inbound

- I'm very, very, very, very, very, very, very, very, very tired.

I really hope this results in a stable cerowrt. Please beat the hell out of it.

I'm already planning a vacation.

h2. 3.10.36-6/19-Apr-2014

as usual, it can be found at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.36-6/

+ felix's wifi patch for bug #442 added
  please break wifi.

+ debloat qlens reduced again to 12 for be and bk wifi queues
+ heartbleed fix from -3 forward

I note that nearly every ""secured""-by-openssl network facing daemon has been
shown vulnerable to heartbleed. The hole in openvpn bit *me*, in
particular. I've updated, rekeyed and re-certified the vpns I have in
place, and you should too for any openvpn servers and clients you have
too.

It was a real PITA for me, and I only had a few boxes on it.

For more details, see: http://community.openvpn.net/openvpn/wiki/heartbleed

For more details on the daemons potentially affected by heartbleed in
cerowrt, openwrt, and others, see the advisory at:

http://www.bufferbloat.net/news/50

+ resync with openwrt
  notably there were updates to netifd, and a fix for a strongswan CVE

+ dnscrypt added as an optional package (thx stephen walker and ""mailjoe"")
+ snort added as an optional package

+/- full dnssec
- upgrade to httping 2.x broke
- no sqm autotuning yet
- neither snort nor dnscrypt tested

If you are not experiencing problems with wifi or with heartbleed
there are few reasons to update to this release.

If you use sysupgrade without a clean reflash, note that the
/etc/opkg.conf file is not re-written in this case, and still points
to the old repository. If you wish to install additional packages 
after an inplace upgrade, you will also have to update /etc/opkg.conf to 
point to the right directory (with the proper version number).

h2. 3.10.40-5/18-May-2014

_No published change notes_

h2. 3.10.40-6/27-May-2014
 
As jg was able to get the darn wifi to hang daily still, and I have several
private reports of wifi issues as well - I spent the last weeks building
up the yurtlab and software to take an indepth look at thrashing
the problem harder and harder. (and then took the holiday off)

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.40-6/

+ refresh to openwrt-head and wireless-testing head
+ ton of fixes in wireless - including a memory leak fix in mac80211,
   and a fix on the ath9k rx path. (thx felix)
+ procd leak fixes
+ dnsmasq 2.71

- untested as yet
- put 802.11e back in (at least for now)

There's also an archer c7v2 build that I think has a working switch now, but
I can crash that ath10k with a sharp look.

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/archer/3.10.40-5/

I will be flashing this stuff much later this afternoon. Feel free to stay clear
til I do...

h2. 3.10.44-3/17-Jun-2014

3.10.44-2 was something of a disaster, so I recut it, and
have been using 3.10.44-3 as my main gw for an hour or so...

Get it at: http://snapon.lab.bufferbloat.net/~cero2/cerowrt/archer/3.10.44-3/

+ all homewrt stuff ripped out
+ huge resync with openwrt head
  among many other things this includes a lot of rework of the wifi drivers
  which may have some influence on bug 442
  update to iproute2
  many updates all across the board
+ sqm fixed to work with modern luci (thx Magnus Olsson!)
+ Rich Brown's cerowrt-scripts installed for the first time by default -
  bug: they need to have -4 or -6 specified for certain targets, and
two of the targets in circulation
  are not responding to netperf (try netperf-west.bufferbloat.net)

  It could use a gui for running the test and displaying the results...

- tested for about an hour...
- it is possible to switch dns servers from odhcp to dnsmasq and vice
versa via changing maindhcp in /etc/config/dhcp (not tested)
+ conflict between avahi-daemon and mdns. mdns is now optional.

- the hnetd, mdns, and mdnsproxy work is still in progress, and these
daemons are built but not installed by default. And installing them
leads to major system instability, so don't do that unless you are
prepared to debug over a serial port and factory reflash.

I would generally discourage everyone from installing this as your
main router, but I know how effective that is. Certainly if you are
experiencing wifi hangs this is worth trying.


h2. 3.10.44-5/24-Jun-2014

[ Get 3.10.44-6, listed below ]

+ resync with openwrt head
  updates to iw, mac80211
  various routing table fixes in netifd

+ dnsmasq 2.71 with mini-gmp and libnettle mainlined
  also moved into procd for better automagic restart
  (this leaves babel as the only major daemon not managed by procd. sigh)

- totally untested (I tested 3.10.44-4 pretty thoroughly though)
 I won't have time for this personally 'til later this week.
- still no answer for bug 442 - I do get bad things to happen on a
ubnt device now
- left off on the homewrt integration for now

I need to get around to submitting sqm upstream again, but am busy on
other tasks.
IETF is coming up, also.

h2. 3.10.44-6/24-Jun-2014

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.44-6/

+ tested for all of 20 minutes - I intend to start a major test series overnight
and beat the c**p out of it and the other devices I'm working on. feel
free to wait to install.

+ fixed the basic problems with the -5 build
+ same update from openwrt head as in -5.

+ mdnsd nuked again (ultimately we're going to switch to it but not now)

  I had to completely strip mdnsd out of the build to make it go away
(./scripts/feeds uninstall mdnsd)

+ natpmp was conflicting with the same (new unified) functionality in
miniupnpd, si I nuked natpmp.
  not clear if better firewall rules are needed yet, the ipv6
functionality scares me.

- see some errors like:

Wed Jun 25 03:29:13 2014 daemon.warn miniupnpd[4119]: SSDP packet
sender 172.21.2.5:34062 not from a LAN, ignoring

+ netserver started again from xinetd

- it looks like the ntp monitoring thing toke did is not working
and/or we're running the wrong ntp now
   but dnsmasq does not run with timechecks enabled by default, so we do
dnssec correctly with invalid time until something sends a sighup

...

I'm really looking forward to the barrier breaker freeze.

I am doing no more builds until I replicate bug 442.

h2. 3.10.48-2/18-Jul-2014

Get it at: http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.48-2/

+ resync with openwrt head
   (it's not clear how to deal with the barrier breaker freeze yet)
+ hopefully a fix for bug #442
 - but only extensive testing will tell
 - we have some rumored negative data so don't get your hopes up
+ sqm improvements
   inbound diffserv squashing works now as does not squashing - you can actually
   see inbound shaping working semi-properly now if you choose to trust
   your inbound connection's classification.
   gui support for above
+ babel improvements
   latest source specific code from the main openwrt-routing repo
   simplification of the default route export mechanism
   diversity routing enabled by default
   link detection enabled by default
   (if you aren't using babel, just disable it)

- wire-incompatible change to babels
  if you are using babels on another router you don't want to upgrade,
you will need to uninstall the babeld package and install the current
babels package from this release. Carefully, as you need to copy over
the new config files (/etc/firewall.user /etc/babeld.conf
/etc/config/babeld) from this release also.

- I am focused on getting ready for ietf, and thus unable to give ipv6
a shakeout without risking my vpn failing while I'm away. I was hoping
to get some time tomorrow to deploy on ipv6. It's looking less likely
by the minute, I'd rather have an extensive test up and running
continuously before I leave of what I got.

- I won't have time for another release for 2 weeks. If it breaks in
some new, crazy way, please revert to a prior version.

h2. 3.10.50-1/28-Jul-2014

+ resync with openwrt head
   In particular felix nailed another wifi bug. I do hope bug 442 is
thoroughly stomped now.
+ bcp38 is now openwrt mainlined (yea toke!)
+ some fixes to the sqm system by sebastian (thx!)

- untested (not in a position to test today, might be tomorrow)
- not against barrier breaker branch (yet)

I have some hope that this is getting close to being a release candidate...

Get it at:

http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/3.10.50-1/

NB: This version was re-built on 28Jul2014 to fix lighttpd config problem. Kept same version number.
","",2014-07-29 15:28:07.307788,47
21,21,3,"h1. Using the Email Interface to Bufferbloat's Redmine

You can administer and respond to tickets in various trackers via electronic mail. 

To respond to an issue, use <pre>[#thenumber]</pre> in the message subject.

Inline patches won't work, but attachments will.

sysadmin@bufferbloat.net - sysadmin issues only, you can open tickets via email
support@bufferbloat.net - goes to the support tracker by default
abuse@bufferbloat.net - currently gatewayed to a mailing list
bb@bufferbloat.net - main tracker - you *cannot* create new issues via this interface but CAN respond to them.

You can override certain attributes of the tracker via email depending on which email address you use. In most cases an Uppercase first letter is required for both the field and the change

Tracker: Support, Bug, Feature
Assignee: email address
Status: New, In Progress, Etc

I don't remember the rest at the moment.","",2011-01-27 08:41:05.60773,1
55,55,3,"h1. Disaster planning

Having all the core servers located in California is double-plus-ungood, given the prospect of earthquakes.

This project is international in scope and should be international in presence. We should be replicating essential services across international boundaries. 

While we've discussed hosting servers in Amsterdam with ISC and at MIT and Georgia tech, we have not made commitments. There have also been offers of virtual servers in the Central US, Canada, France, and elsewhere. 

Given the latency issues between Europe and the West coast, having another data center located on the east coast, rather than the west coast, would be ideal. However, thus far, only a few places on the East coast have native IPv6 support and none have offered to donate bandwidth or rackspace. (GA tech has come closest and has a good relationship with ISC as well)

h2. [[Backups]]

Backups are currently limited to manual intervention, partially because it's hard to get a consistent backup without lvm snapshot support of database backends, and the original batch of servers were not configured for it. 

h2. In case of server loss...

We need to move towards more virtualized servers in general. But having spare hard disks and servers we can bring online in the event of disaster would be good. 

The problem with virtualization and things like EC2 is that in multiple cases we do need to be running services that have access to the bare hardware, and committing to a given virtualization service has a lot of vendor lockin. At present we are evaluating kvm, which will drive the choice of a virtualization service.


h2. In case of earthquake

We need to be able to re-host the services ","",2011-03-19 10:27:06.921771,4
58,58,3,"h1. Anti-spam techniques

h2. Email

Presently all mail is filtered via the mx records through a good email provider.

This technique is working well, but it does slow email processing down. At least one outgoing user has not been able to get mail from the lists email server.

At some point (when things stablize), we'll probably switch to using bufferbloat.net rather than lists.bufferbloat.net for more things.

h2. Web site signup

Obvious spam attempts are being tracked and eliminated (there have been 3 so far). We do NOT offer automatic joining to projects, as it has to be a manual process. Spammy looking logins and email addresses are manually verified first, with either a google lookup for the individual apparently signing up or a verification email.




","",2011-03-19 10:50:12.492851,1
76,76,3,"h1. Sampling via curl

http://curl.haxx.se/libcurl/c/curl_easy_setopt.html","",2011-04-04 08:30:33.806407,1
204,204,3,"h1. Bind9 chroot jail and xinetd

Many implementations of bind9 start it up in a chroot jail, so as to reduce the chance of a root compromise.

Our implementation of bind9 not only starts it in a chroot jail, but runs with reduced privileges AND out of xinetd AND has a configuration file structure mildly better for usage with a web based interface (not that we have one).

The xinetd trick is clever in that incoming requests to port 53 will start bind9 if not already started (or it has crashed).","",2011-09-05 10:48:10.324505,1
129,129,3,"h1. VPN solutions under evaluation

There are multiple VPN solutions for routers and clients in this world.

The double reverse tunnel mechanism currently being used:

* Tunnels TCP/ip over TCP/ip which is very slow
* Does not scale well to hundreds of routers
* Does not support other ports, such as SNMP
* May be somewhat insecure #59
* Keys are embedded in the image #185
* IP addresses are embedded in the image #185
* Doesn't help someone that needs a real VPN

h2. Alternatives

Alternatives exist that may be more robust and flexible, which include the basic ipsec tools, openvpn, strongswan, utunnel, etc

h2. Test plan

Since openvpn is available as an optional package already for bismark it may prove a good starting point. However, strongswan as one example has more support for in-kernel hardware based encryption and an alternative, ipsec-tools, just put out a promising looking, lighter weight release.

# Establish a working certificate authority on [[bismark-testbed:callisto]]
# Establish a server on a x86 and/or bismark router. Currently there is one on [[bismark-testbed:jupiter]], it may make sense to try [[bismark-testbed:metis]]
# Establish working tunnels in the [[bismark-testbed:testlab]] (there is already an openvpn tunnel using psk at teklibre.com)
# Establish working tunnels to other locations
# Test performance, scalability, security and reliability
# What sort of web interfaces are available

At the moment this work is stopped at part 1 - getting a working cert authority - as all the documentation regarding openvpn on openwrt has been obsoleted by a change to openssl and openwrt regarding how to generate client certs properly.

openvpn appeared to be working with psk between [[bismark-testbed:jupiter]] and [[bismark-testbed:aitne]]. Certs are better, as in particular, they can be revoked after a compromise. Theoretically.

h2. Open questions

# Is there a hardware RNG available on the routers that needs a driver? 
# What level of hardware encryption is available 
# How fast can the router hardware go, while encrypting
# How many simultaneous clients can a given server withstand (also useful to know for the ssh solution)
# Can the solution be spread geographically?
# How well can we punch through various port numbers?
# How can we cleanly implement two-factor authentication (a user signs up, THEN goes live)
# How scalable is the solution?
# Is it worth switching at all?

h2. Testers

Evan Hunt
Jim Gettys 
Dave Taht
Paul Royal
","",2011-05-27 19:18:55.061191,14
54,54,3,"h1. Coping with crashes

h2. Servers at ISC.org

In the event of a server at isc.org becoming unreachable or crashing, you can email hands@isc.org with the specific information. Note that you have to tell them what server it is, exactly, not referred to by alias. 

h3. shipka.bufferbloat.net

h3. huchra.bufferbloat.net

h3. siwa.bufferbloat.net

If you say the magic phrase ""outlet 2 on pdu14.sql1"" when emailing hands@isc.org, that lets them do it from off-site.

h3. toutatis.teklibre.com

managed by d@taht.net (dave.taht@gmail.com if it is toast)

h2. Servers elsewhere

Mass:

h3. backup.bufferbloat.net

managed by jg@freedesktop.org


","",2011-04-16 22:15:49.793773,4
115,115,3,"h1. CAPETOWN INSTALLATION GUIDE

It would be a good idea to print out these instructions before proceeding.  If you are in the first pilot deployment in Gary Marsden's lab, chances are we are giving you a router that has already been flashed with Bismark firmware, so you can proceed to Step 1 (""Configuring and Installing the Router"") below.

h2. Step 0. Flashing the router

If you are not installing a preflashed [[Capetown]] release of the router hardware, please see the [[Capetown flashing instructions|flashing instructions]] for how to install the Capetown Bismark build on your [[Wndr3700v2]] Router.

h2. Step 1. Configuring and Installing the Router

# *Power on your router.*  The router should boot in under two minutes.  The router itself comes up on 192.168.42.1.  The router serve IP addresses on the 192.168.42.0/24 network by default. (see [[why .42]]?)
# *Connect to your router.*  Plug in a laptop or computer to one of the 4 LAN ports on the router, and refresh your laptop/computer's DHCP IP address.  Alternatively, connect via wireless by setting your SSID to ""BISMARK"" (no SSID passowrd).  Your machine should get an IP address from the 192.168.42.0/24 subnet.
# *Configure your router's default password.*  In your web browser, go to the router configuration screen at http://192.168.42.1:81 (see also [[why 81]]?)  Enter in a new password for the router. *Write this password down somewhere.* The login will be ""root"", and the password that you set should be something difficult.
# *Secure your wireless interfaces*  Go to the _Network->Wireless_ configuration page, and change the SSIDs of the various interfaces to suit your liking. (See also [[Capetown FAQ|FAQ]]) Enable WPA2 encryption on the LAN interfaces, and if you wish your guest interfaces to be secured, do the same there, too. Choose unique passwords for the lan and guest interfaces.
# *Set your country.*   If you are not in the US, please set your country for both radios to the correct country in order to ensure regulatory compliance.
# *SAVE and APPLY.*  At the bottom part of the Web interface, _save_ and _apply_ the changes (these are two distinct steps).
# *Reboot the router.*  You will need to reboot the router for SSH and the Internet to come up. Reboot and connect the WAN interface to the Internet (i.e., to your DSL or Cable modem). Wait a few minutes, and refresh your laptop/computer's DHCP address. 

Hopefully at this point you are on the Internet.

Important Configuration Notes: 
* The wireless interfaces are configured as *open* (no password) by default.  They are also set to the *United States regulatory wireless spectrum* by default. You should address these issues before connecting the router to the Internet.
* [[QoS]] is turned *ON* by default.(see [[Capetown FAQ|FAQ]]). You should address this issue after connecting to the internet.


h2. Step 2. Fine-tuning your QoS Settings

By default, the Cape Town Bismark Router is configured for slow Internet connections. See the [[Capetown FAQ|FAQ]] for how to set it appropriately for your network connection. This is a very important step!

h2. Step 3. Register for the Bismark Study

You can sign up to receive updates for the Bismark project at the ""Project BISMark Web site"":http://projectbismark.net

h2. Changing your default IP addresses

If you wish to use other default IP addresses, now is the time to change them. (We recommend against using 192.168.0.1 and 192.168.1.1 for historical reasons). Go to the _Network_ screen on the router and change to suit. By default the interfaces come up on the 192.168.42.1, 192.168.43.1 and 192.168.44.1 addresses. 

_Important:_ If you change the default IP address, your Web interface will change at this point to be whatever-you-chose:81 after doing a save and apply, and you will need to change the url in your browser accordingly.

h2. Thanks!

You should now be on the Internet using the latest and greatest code from the [[bismark:Wiki|Bismark]] Project, the [[cerowrt:Wiki|Bufferbloat Cerowrt]] project, and ""OpenWrt"":http://www.openwrt.org .

We hope that your experience will be exceptional. Please send us your feedback and comments by registering and posting to the ""bismark-users"":http://lists.noise.gatech.edu/listinfo/bismark-users mailing list. You can also file bugs and feature requests in our ""Bug Tracker"":http://www.bufferbloat.net/projects/bismark/issues

See also the [[Capetown FAQ|FAQ]], the [[CAPETOWN RELEASE NOTES]] and [[Cool things to do with your Bismark router]].","",2011-09-05 11:21:47.363078,21
118,118,3,"h1. Wiki

[[Dashboard Requirements Document]]

[[Dashboard Web Interface Reports Required]]","",2011-05-18 15:49:15.460985,1
219,219,3,"h1. CeroWrt 1.0 rc8 (preliminary plan)

INCOMPATABLE CHANGE TO 172.30.42.1 as the main gw interface
Move to qdiscs throughout
Conversion to using a wireless-n specific wireless interface
TOS setting as per bug #249 (Comprehensive QoS settings?)
Switch to vlans throughout?
HT40+ mode on 5ghz, channel 36
Web10g support decision - keep or kill?
Tcp_low_latency explored vs tcp non-low latency
Syn/Synack queue optimization?
vlan priority harmonized with 802.11e priority?
Independently buildable (perl)
ECN iptables changes 
Elemental diffserv support
more support for the [[cosmic background bufferbloat detector]]

Fixes for bugs #240, #252, #242, #233, #239, #98, #113, #262 - 

And see also ""roadmap"":http://www.bufferbloat.net/projects/cerowrt/roadmap for bugs in the queue","",2011-11-25 06:02:03.468366,1
27,27,3,"h1. Drafts


hdescription+xml"" href=""http://wordpress.com/opensearch.xml"" title=""WordPress.com"" />
<style type='text/css'><!--
body { background: url(""http://s0.wp.com/wp-content/themes/default/images/kubrickbgcolor.gif?m=1273203575g""); }
#page { background: url(""http://s0.wp.com/wp-content/themes/default/images/kubrickbgwide.gif?m=1273203575g"") repeat-y top !important; border: none; }
#header { background: url(""http://s0.wp.com/wp-content/themes/default/images/kubrickheader.gif?m=1273203575g"") no-repeat bottom center; }
#footer { background: url(""http://s0.wp.com/wp-content/themes/default/images/kubrickfooter.gif?m=1273203575g"") no-repeat bottom; border: none;}
#header { margin: 0 !important; margin: 0 0 0 1px; padding: 1px; height: 198px; width: 758px; }
#headerimg { margin: 7px 9px 0; height: 192px; width: 740px; }
#headerimg h1 a, #headerimg h1 a:visited, #headerimg .description { color: ; }
#headerimg h1 a, #headerimg .description { display:  }

	--></style><style type=""text/css"">.recentcomments a{display:inline !important;padding: 0 !important;margin: 0 !important;}</style>
<meta name=""application-name"" content=""jg&#039;s Ramblings"" /><meta name=""msapplication-window"" content=""width=device-width;height=device-height"" /><meta name=""msapplication-tooltip"" content=""Jim Gettys&#039; ramblings on random topics, and occasional rants."" /><meta name=""msapplication-task"" content=""name=Subscribe;action-uri=http://gettys.wordpress.com/feed/;icon-uri=http://s1.wp.com/i/favicon-stacked.ico"" /><meta name=""msapplication-task"" content=""name=Sign up for a free blog;action-uri=http://wordpress.com/signup/;icon-uri=http://s2.wp.com/i/favicon.ico"" /><meta name=""msapplication-task"" content=""name=WordPress.com Support;action-uri=http://support.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"" /><meta name=""msapplication-task"" content=""name=WordPress.com Forums;action-uri=http://forums.wordpress.com/;icon-uri=http://s2.wp.com/i/favicon.ico"" /></head>

<body>
<div id=""page"">


<div id=""header"">
	<div id=""headerimg"" onclick="" location.href='http://gettys.wordpress.com';"" style=""cursor: pointer;"">
		<h1><a href=""http://gettys.wordpress.com/"">jg&#039;s Ramblings</a></h1>
		<div class=""description"">Jim Gettys&#039; ramblings on random topics, and occasional rants.</div>
	</div>

</div>
<hr />

	<div id=""content"" class=""widecolumn"">

	
		<div class=""navigation"">
			<div class=""alignleft"">&laquo; <a href=""http://gettys.wordpress.com/2010/12/09/bufferbloat-and-congestion-collapse-back-to-the-future/"" rel=""prev"">Bufferbloat and congestion collapse &#8211; Back to the&nbsp;Future?</a></div>
			<div class=""alignright""><a href=""http://gettys.wordpress.com/2010/12/17/red-in-a-different-light/"" rel=""next"">RED in a Different&nbsp;Light</a> &raquo;</div>

		</div>

		<div class=""post-360 post type-post status-publish format-standard hentry category-bufferbloat category-networking category-puzzle clear"" id=""post-360"">
						<h2>Mitigations and Solutions of Bufferbloat in Home Routers and Operating&nbsp;Systems</h2>
			<small>By gettys</small>

			<div class=""entry"">
				<p><a href=""http://gettys.files.wordpress.com/2010/10/jigsawfish2.png""><img class=""alignright size-thumbnail wp-image-114"" title=""jigsawfish2"" src=""http://gettys.files.wordpress.com/2010/10/jigsawfish2.png?w=90&#038;h=82"" alt="""" width=""90"" height=""82"" /></a>As discussed <a title=""Mitigations versus Solutions of Bufferbloat in Broadband"" href=""http://gettys.wordpress.com/2010/12/08/bufferbloat-mitigations/"">several days ago</a> we can mitigate (but not solve) broadband bufferbloat to a decent, if not ideal, degree by using bandwidth shaping facilities found in many recent home routers. Unfortunately, life is more complicated and home routers themselves are often typically at fault (if you find a recently designed home router that works right, it may want to be enshrined in a museum where its DNA and evolution analyzed, and its implementors both admired for their accomplishment and despised, for not telling us about what they discovered. Complete robust solutions, unfortunately, will be difficult in the short term (wireless makes it an &#8220;interesting&#8221; problem) for reasons I&#8217;ll get to in this and future posts.</p>

<p>Confounding the situation further, your computer&#8217;s/ smartphone/ netbook&#8217;s/ tablet&#8217;s operating system may also be suffering from bufferbloat, and the its severity may/almost certainly does depend upon the hardware. Your mileage <em>will</em> vary.</p>
<p>You may or may not have enough access to the devices to even manipulate the bufferbloat parameters. Locked down systems come back to bite you. But again, you can probably make the situation much better for you personally, if you at a minimum understand what is causing your pain, and are willing to experiment.</p>
<h2>Conclusions</h2>
<p>Since any number you pick for buffering is guaranteed to be wrong for many use cases we care about, the general solution will await operating systems implementers revisiting buffering strategies to deal with the realities of the huge dynamic range of today&#8217;s networks, but we can mitigate the problem (almost) immediately by tuning without waiting for nirvana to arrive.</p>
<p><span id=""more-360""></span></p>
<p>As an end user, you may suffer in your home router or your computer anytime when the bandwidth (&#8220;goodput&#8221;)  you get over  a wireless hop is less than the provisioned and actually provided broadband bandwidth.  This is why I immediately saw problems on the Verizon FIOS wireless routers (the traces show both problems on the wired and wireless side; but the wireless side is much worse). On that typically symmetric service at my in-law&#8217;s FIOS 20/20 service, 802.11g is usually running more slowly than the broadband connection.  I also see bufferbloat regularly at home on my router using my Comcast service, which I recently changed to 50/10 service; there are parts of my house where it is now easy to get enough insufficient bandwidth over wireless. Bufferbloat is nothing if not elusive.  It&#8217;s been like hunting the <a title=""Will o the wisp wikipedia entry"" href=""http://en.wikipedia.org/wiki/Will-o'-the-wisp"" target=""_blank"">will o&#8217; the wisp</a> on wireless, until I had a firm mental grasp on what was happening.</p>

<p><em>Remember: you see bufferbloat only on the buffers adjacent to the bottleneck in the path you are using.  Buffers elsewhere in the path you are probing remain invisible, unless and until they become the bottleneck hop.</em></p>
<h2>Mitigating the inbound home router wireless bufferbloat problem</h2>
<p>Whenever the bandwidth from your ISP exceeds that of your wireless &#8220;goodput&#8221;, you&#8217;ll likely see bufferbloat in your home router (since the bottleneck is the wireless hop between you and the router). Full solutions to the problem are beyond the scope of today&#8217;s posting (coming soon), and will require some research, though ways forward exist.  In short, complete solutions will require active queue management (e.g. RED or similar algorithms), since the mitigation strategy of bandwidth shaping to &#8220;hide&#8221; the buffer we showed in a previous post will not lend itself well to the highly variable bandwidth &amp; goodput of wireless. Outbound, it is very likely  in your operating system where the bloat will occur (since your router is generally connected to the broadband gear either internally (as in the FIOS router I experimented with) or via a 100Mbps or 1Gps ethernet. You&#8217;ll most likely experience this, as one of the replies to this posting points out, when uploading large files, doing backups, or similar operations. I only realized OS bufferbloat occurs after I started investigating home routers and did not get the results I expected immediately. With some disbelief, I got confirmation with the simple experiments I reported on.</p>
<p>If you can &#8220;log in&#8221; to a shell prompt on your wireless router (many are running Linux, and a few have known ways to break into them), or are willing to <a title=""Wireless router firmware projects from Wikipedia"" href=""http://en.wikipedia.org/wiki/List_of_wireless_router_firmware_projects"">install open source firmware on your router</a>, you can go further, by mitigating the excessive buffering in the ways explained below for Linux.  Remember, that this only affects the down stream direction (home router to your laptop). Note that the only one of these open source projects I have found that has close to turnkey classification and mitigation of broadband bufferbloat is <a title=""Gargoyle router wikipedia entry"" href=""http://en.wikipedia.org/wiki/Gargoyle_Router_Firmware"" target=""_blank"">Gargolye</a>. Paul Bixel has worked hard on mitigating broadband bufferbloat, but has not attempted wireless bufferbloat mitigation. <a title=""Mitigations versus Solutions of Bufferbloat in Broadband"" href=""http://gettys.wordpress.com/2010/12/08/bufferbloat-mitigations/"">As noted in a previous post</a>, many mid to high end  home routers have enough capability to mitigate broadband bufferbloat.</p>

<p><span style=""font-size:26px;font-weight:bold;"">OS Bufferbloat Mitigation</span></p>
<p>As explained in <a title=""Home Router Puzzle Piece One - Fun with your switch"" href=""http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/"">fun with your switch</a>, <a title=""Home Router Puzzle Piece Two - Fun with wireless"" href=""http://gettys.wordpress.com/2010/12/02/home-router-puzzle-piece-two-fun-with-wireless/"">fun with wireless</a>, and the <a title=""The criminal mastermind: bufferbloat!"" href=""http://gettys.wordpress.com/2010/12/03/introducing-the-criminal-mastermind-bufferbloat/"">criminal mastermind</a> postings, and in future blog postings, we have bad behavior all over the Internet, though I focused on the home environment in most of the postings so far. In all of the common operating systems, there is at least one, if not two places (and maybe more undiscovered) where bloat has been demonstrated. Please go find and fix them. All OS&#8217;s therefore suffer to some extent or another.</p>
<p>Your most immediate mitigation may be to literally move either your laptop or your home router to where the bandwidth equation is different, shifting bufferbloat to a (possibly) less painful point.  But there are also potentially some quick mitigations you can perform on your laptop, and as some others in replies to previous postings have demonstrated, that are more general.  The first order mitigation is to set your buffering in your operating system to something reasonable, as explained below (details of the Linux commands can be found in &#8220;<a title=""Home Router Puzzle Piece One – Fun with your switch"" href=""http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/"">fun with your switch</a>&#8221; and &#8220;<a title=""Home Router Puzzle Piece Two – Fun with wireless"" href=""http://gettys.wordpress.com/2010/12/02/home-router-puzzle-piece-two-fun-with-wireless/"">fun with wireless</a>&#8220;.</p>

<h2>Linux</h2>
<p>I&#8217;ll discuss Linux first, as in my testing, it has problems that may affect you even if you don&#8217;t run Linux, as Linux is often used in home routers. But then again, as I use Linux for everything, there may be more buffers on other operating systems that I have not run into; my testing on Mac and Windows has been very small relative to Linux.  <em>We all live in a glass house; don&#8217;t go throwing stones.  Be polite.</em> Demonstrate real problems. <a title=""Bufferbloat and congestion collapse – Back to the Future?"" href=""http://gettys.wordpress.com/2010/12/09/bufferbloat-and-congestion-collapse-back-to-the-future/"">But be insistent, for the health of the internet.</a></p>
<p>Note the total amount of buffering causes TCP and other congestion avoiding protocols indigestion: in Linux&#8217;s case, it is both the device driver rings (which I believe I see in other operating systems) and the &#8220;transmit queue&#8221; buffering. I gather some of the BSD systems may have unlimited device driver buffering.  Some hardware may also be doing further buffering below the register level in smart devices (I susped the Marvell wireless device we used on OLPC might, for example).</p>

<p>As discussed in <a title=""Home Router Puzzle Piece One – Fun with your switch"" href=""http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/"">fun with your switch</a>, I detected two different sources of excessive buffering in Linux, both typically resulting from device drivers (therefore shared in common with other operating systems). Device drivers hint to the operating system a &#8220;transmit queue length&#8221;, which is controllable on Linux by use of the &#8220;txqueuelen&#8221; parameter settable using the &#8220;ifconfig&#8221; command.  By default, many/most modern ethernet and wireless NIC&#8217;s are telling Linux to be willing to buffer up to 1000 packets. In my experiments on (most) of my hardware, since the ethernet and wireless rings are both at a minimum quite large, I could set txqueuelen to zero without causing any immediate problems.</p>
<p><em>But note that if you set buffering to zero in both device drivers (and the transmit queue), if there is no other buffering you don&#8217;t happen to know about, your system will just stop transmitting entirely; so some care is in order.  This depends on the exact details of the hardware. </em>Buffering is necessary; just not the huge amounts currently common, particularly at these speeds and low latencies.</p>

<p>Also note that many device drivers (e.g. the Intel IWL wireless driver) do not support the controls to set the ring buffer sizes, and at least one device I played with it seemed to have no effect whatsoever (implying buffering present, but no control over the size of those buffers).</p>
<p>A possible reason for the transmit queue (others with first hand knowledge of the history, please chime in), is that on some old hardware, e.g.old  serial devices being used with modems, had essentially no buffering, and you might experience excessive packet loss on those devices.  It may have also been really necessary for performance before Linux&#8217;s socket buffer management became more sophisticated and started to adjusting its socket buffer sizes based on the observed RTT (note that the lower level bufferbloat may be inducing socket bufferbloat and application latency as well, though I have no data to confirm this hypothesis).  At some point, the default value for txqueuelen was raised to 1000; I don&#8217;t know the history or discussion that may have taken place. There are also queues in the operating system required for traffic classification; I haven&#8217;t had time to figure out if that is where Linux implementss its classification algorithms or not; some hardware also supports multiple queues for that purpose. Note this means that many Linux based devices and home routers may have inherited differing settings. Extreme bufferbloat is present on a number of the common commercial home routers I have played with using modern hardware, and the open source routers I&#8217;ve played with as well.</p>
<p>So even though the &#8220;right&#8221; solution is proper queue management on you can tune the txqueuelen and (possibly) the NIC device driver rings to more reasonable sizes, rather than the current defaults, which are typically set for server class systems on recent hardware.</p>
<p>Once tuned, Linux&#8217;s latency (and the router&#8217;s latency) can be really nice even under high load (even if I&#8217;ve not tried hard to get to the theoretical minimums). But un-tuned, I can get many second latency out of both Linux home routers and my laptop, just by heading to some part of my house where my wireless signal strength is low (I have several chimneys that makes this trivial).  By walking around  or obstructing your wireless router, you should be easily able to reproduce bufferbloat in either your router or in your laptop, depending on which direction you saturate.</p>

<p>With an open source router on appropriate hardware and a client running Linux, you can make bufferbloat very much lower  in your home environment, even when bufferbloat would otherwise cause your network to become unusable. Nathaniel Smith in a reply to &#8220;<a title=""Home Router Puzzle Piece Two – Fun with wireless"" href=""http://gettys.wordpress.com/2010/12/02/home-router-puzzle-piece-two-fun-with-wireless/"">Fun with Wireless</a>&#8221; shows what can be done when you both set the txqueuelen and  change the driver (in his case, a one line patch!)</p>
<p><span style=""font-size:20px;font-weight:bold;"">Mac OSX</span></p>
<p>I&#8217;ve experimented on relatively recent Apple hardware: on Ethernet showed what appears to be device driver ring bufferbloat, roughly comparable to Linux.  On my simple test on ethernet on a 100Mbps switch, I observed 11ms latency, roughly, slightly more than Linux which was 8ms on similar vintage hardware in the same comparable test. On Linux, the transmit ring is set to 256, by default, and allowed me to set it as small as 64.  So I hypothesize a similar size buffer in it&#8217;s ethernet driver (and possibly a small buffer in the OS above the driver). As I&#8217;m not a Mac expert, I can&#8217;t tell you as I could on Linux how to reduce the transmit ring size.</p>
<p>I have not tried to pry my son&#8217;s Mac out of his hands for Mac wireless experiments: perhaps you would like to do so with your Mac, or I may get around to the wireless experiment over the holidays. If you do, make sure you arrange the bottleneck to be in the right place (the lowest bandwidth bottleneck needs to be between your laptop and your test system).</p>
<h2>Microsoft Windows</h2>

<p>Experimenting with Microsoft Windows several weeks ago was a really interesting experience.  Plugged into a 100Mbps switch, there was no bufferbloat in the operating system (both Windows XP and Windows 7) on recent hardware.  But neither Windows saturate a 100Mbps switch (you expect to see about 93Mbps on that hardware, due to TCP and IP header overhead).  As soon as we set the NIC to run at 10Mbps, the expected bufferbloat behavior occurred.  Since in my tests, the medium no longer is the bottleneck, it shifts to somewhere else in the path (in my test, there was no bottleneck).</p>
<p>Here&#8217;s what I think is going on and I believe what happened.</p>
<p>With some googling, I discovered on Microsoft&#8217;s web site that Microsoft has bandwidth shaped their TCP implementation to not run at full speed by default, but to run probably just below what a 100Mbps network (I observed mid 80 megabit).  You have to go tune registry parameters to get full performance on Microsoft Windows TCP implementation. There is an explanation on their web site that this was to ensure that multimedia applications not destroy the interactive performance of the system.  I think there is a grain (or block) of truth to this explanation: as soon as you insert big buffers into the network, you&#8217;ll start to see bad latency whether using TCP, UDP or other protocols,  and one of the first places you&#8217;ll notice is the UI interaction between users of a media player and the media server (I&#8217;m an old UI guy; trust me when I say that you start &#8220;feeling&#8221; latency at even 20ms).  Any time they ran Windows on hardware with big buffers, they had problems; certainly hardware  has supported much higher transmit buffers than makes any sense for most user&#8217;s office or home environments for quite a few years. I suspect Microsoft observed the bufferbloat problem and, as a simple mitigation strategy was available to them, took it.</p>
<p>Microsoft does not have control of many/most of the drivers their customers expect Windows to run well on (not true for Mac and Linux), however.  So I suspect that Microsoft and (some of their customers) have a real headache on their hands, only soluble by updates to a large number of drivers by many vendors.</p>

<p>On the other hand, on 100Mbps ethernet, still the most common bandwidth ethernet, both Windows XP and Windows 7  &#8221;just worked&#8221; as you might hope with low latency (of order 1ms even while loaded).  And Windows XP is less likely to induce bloated buffers in broadband, though as bittorrent showed, it still can, and as I&#8217;ll explain in details shortly, recent changes in both web browsers and certain web servers can encourage XP to fill buffers. I have not experimented with wireless.  Please do so and report back.</p>
<p>Alternate explanations and/or confirmations of this hypothesis are welcome.</p>
<p>I do not happen to know the mechanisms, if any, to control driver buffering size on Microsoft Windows, though it may be present in driver dialog boxes somewhere.</p>
<h2>Why in the world does the hardware now have so much buffering, anyway?</h2>
<p>On my Intel Ethernet NIC, the Linux driver&#8217;s ring buffer size is 256 by default: but the hardware goes up to 4096 in size.   That&#8217;s amazingly huge.  I&#8217;ve seen similar sizes on other vendor&#8217;s NIC&#8217;s as well. I wondered why.  I like the explanation that <a title=""Ted T'so's Wikipedia entry."" href=""http://en.wikipedia.org/wiki/Ted_T'so"" target=""_blank"">Ted T&#8217;so</a> gave me when I talked to him about bufferbloat a month ago: it stems from experience he has when he was working for the Linux Foundation on real time. I think Ted is likely right.</p>

<p>It can&#8217;t be for interrupt mitigation; most of your benefit is in the first few packets; similarly for segmentation and reassembly.  Even doing a little transmit buffering can get you into a lot of trouble on wireless, as I&#8217;ll show in a future post. I suppose that interrupt latency could also be a problem on loaded systems, though this seems extreme.</p>
<p>Ted&#8217;s theory is this is a result of the x86 processor&#8217;s <a title=""System Management Mode in Wikipedia"" href=""http://en.wikipedia.org/wiki/System_Management_Mode"" target=""_blank"">SMM mode</a>. To quote Wikipedia: &#8220;<strong>System Management Mode</strong> (SMM) is an operating mode in which all normal execution (including the operating system) is suspended, and special separate software (usually firmware or a hardware-assisted debugger) is executed in high-privilege mode.&#8221;  Ted noted there are motherboards/systems out there which go catatonic for of order one or a few milliseconds at a time; yes, your N processor chip motherboard consisting of C cores each may crowbar to a single thread on a single processor for that length of time.  The BIOS is ensuring your CPU cores don&#8217;t over heat (you might think there should be a way to do this at lower priority for things less time urgent, mighten you?) and important (but not necessarily urgent) tasks. To paper over latencies and hiccups of that length of time at 1 gigabit you indeed need hundreds or conceivably small number of thousands of ring entries. And that&#8217;s the size we see in current hardware.</p>

<p>Unless someone has a better theory, I like Ted&#8217;s.</p>
<h2>The General Operating System Problem</h2>
<p>We now have commodity &#8220;smart&#8221; network devices, that may do lots of features for us, to make the network &#8220;go fast&#8221; (<em>forgetting that for many people, operations/second  and latency trumps bits per second and throughput hands down</em>; performance has multiple metrics of import, not just one).  For example, the devices may compute the TCP checksums, segment the data, and so on; and similarly on the receive side of the stack.  To go fast, we may also be wanting to (and needing to) mitigate interrupts, so the OS doesn&#8217;t necessarily get involved with every packet transfer in each direction, on server systems (but often not on edge systems at all). And, as opposed to a decade ago, we now have widespread deployment of networking technologies that span one or more orders of magnitude of performance, while still only admitting to a &#8220;one size fits all&#8221; tuning.</p>

<p>Here&#8217;s the rub: these same smart device designs are often/usually being put into commodity hardware a generation or two later, and the same device drivers are being used, set up for their use on high end servers.  But the operating environment that hardware is now in is in your laptop, your handheld device or your router, running at low bandwidth, rather than a big piece of iron in a data center, hooked up to a network running at maximum speed.  Rather, it is being used in devices that are being used at a small fraction of their theoretical performance capability.  For example, my gigabit ethernet NIC much more often than not is plugged into a 100megabit switch, <a title=""Home Router Puzzle Piece One – Fun with your switch"" href=""http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/"">with the results I noted</a>. And, of course, I&#8217;m seldom going anything like the speed of a server on my laptop: at most, I might be copying files to a disk someplace, and going of order 100Mbps.</p>
<p>Even more of a problem is wireless: not only is the bit rate of the network not a 100Mbps (for 802.11N), or 20Mbps (for 802.11g), but the bit rate may drop as low as 1 megabit/second.  Remember also that those networks are shared media.  If you have a loaded wireless network, the buffering of the other nodes also comes into play; you may only get 1/10 (or less) of the available bandwidth at whatever rate that wireless network is operating at (and 802.11 likes to drop its speed to maximize distance at the drop of a hat).  I&#8217;ll discuss what happened to OLPC in a future post, though we also had other problems in our mesh network. So the effective &#8220;goodput&#8221; on wireless may easily vary by factors of 100 or more on wireless, presenting even more of a challenge than for ethernet, where typically we face a switched network and a factor of 10 in its performance.</p>
<p>In general, I believe that hardware transmit buffer sizes should be kept as small as possible.  &#8221;As possible&#8221;, will depend strongly upon the network media and circumstances. One of the mistakes here, I suspect, is that the operating system <em>driver</em> implementers, not understanding that transmit and receive are actually quite different situations, set the transmit and receive buffering to the same amount. After all, I&#8217;m never going to lose a packet I haven&#8217;t transmitted yet; it&#8217;s only receive I could have a problem on.  And as I showed previously, <a title=""Whose house is of glasse, must not throw stones at another."" href=""http://gettys.wordpress.com/2010/12/06/whose-house-is-of-glasse-must-not-throw-stones-at-another/"">some packet drop (or use of ECN) is necessary</a> when congested for the proper functioning of Internet protocols, and indeed, <a title=""Bufferbloat and congestion collapse – Back to the Future?"" href=""http://gettys.wordpress.com/2010/12/09/bufferbloat-and-congestion-collapse-back-to-the-future/"">for the health of the Internet overall</a>. And this is indeed be a form of congestion.  Ideally, we should always mark packets with ECN whenever/wherever congestion occurs, no matter where the excessive queues are forming.</p>

<p>And since the network delays are anywhere from almost zero to several hundred milliseconds (for planetary paths), the delay/bandwidth product is also very large, along with the workload of the systems. There is no single right answer possible for buffering: our operating systems need to become much more intelligent about handling buffering in general.</p>
<p>I certainly do not pretend to have a clue as to the right way to solve this buffer management problem in multiple operating systems; but it seems like a tractable problem. That will be fun for the OS and networking subsystem implementers to figure out, and help keep them employed.</p>
<p>The general challenge for operating systems is we want a system which both can run like a bandit in the data center, and also work well in the edge devices. I believe it possible for us to &#8220;have it both ways&#8221;, and to &#8220;have our cake and eat it too&#8221;.  But it will take work and research to get there. In the short term, we can tune for different situations to mitigate the problem.</p>
<h2>Coming Installments</h2>
<ul>
<li>After action report of 802.11 network meltdown at OLPC</li>
<li><a title=""RED in a Different Light"" href=""http://gettys.wordpress.com/2010/12/17/red-in-a-different-light/"">RED in a different light</a></li>

<li>corporate and ISP networks</li>
<li><a title=""Bufferbloat in 802.11 and 3G Networks"" href=""http://gettys.wordpress.com/2011/01/03/aggregate-bufferbloat-802-11-and-3g-networks/"">802.11 and 3g networks</a></li>
<li>where to from here?</li>
</ul>
<h1>Conclusions</h1>
<p>Since any number you pick for buffering is guaranteed to be wrong for many use cases we care about, the general solution will await operating systems implementers revisiting buffering strategies to deal with the realities of the huge dynamic range of today&#8217;s networks, but we can mitigate the problem (almost) immediately by tuning without waiting for nirvana to arrive.
<div class=""snap_nopreview sharing robots-nocontent"">
<ul>
<li class=""sharing_label"">Share this:</li>
<li class=""share-print share-regular""><a rel=""nofollow"" class=""share-print share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/#print"" title=""Click to print"">Print</a></li>

<li class=""share-custom""><a href=""#"" class=""sharing-anchor"">Share</a></li>
<li class=""share-end""></li>
</ul>
<div class=""sharing-hidden"">
<div class=""inner"" style=""display: none;"">
<ul>
<li class=""share-twitter"">
<div class=""twitter_button""><iframe allowtransparency=""true"" frameborder=""0"" scrolling=""no"" src=""http://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fwp.me%2FpfzIQ-5O&#038;counturl=http%3A%2F%2Fgettys.wordpress.com%2F2010%2F12%2F13%2Fmitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems%2F&#038;count=horizontal&#038;text=Mitigations%20and%20Solutions%20of%20Bufferbloat%20in%20Home%20Routers%20and%20Operating%20Systems: "" style=""width:97px; height:20px;""></iframe></div>
</li>
<li class=""share-digg""><a rel=""nofollow"" class=""share-digg share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?share=digg"" title=""Click to Digg this post"">Digg</a></li>
<li class=""share-end""></li>
<li class=""share-facebook""><a rel=""nofollow"" class=""share-facebook share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?share=facebook"" title=""Share on Facebook"">Facebook</a></li>
<li class=""share-stumbleupon""><a rel=""nofollow"" class=""share-stumbleupon share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?share=stumbleupon"" title=""Click to share on StumbleUpon"">StumbleUpon</a></li>

<li class=""share-end""></li>
<li class=""share-email""><a rel=""nofollow"" class=""share-email share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?share=email"" title=""Click to email this to a friend"">Email</a></li>
<li class=""share-reddit""><a rel=""nofollow"" class=""share-reddit share-icon"" href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?share=reddit"" title=""Click to share on Reddit"">Reddit</a></li>
<li class=""share-end""></li>
<li class=""share-end""></li>
</ul>
</div>
</div>
<div class=""sharing-clear""></div>
</div>

								
				<p class=""postmetadata alt"">
					<small>

												This entry was posted  on December 13, 2010 at 5:15 pm and is filed under <a href=""http://en.wordpress.com/tag/bufferbloat/"" title=""View all posts in Bufferbloat"" rel=""category tag"">Bufferbloat</a>, <a href=""http://en.wordpress.com/tag/networking/"" title=""View all posts in Networking"" rel=""category tag"">Networking</a>, <a href=""http://en.wordpress.com/tag/puzzle/"" title=""View all posts in Puzzle"" rel=""category tag"">Puzzle</a>.						You can follow any responses to this entry through the <a href='http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/feed/'>RSS 2.0</a> feed.
													You can <a href=""#respond"">leave a response</a>, or <a href=""http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/trackback/"" rel=""trackback"">trackback</a> from your own site.
						
					</small>

				</p>

			</div>
					</div>

	<div id=""wpl-likebox""><div id=""wpl-button""><a href='http://gettys.wordpress.com/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?like=1&amp;_wpnonce=b1bdd34cdc' title='I like this post' class='like needs-login' rel='nofollow'><span>Like</span></a></div><div id=""wpl-count"">One blogger likes this post.</div><div id=""wpl-avatars""><a href=""http://gravatar.com/webhat"" title=""webhat""><img src='http://0.gravatar.com/avatar/4eacee3eac6699a3050af074bc5d90ed?s=35&amp;d=&amp;r=G' class='avatar avatar-35' alt='webhat' width='30' height='30' /> </a></div></div>
<!-- You can start editing here. -->
	<h3 id=""comments"">31 Responses to &#8220;Mitigations and Solutions of Bufferbloat in Home Routers and Operating&nbsp;Systems&#8221;</h3>

	<ol class=""commentlist"">
					<li class=""comment even thread-even depth-1"" id=""comment-1623"">
			<img alt='' src='http://0.gravatar.com/avatar/86f87d633decc5cb62627232a45d94cf?s=32&amp;d=&amp;r=G' class='avatar avatar-32' height='32' width='32' />			<cite>Justin Smith</cite> Says:						<br />

			<small class=""commentmetadata""><a href=""#comment-1623"" title="""">December 13, 2010 at 6:50 pm</a> | <a class='comment-reply-link' href='/2010/12/13/mitigations-and-solutions-of-bufferbloat-in-home-routers-and-operating-systems/?replytocom=1623#respond' onclick='return addComment.moveForm(""comment-1623"", ""1623"", ""respond"", ""360"")'>Reply</a> </small>","",2011-02-01 17:42:18.813878,1
53,53,3,"h1. Web and database server information

The web servers are all apache-event based rather than apache-prefork, using fcgi, according to the [[bloat:Dogfood Principle]].

This has worked astoundingly well thus far, ramping up and down to handle workloads with very little extra memory use, and no failures to date. While passenger has been recommended, fastcgi offers the potential of more and different kinds of non-ruby services, so I'm inclined to stick with that. 

Also, given the dependence on fastcgi, it may be possible to switch to lighttpd for some services at a later date.

h2. Database server(s)

Postgres 8.4. It would be good to move to postgres 9.X (#4) due to the support for streaming replication, however, due to the enormous number of supporting libraries that need to be made to work, this has proven difficult.

Originally many services used mysql. While mysql is more popular in many ways, postgres is more capable, and we would prefer to standardize on one database type for all backends, if possible.

h2. Continuous Build System

The openwrt project uses buildbot. Jenkins is supposedly superior, but is undergoing a project fork. After [[huchra]] goes up, it would be good to start figuring #36 and #32 out. 

h2. System Management Services

These have not been deployed yet as of the original [[Servers]] ([[siwa]]) has proven the flakiest of the bunch. 

* Web server statistics - #5

Collating the data across the mirrors is proving difficult.

* Bandwidth/Usage statistics 

Cacti, probably, or mrtg. #6 Suggestions wanted

* Uptime/Failure notification

Nagios probably. #6

* Remote Routers

h2. Statistics collection

* Cosmic Background NTP 

* bismark","",2011-03-19 11:12:33.350617,5
205,205,3,"h1. Evaluating qos behavior

Evaluating QoS algorithms is a difficult task. The most important aspect of a QoS implementation is it's fairness.","",2011-09-05 11:17:08.113713,1
63,63,3,"h1. Netnews

Netnews - or at least a gmane gateway - is an old-fashioned means of distributing conversation, still far superior in many ways to web based alternatives. 

There are means to run a bi-directional netnews gateway in mailman, but it will open us up to more spam, and I haven't the contacts to get bufferbloat into the conventional hierarchy.


","",2011-03-19 19:20:17.782773,1
44,44,3,"h1. Conferences

Linux Plumbers
Linuxcon
","",2011-09-05 14:31:01.038015,3
260,260,213,"h1. Good OpenWrt Devices

OpenWrt Barrier Breaker (BB) and Chaos Calmer (CC) builds now include CeroWrt's SQM with optional packages. To enable, install the luci-app-sqm & sqm-scripts packages, then choose the Network -> SQM QoS menu and follow the ""SQM HOWTO"":http://wiki.openwrt.org/doc/howto/sqm.

* *TP-Link Archer C7* Works with current BB & CC builds.  http://wiki.openwrt.org/toh/tp-link/tl-wdr7500 (Recommended April 2015)
* *Buffalo WBMR-HP-G300H* http://wiki.openwrt.org/toh/buffalo/wbmr-hp-g300h (Recommended June 2012)","",2015-06-26 07:31:38.035802,4
106,106,3,"h1. Build

h1. Iscwrt build

NOTE: The build of iscwrt is TOO LARGE to fit in less than 8MB flash. Only the wndr3700v2 is supported.

Get it from: http://huchra.bufferbloat.net/~each/iscwrt/

This build is a lot closer to the final [[uberwrt:Build Configuration]] than the others, at present.

(and consequently, more borken)

h2. Working Features

ISC bind9 with DNSSEC and dynamic dns support
ISC DHCP and DHCPv6 support
IPv6 (native, 6to4, 6in4)
NTP supplied via local server
Qos
Reduced TXQUEUELENs
An Open Radio SSID
A private radio SSID
Reverse DNS on the 2002: prefix
Lighttpd Web Server
Python!
Port forwarding for Phone and printer

h2. Left to do

2002 working (seems to be firewalled out)
2001 policy routing (need to send 2001 

v4 and v6 dyndns working correctly (ALMOST THERE)

Renumbering the network for different ACLs
Secure NTP
SIP proxy
Rawstat parser
DMZ
Local (wireless) QoS support","",2011-05-03 10:43:35.303121,4
33,33,3,"h1. Experiment-Fun with your switch

As enough pieces have fallen into place to make actual predictions, (and the quarry’s spoor noticed), I decided to perform more deliberate experiments to see if I could capture more henchmen of the mastermind. I did.

I’ll start to provide puzzle pieces I’ve discovered here regularly, so you can help with the conviction of the criminal and repair of the damage they have caused.  Today’s simple experiments only involve your router’s switch. We’ll do some experiments on the wireless side of the router next.

Conclusion: something stinks in operating system’s network stacks.  Linux is often worst, with two different but related problems, followed by Mac OSX; Microsoft Windows manages to obfuscate much of it’s problems, but also demonstrably suffers. After mitigation, Linux may be able to perform much better than either.

h1. Experiment Setup

If your home router has a gigabit switch (a few do, these days), you’ll want to find a 100 meg switch to perform this experiment with. You may be able to achieve the same effect using “ethtool” and setting your ethernet link speed to 100Mbps. I presume your machines all have gigabit network interfaces; most have for a while.

Hook up your laptop directly to the switch’s ethernet port.  Hook a second machine up to a second port to act as your server. In case one or the other of your computers is wimpy, let’s use nttcp for our testing.  The point here is to transfer data over the link as fast as you can.

Install “nttcp“.  Run “nttcp -i” on the machine you designate as your server.

h2. Experiment 1a:

Run “nttcp -t -D -n2048000 server & ping-n  server” on your laptop.

What do you observe after, say, 20 seconds?  Is this what you would expect, given that a packet of 1500 bytes takes only .13 milliseconds  to pass through a 100Mbps switch?

h2. Experiment 1b:

Issue the command “ifconfig eth0“; look at the txqueuelen value. On my laptop, it is set by Linux to 1000.

Is the latency constant, or variable, as you manipulate the txqueuelen parameter?

Set the txqueuelen parameter to half of its initial size (e.g. “ifconfig eth0 txqueuelen 500“.  What happens to the observed latency?

What do you observe?  How does it differ from Experiment 1a?

Try playing with different values of txqueuelen while continuing to observe the ping latency. On most current hardware, you can set the txqueuelen to zero; on some older hardware, you may have problems if you do so.

h2. Experiment 1c:

Install the command “ethtool” if you don’t have it installed.

Set the txqueuelen to the minimum operating value (0 on my laptop) for this experiment.

Execute the command “ethtool -g” and note the current hardware settings for your ethernet interface. Note that not all device drivers support this interface. On my laptop, the ring size is 256 by default.

Run “nttcp -t -D -n2048000 server & ping -n server” on your laptop. What do you observe? Why?

Try playing with different values for the ring parameters (e.g. “﻿ethtool -G eth0 tx 64” , and observe the ping latency.  Your hardware will probably have some limit minimum ring size that you cannot go below. On my laptop, this is 64 entries.

Is the latency constant, or variable?  Why?

h2. Experiment 1d:

Note that you can perform similar experiments on Mac OSX and Windows, both of which behave much better than Linux “out of the box” (though Linux is better than OSX once the transmit queue is truncated).  Note that the details of the hardware matter here: you should use the same hardware, or hardware using the same ethernet chip if possible.

For extra credit, explain why Windows default behavior is so much better than either Linux or OSX on 100Mbps Ethernet. (Hint: try setting the transmit speed on the Windows machine to 10Mbps; and search Windows technical notes about multimedia playing).  Do you now believe Microsoft’s explanations?  Or is there a different explanation given these experiments that makes more sense? 

See Also: [[Experiment-Fun with wireless]]

Extracted from: ""Fun with your Switch"":http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/","",2011-02-02 17:10:51.92246,2
35,35,3,"h1. Mitigations and solutions for Broadband

Mitigations versus Solutions of Bufferbloat in Broadband
By gettys
I have distinguished in my writing between what I call “mitigations” and “solutions”.

    * mitigations are actions we can take, often immediately, which make the situation better, and improve (possibly greatly) the current grim situation.  Since they may only work some of the time, and may require conscious thought tuning and action by network operators and users, or have other limitations that are often far from optimal, they won’t work in some circumstances or necessarily be implemented everywhere. Often these mitigations will come at some cost, as in the case today’s posting below.
    * solutions are full solutions for a problem that get behavior to something approximating optimal.  Sometimes they may be mitigations that can be widely applied in an ISP, even though though they may require thought there. The “just work” for everyone.

But observed facts (e.g. RED or other AQM is far from universally used; more about this in a future post) shows that anything that does not “just work” is often distrusted and under-used (and seldom enabled by default), so such a solution is seldom the optimal solution we should be looking for: really “solving” the problem once and for all.  As good engineers and scientists, we should always be striving for “just works” quality solutions, which we don’t have for bufferbloat in all its forms.

The full “solution” for the entire Internet is going to be hard; we need to solve too many different problems (as you will see) at too many points in all paths your data may traverse, to wave a wand eliminate bufferbloat overnight.  Some of the point solutions will actually require replacement of hardware, and time to research and engineer such hardware along with economics will often take time.  Does that mean we should do nothing?  Of course not: we can immediately make the situation much better than it is, particularly for consumer home Internet service. And remember, your competitor will eventually beat you if you sit on your hands.

Gamers and others have been mitigating bufferbloat in broadband for years. Read on. You’ll suffer much less. Mitigation of home router bufferbloat itself will be tomorrow’s installment.
Mitigating Broadband Bufferbloat in the Home Router

The best solution will be to remove the grossly bloated buffers properly, and not to have to hack around this problem in our home router.  ISP’s and their vendors may be able to mitigate existing equipment partially (by cutting buffers to something closer to sane points in the CPE); these mitigations will take time, and are not something you can go do today, yourself.  Those are also technology dependent; and what can be done there is probably best taken up by the equipment vendors and standards bodies.  As in many mitigations, they may come with costs. In the downstream direction, ISP’s not running RED on their head ends may turn it on. So when your network changes, you will need to repeat this process.

I remind you that bufferbloat can occur elsewhere in your path as you make these tests: some ISP’s and content providers do not run with any queue management enabled, so you may have bottlenecks beyond your broadband connection in your path beyond the last mile broadband connection to help confound you (your wireless hop to your home network, and anywhere beyond your broadband headend. My observations of Comcast’s network beyond the CMTS has been very, very clean, confirming what I was told to expect when I had lunch with Comcast.  You may not be so lucky with your ISP. That my test site is on a well run network at MIT, peering directly with Comcast has certainly made my life easier. More on the core Internet topic in the future.

Our quest here  is to try to overcome what has already happened: we usually have gross bufferbloat in the broadband provider’s equipment, which may or may not be customer replaceable. If it is customer replaceable (e.g. cable modems) we can hope that in a year or three that the market may start to provide routers and broadband gear that implement some rational queue management and behave better.

Here’s what you can do today, if your router supports it.  If not, you can go buy a new home router (or install open source router software) today that can mitigate the problem for little cost ($100 or less). You’ll see why this is a mitigation at best, rather than a solution: it isn’t something you’re going to ask your aged parents to try.

Many mid-range or high end home routers have traffic shaping features. They may be called traffic shaping, or “QOS” (Quality of Service).  Some routers I’ve seen (I’ve seen quite a few over the last years) have a single knob to set bandwidth on both directions; they aren’t particularly useful.  You want one which lets you adjust bandwidth in both directions. I’ve experimented with several routers: your mileage will vary. Some commercial routers work really well, some less so.   Sometimes these routers are marketed as  ”gamer routers.”  There is probably some gamer’s web site someplace that goes into this in gory detail, with reviews of different routers.  If so, please let me know. Facilities also exist in the open source router projects of various sorts, e.g. OpenWRT, DDWRT, Tomato, and Gargoyle. More on this topic below.

The WISEciti research project is also researching the behavior of  home routers: if you have an old router, they may be interested in giving it a home.

Our goal is to keep buffers in your upstream broadband link from filling and turn them back into “dark buffers”. We can try to avoid bufferbloat in the broadband device this by transmitting data to it slightly less fast than the broadband device will accept, and ensuring the router forwards data slightly less fast than the broadband  device will transmit it. Formally, this is called “traffic shaping”.  Gamers have been doing this for years, as they are very latency sensitive and empirically discovered that limiting your bandwidth in this way will have good effects on observed latency. Note you should do traffic shaping before you worry about classifying data (e.g. ensuring your voip gets priority over TCP flows), as the goal here is to mitigate the upstream broadband device’s faults as much as possible.

Some ISP’s provide a home router as part of their service that their wires plug into directly. I have no idea if these routers are usable for the following process. I presume not in the discussion below. In  either case, you need the ability to perform traffic shaping.

Plug your router into the ethernet on broadband gear, or at worst, into the ethernet jack of your home router if that is included in your broadband service.  We’re trying to mitigate the broadband link problem here, not fix the router’s bufferbloat, which is a later topic.

I recommend monitoring your home connection via smokeping while you try this process.  It isn’t clear to me that the bandwidth you get from a broadband carrier is a constant over time, as load occurs. I haven’t explored carefully what happens when my ISP’s network gets busy.

Start “pinging” some nearby site (best is not an ISP router, if only because they may be loaded at times and process ping on the slow path).  Note the latency. Saturate the link in an upstream direction (e.g. by copying a file someplace, or uploading a video somewhere; you will probably be able to figure out some way to do so. Note it’s behavior: you’ll very likely find that the latency grows to some value of hundreds of milliseconds or even seconds. You’ll see the latency climb gradually, and then start varying (that’s the behavior you see in my TCP traces).

By using traceroute and ping on the path traceroute exposes, you can figure out which hop is the bottleneck.  If it is not the broadband hop, then you need to find some other site to work against.

Next, find out what your provisioned bandwidth is for both directions, nominally.  This is what you pay for.

Enter half these values into your home router in the the bandwidth shaping or QOS form, as per your router, having enabled this feature.  You may or may not have to reboot your router whenever you adjust the values.  Some routers attempt to determine the available bandwidth in some fashion automatically; I have no idea how successful they may be, and expect that features like Comcast’s PowerBoost will confuse them, so manual use is recommended unless you find the router “does the right thing” automatically . I also expect that some routers work better than others in this area.

Again load your link.

Your latency should be only slightly higher than when your line is idle.  Exactly how much seems to depend on the router.

You can try approaching or even exceeding your provisioned bandwidth by binary search; when you exceed the available bandwidth, you’ll see the latencies start to rise (slowly).  Since the rate at which the buffers will fill is determined by the difference between the broadband bandwidth and your router’s bandwidth to the router, patience is in order to tune the value. Complicating this testing is that some ISP’s dynamically change the available bandwidth (e.g. Comcast’s PowerBoost).  You actually do often have more bandwidth temporarily available (if it is available) early in a connection, requiring yet further patience. Did I tell you that you need patience?

Do the same process for downstream bandwidth.  There may or may not be similar buffers in the downstream direction in the broadband plant (head end and CPU), and ISP’s may or may not be running RED to control queues in the broadband “head end” equipment itself.  Your mileage may vary.

This process works better on some routers than on others.  What value you should try is not clear.  With one router I tried, the behavior on Comcast was exactly what I would want (low latency) when the router was set to the provisioned bandwidth (Comcast claims they slightly over-provision their customer’s accounts); on another router, I have to reduce the values used by more than 30% from my provisioned bandwidth (which may or may not reflect reality).  Even so, I end up on the router I am using today with 20ms latency (I get less than 10ms when idle). Contrast this smokeping with the one in the previous posting: during this one today, I was performing the same kind rdist to MIT that I performed when I found the smoking gun. Not perfect, but way more than an order of magnitude improvement, and also note the packet loss has stopped.
Smokeping of my house after broadband bufferbloat mitigation

Mitigated broadband smokeping

Different routers may not shape the bandwidth to the values you nominally set; before complaining to an ISP that you are not getting what you pay for, please do your homework and verify the actual bandwidth you get out of your router (this is easier said than done: but Dualcomm Technologies makes a cheap port mirroring switch you can afford). The router may not have computed the transformation from the UI to the operating system correctly, and/or forgotten to compensate for packet overhead, or bandwidth shaping may just be broken, and remember, your ISP’s bandwidth includes your packet overhead; your “goodput” should be slightly lower than the marketing BPS of the ISP.

Educating all vendors and network operators about bufferbloat is in order, and exercising your pocket book when selecting hardware and services is essential to recovery from bufferbloat. But let’s only complain about the right problem,  in the right directions, and politely please; the mistake is so widespread we are all Bozos on this bus. Please report problems to the router vendor if they are at fault, and only bug the ISP they aren’t giving you what you pay for if you determine they aren’t actually providing what you pay for.  No one appreciates angry support calls, and ones that aren’t people’s fault and over which they have no control are very frustrating. I am hoping and presuming my audience is primarily technical, and will be a part of bufferbloat mitigation and solution, rather than creating a support nightmare problem for all involved.

Note that this mitigation may also be partial; congestion on the network interconnecting the broadband head-ends might be reflected into the broadband hop itself at times of congestion.

This mitigation has come at a cost: you have defeated any PowerBoost style bandwidth boost your ISP has been kind enough to give you, and possibly a fraction of your rated bandwidth. This hurts, as the Internet tradition is to share when resources are available, and be fair when to everyone when there is not enough resources available.  Short of some attempts (which I haven’t had time to try), such as Paul Bixel’s active QOS control implementation found in the Gargoyle open source router, you are out of luck. I’ll report back on my experiences with Gargoyle when I have time. Alternative mitigations, such as Remote Active Queue Management as mentioned in Nick Weaver‘s comments to a previous entry here, may become feasible with time.

For me, the mitigation is a no-brainer: the network th home actually *works* even when others are using it in my house.  With no mitigation, we would periodically be stepping on each other. Additional bandwidth at the cost of tolerating a broken network that I can’t use for some of my essential services is a very poor trade.  And if you are a gamer, it may save your life ;-) .
QOS and Telephony

If you succeed at mitigating bufferbloat in your broadband connection, you have further challenges. You may have bufferbloat in the home router itself, particularly over wireless hops (as I have observed and noted earlier).  Running an open source router may allow further mitigation of problems in your home router; but this post is long enough as it is and dinner time is fast approaching, so I’ll leave discussing mitigation of bufferbloat in home routers for another day.

Let’s first talk about QOS for telephony for a moment. Note that all this is essentially what Ooma is doing: they put their box in ahead of your home network, reserve bandwidth for VOIP, and classify VOIP traffic ahead of other traffic. I used one of these before it was repetitively damaged by lightning.

Before you have mitigated broadband bufferbloat, any QOS policy you may set in the router may very well (almost certainly is) ineffective when your broadband connection is saturated. And the router itself may also suffer from bufferbloat. (which is why this all can be so confusing; this bear of little brain has often been very confuzed in this quest). But once you have successfully mitigated broadband bufferbloat by bandwidth shaping the broadband hop, you can hope that you to enable QOS for your non-carrier provided VOIP and Skype might work OK (when the home router itself is not feeling bloated). I expect it is wise to do so even though it should not be necessary, for reasons alluded to in a previous entry, that I will elaborate on in a future blog entry. Browsers can cause serious jitter, much more than in past years, and are so worrying they are part of what I lose sleep over.  I’ll circle back to the browser problem in a week or so.

Some of the open source routers  (and Linux itself) have very fancy traffic classification, queue management and allocation facilities; these may not be enabled even in the open source routers, or properly set up (depending on the distro). Go wild. Have fun.  Find and fix bufferbloat bugs with and in the open source routers (since I’ve found that they have the same problems I found on my laptop as covered in fun with your switch, and fun with wireless, particularly since they seem to have only worried about the broadband link).  Show everyone what can be done, so the industry catches up faster (and more are free software converts!). ","",2011-02-02 17:46:00.682694,1
37,37,3,"h1. Mitigations and Solutions for Home Gateways

Mitigations and Solutions of Bufferbloat in Home Routers and Operating Systems
By gettys

As discussed several days ago we can mitigate (but not solve) broadband bufferbloat to a decent, if not ideal, degree by using bandwidth shaping facilities found in many recent home routers. Unfortunately, life is more complicated and home routers themselves are often typically at fault (if you find a recently designed home router that works right, it may want to be enshrined in a museum where its DNA and evolution analyzed, and its implementors both admired for their accomplishment and despised, for not telling us about what they discovered. Complete robust solutions, unfortunately, will be difficult in the short term (wireless makes it an “interesting” problem) for reasons I’ll get to in this and future posts.

Confounding the situation further, your computer’s/ smartphone/ netbook’s/ tablet’s operating system may also be suffering from bufferbloat, and the its severity may/almost certainly does depend upon the hardware. Your mileage will vary.

You may or may not have enough access to the devices to even manipulate the bufferbloat parameters. Locked down systems come back to bite you. But again, you can probably make the situation much better for you personally, if you at a minimum understand what is causing your pain, and are willing to experiment.
Conclusions

Since any number you pick for buffering is guaranteed to be wrong for many use cases we care about, the general solution will await operating systems implementers revisiting buffering strategies to deal with the realities of the huge dynamic range of today’s networks, but we can mitigate the problem (almost) immediately by tuning without waiting for nirvana to arrive.

As an end user, you may suffer in your home router or your computer anytime when the bandwidth (“goodput”) you get over a wireless hop is less than the provisioned and actually provided broadband bandwidth. This is why I immediately saw problems on the Verizon FIOS wireless routers (the traces show both problems on the wired and wireless side; but the wireless side is much worse). On that typically symmetric service at my in-law’s FIOS 20/20 service, 802.11g is usually running more slowly than the broadband connection. I also see bufferbloat regularly at home on my router using my Comcast service, which I recently changed to 50/10 service; there are parts of my house where it is now easy to get enough insufficient bandwidth over wireless. Bufferbloat is nothing if not elusive. It’s been like hunting the will o’ the wisp on wireless, until I had a firm mental grasp on what was happening.

Remember: you see bufferbloat only on the buffers adjacent to the bottleneck in the path you are using. Buffers elsewhere in the path you are probing remain invisible, unless and until they become the bottleneck hop.
Mitigating the inbound home router wireless bufferbloat problem

Whenever the bandwidth from your ISP exceeds that of your wireless “goodput”, you’ll likely see bufferbloat in your home router (since the bottleneck is the wireless hop between you and the router). Full solutions to the problem are beyond the scope of today’s posting (coming soon), and will require some research, though ways forward exist. In short, complete solutions will require active queue management (e.g. RED or similar algorithms), since the mitigation strategy of bandwidth shaping to “hide” the buffer we showed in a previous post will not lend itself well to the highly variable bandwidth & goodput of wireless. Outbound, it is very likely in your operating system where the bloat will occur (since your router is generally connected to the broadband gear either internally (as in the FIOS router I experimented with) or via a 100Mbps or 1Gps ethernet. You’ll most likely experience this, as one of the replies to this posting points out, when uploading large files, doing backups, or similar operations. I only realized OS bufferbloat occurs after I started investigating home routers and did not get the results I expected immediately. With some disbelief, I got confirmation with the simple experiments I reported on.

If you can “log in” to a shell prompt on your wireless router (many are running Linux, and a few have known ways to break into them), or are willing to install open source firmware on your router, you can go further, by mitigating the excessive buffering in the ways explained below for Linux. Remember, that this only affects the down stream direction (home router to your laptop). Note that the only one of these open source projects I have found that has close to turnkey classification and mitigation of broadband bufferbloat is Gargolye. Paul Bixel has worked hard on mitigating broadband bufferbloat, but has not attempted wireless bufferbloat mitigation. As noted in a previous post, many mid to high end home routers have enough capability to mitigate broadband bufferbloat.

OS Bufferbloat Mitigation

As explained in fun with your switch, fun with wireless, and the criminal mastermind postings, and in future blog postings, we have bad behavior all over the Internet, though I focused on the home environment in most of the postings so far. In all of the common operating systems, there is at least one, if not two places (and maybe more undiscovered) where bloat has been demonstrated. Please go find and fix them. All OS’s therefore suffer to some extent or another.

Your most immediate mitigation may be to literally move either your laptop or your home router to where the bandwidth equation is different, shifting bufferbloat to a (possibly) less painful point. But there are also potentially some quick mitigations you can perform on your laptop, and as some others in replies to previous postings have demonstrated, that are more general. The first order mitigation is to set your buffering in your operating system to something reasonable, as explained below (details of the Linux commands can be found in “fun with your switch” and “fun with wireless“.
Linux

I’ll discuss Linux first, as in my testing, it has problems that may affect you even if you don’t run Linux, as Linux is often used in home routers. But then again, as I use Linux for everything, there may be more buffers on other operating systems that I have not run into; my testing on Mac and Windows has been very small relative to Linux. We all live in a glass house; don’t go throwing stones. Be polite. Demonstrate real problems. But be insistent, for the health of the internet.

Note the total amount of buffering causes TCP and other congestion avoiding protocols indigestion: in Linux’s case, it is both the device driver rings (which I believe I see in other operating systems) and the “transmit queue” buffering. I gather some of the BSD systems may have unlimited device driver buffering. Some hardware may also be doing further buffering below the register level in smart devices (I susped the Marvell wireless device we used on OLPC might, for example).

As discussed in fun with your switch, I detected two different sources of excessive buffering in Linux, both typically resulting from device drivers (therefore shared in common with other operating systems). Device drivers hint to the operating system a “transmit queue length”, which is controllable on Linux by use of the “txqueuelen” parameter settable using the “ifconfig” command. By default, many/most modern ethernet and wireless NIC’s are telling Linux to be willing to buffer up to 1000 packets. In my experiments on (most) of my hardware, since the ethernet and wireless rings are both at a minimum quite large, I could set txqueuelen to zero without causing any immediate problems.

But note that if you set buffering to zero in both device drivers (and the transmit queue), if there is no other buffering you don’t happen to know about, your system will just stop transmitting entirely; so some care is in order. This depends on the exact details of the hardware. Buffering is necessary; just not the huge amounts currently common, particularly at these speeds and low latencies.

Also note that many device drivers (e.g. the Intel IWL wireless driver) do not support the controls to set the ring buffer sizes, and at least one device I played with it seemed to have no effect whatsoever (implying buffering present, but no control over the size of those buffers).

A possible reason for the transmit queue (others with first hand knowledge of the history, please chime in), is that on some old hardware, e.g.old serial devices being used with modems, had essentially no buffering, and you might experience excessive packet loss on those devices. It may have also been really necessary for performance before Linux’s socket buffer management became more sophisticated and started to adjusting its socket buffer sizes based on the observed RTT (note that the lower level bufferbloat may be inducing socket bufferbloat and application latency as well, though I have no data to confirm this hypothesis). At some point, the default value for txqueuelen was raised to 1000; I don’t know the history or discussion that may have taken place. There are also queues in the operating system required for traffic classification; I haven’t had time to figure out if that is where Linux implementss its classification algorithms or not; some hardware also supports multiple queues for that purpose. Note this means that many Linux based devices and home routers may have inherited differing settings. Extreme bufferbloat is present on a number of the common commercial home routers I have played with using modern hardware, and the open source routers I’ve played with as well.

So even though the “right” solution is proper queue management on you can tune the txqueuelen and (possibly) the NIC device driver rings to more reasonable sizes, rather than the current defaults, which are typically set for server class systems on recent hardware.

Once tuned, Linux’s latency (and the router’s latency) can be really nice even under high load (even if I’ve not tried hard to get to the theoretical minimums). But un-tuned, I can get many second latency out of both Linux home routers and my laptop, just by heading to some part of my house where my wireless signal strength is low (I have several chimneys that makes this trivial). By walking around or obstructing your wireless router, you should be easily able to reproduce bufferbloat in either your router or in your laptop, depending on which direction you saturate.

With an open source router on appropriate hardware and a client running Linux, you can make bufferbloat very much lower in your home environment, even when bufferbloat would otherwise cause your network to become unusable. Nathaniel Smith in a reply to “Fun with Wireless” shows what can be done when you both set the txqueuelen and change the driver (in his case, a one line patch!)

Mac OSX

I’ve experimented on relatively recent Apple hardware: on Ethernet showed what appears to be device driver ring bufferbloat, roughly comparable to Linux. On my simple test on ethernet on a 100Mbps switch, I observed 11ms latency, roughly, slightly more than Linux which was 8ms on similar vintage hardware in the same comparable test. On Linux, the transmit ring is set to 256, by default, and allowed me to set it as small as 64. So I hypothesize a similar size buffer in it’s ethernet driver (and possibly a small buffer in the OS above the driver). As I’m not a Mac expert, I can’t tell you as I could on Linux how to reduce the transmit ring size.

I have not tried to pry my son’s Mac out of his hands for Mac wireless experiments: perhaps you would like to do so with your Mac, or I may get around to the wireless experiment over the holidays. If you do, make sure you arrange the bottleneck to be in the right place (the lowest bandwidth bottleneck needs to be between your laptop and your test system).
Microsoft Windows

Experimenting with Microsoft Windows several weeks ago was a really interesting experience. Plugged into a 100Mbps switch, there was no bufferbloat in the operating system (both Windows XP and Windows 7) on recent hardware. But neither Windows saturate a 100Mbps switch (you expect to see about 93Mbps on that hardware, due to TCP and IP header overhead). As soon as we set the NIC to run at 10Mbps, the expected bufferbloat behavior occurred. Since in my tests, the medium no longer is the bottleneck, it shifts to somewhere else in the path (in my test, there was no bottleneck).

Here’s what I think is going on and I believe what happened.

With some googling, I discovered on Microsoft’s web site that Microsoft has bandwidth shaped their TCP implementation to not run at full speed by default, but to run probably just below what a 100Mbps network (I observed mid 80 megabit). You have to go tune registry parameters to get full performance on Microsoft Windows TCP implementation. There is an explanation on their web site that this was to ensure that multimedia applications not destroy the interactive performance of the system. I think there is a grain (or block) of truth to this explanation: as soon as you insert big buffers into the network, you’ll start to see bad latency whether using TCP, UDP or other protocols, and one of the first places you’ll notice is the UI interaction between users of a media player and the media server (I’m an old UI guy; trust me when I say that you start “feeling” latency at even 20ms). Any time they ran Windows on hardware with big buffers, they had problems; certainly hardware has supported much higher transmit buffers than makes any sense for most user’s office or home environments for quite a few years. I suspect Microsoft observed the bufferbloat problem and, as a simple mitigation strategy was available to them, took it.

Microsoft does not have control of many/most of the drivers their customers expect Windows to run well on (not true for Mac and Linux), however. So I suspect that Microsoft and (some of their customers) have a real headache on their hands, only soluble by updates to a large number of drivers by many vendors.

On the other hand, on 100Mbps ethernet, still the most common bandwidth ethernet, both Windows XP and Windows 7 ”just worked” as you might hope with low latency (of order 1ms even while loaded). And Windows XP is less likely to induce bloated buffers in broadband, though as bittorrent showed, it still can, and as I’ll explain in details shortly, recent changes in both web browsers and certain web servers can encourage XP to fill buffers. I have not experimented with wireless. Please do so and report back.

Alternate explanations and/or confirmations of this hypothesis are welcome.

I do not happen to know the mechanisms, if any, to control driver buffering size on Microsoft Windows, though it may be present in driver dialog boxes somewhere.
Why in the world does the hardware now have so much buffering, anyway?

On my Intel Ethernet NIC, the Linux driver’s ring buffer size is 256 by default: but the hardware goes up to 4096 in size. That’s amazingly huge. I’ve seen similar sizes on other vendor’s NIC’s as well. I wondered why. I like the explanation that Ted T’so gave me when I talked to him about bufferbloat a month ago: it stems from experience he has when he was working for the Linux Foundation on real time. I think Ted is likely right.

It can’t be for interrupt mitigation; most of your benefit is in the first few packets; similarly for segmentation and reassembly. Even doing a little transmit buffering can get you into a lot of trouble on wireless, as I’ll show in a future post. I suppose that interrupt latency could also be a problem on loaded systems, though this seems extreme.

Ted’s theory is this is a result of the x86 processor’s SMM mode. To quote Wikipedia: “System Management Mode (SMM) is an operating mode in which all normal execution (including the operating system) is suspended, and special separate software (usually firmware or a hardware-assisted debugger) is executed in high-privilege mode.” Ted noted there are motherboards/systems out there which go catatonic for of order one or a few milliseconds at a time; yes, your N processor chip motherboard consisting of C cores each may crowbar to a single thread on a single processor for that length of time. The BIOS is ensuring your CPU cores don’t over heat (you might think there should be a way to do this at lower priority for things less time urgent, mighten you?) and important (but not necessarily urgent) tasks. To paper over latencies and hiccups of that length of time at 1 gigabit you indeed need hundreds or conceivably small number of thousands of ring entries. And that’s the size we see in current hardware.

Unless someone has a better theory, I like Ted’s.
The General Operating System Problem

We now have commodity “smart” network devices, that may do lots of features for us, to make the network “go fast” (forgetting that for many people, operations/second and latency trumps bits per second and throughput hands down; performance has multiple metrics of import, not just one). For example, the devices may compute the TCP checksums, segment the data, and so on; and similarly on the receive side of the stack. To go fast, we may also be wanting to (and needing to) mitigate interrupts, so the OS doesn’t necessarily get involved with every packet transfer in each direction, on server systems (but often not on edge systems at all). And, as opposed to a decade ago, we now have widespread deployment of networking technologies that span one or more orders of magnitude of performance, while still only admitting to a “one size fits all” tuning.

Here’s the rub: these same smart device designs are often/usually being put into commodity hardware a generation or two later, and the same device drivers are being used, set up for their use on high end servers. But the operating environment that hardware is now in is in your laptop, your handheld device or your router, running at low bandwidth, rather than a big piece of iron in a data center, hooked up to a network running at maximum speed. Rather, it is being used in devices that are being used at a small fraction of their theoretical performance capability. For example, my gigabit ethernet NIC much more often than not is plugged into a 100megabit switch, with the results I noted. And, of course, I’m seldom going anything like the speed of a server on my laptop: at most, I might be copying files to a disk someplace, and going of order 100Mbps.

Even more of a problem is wireless: not only is the bit rate of the network not a 100Mbps (for 802.11N), or 20Mbps (for 802.11g), but the bit rate may drop as low as 1 megabit/second. Remember also that those networks are shared media. If you have a loaded wireless network, the buffering of the other nodes also comes into play; you may only get 1/10 (or less) of the available bandwidth at whatever rate that wireless network is operating at (and 802.11 likes to drop its speed to maximize distance at the drop of a hat). I’ll discuss what happened to OLPC in a future post, though we also had other problems in our mesh network. So the effective “goodput” on wireless may easily vary by factors of 100 or more on wireless, presenting even more of a challenge than for ethernet, where typically we face a switched network and a factor of 10 in its performance.

In general, I believe that hardware transmit buffer sizes should be kept as small as possible. ”As possible”, will depend strongly upon the network media and circumstances. One of the mistakes here, I suspect, is that the operating system driver implementers, not understanding that transmit and receive are actually quite different situations, set the transmit and receive buffering to the same amount. After all, I’m never going to lose a packet I haven’t transmitted yet; it’s only receive I could have a problem on. And as I showed previously, some packet drop (or use of ECN) is necessary when congested for the proper functioning of Internet protocols, and indeed, for the health of the Internet overall. And this is indeed be a form of congestion. Ideally, we should always mark packets with ECN whenever/wherever congestion occurs, no matter where the excessive queues are forming.

And since the network delays are anywhere from almost zero to several hundred milliseconds (for planetary paths), the delay/bandwidth product is also very large, along with the workload of the systems. There is no single right answer possible for buffering: our operating systems need to become much more intelligent about handling buffering in general.

I certainly do not pretend to have a clue as to the right way to solve this buffer management problem in multiple operating systems; but it seems like a tractable problem. That will be fun for the OS and networking subsystem implementers to figure out, and help keep them employed.

The general challenge for operating systems is we want a system which both can run like a bandit in the data center, and also work well in the edge devices. I believe it possible for us to “have it both ways”, and to “have our cake and eat it too”. But it will take work and research to get there. In the short term, we can tune for different situations to mitigate the problem.
Coming Installments

    * After action report of 802.11 network meltdown at OLPC
    * RED in a different light
    * corporate and ISP networks
    * 802.11 and 3g networks
    * where to from here?

Conclusions

Since any number you pick for buffering is guaranteed to be wrong for many use cases we care about, the general solution will await operating systems implementers revisiting buffering strategies to deal with the realities of the huge dynamic range of today’s networks, but we can mitigate the problem (almost) immediately by tuning without waiting for nirvana to arrive.","",2011-02-02 17:47:22.331404,1
40,40,3,"h1. Dtaht test rig

!http://nex-6.taht.net/images/housenet.png!

* The nanostation M5s are using the ar71xx chipset for ethernet and the ath9k for wireless
* The wndr5700 (not shown) uses the same chipset
* The wrt is a model 6 (I think)
* The laptop uses an e1000e for ethernet and a iwllagn for wireless
* The openrd uses the kirkwood chipset
* The guruplug also uses the kirkwood chipset and the wireless driver is unknown
 ","",2011-02-03 07:41:48.627091,1
32,32,15,"h1. Experiment-Fun with wireless

I encourage you to perform this experiment, which many of you open source readers can likely perform as you read this entry.

By the end of this exercise, you’ll agree with my conclusion: Your home network can’t walk and chew gum at the same time.

You can perform all but parts of experiment 3 on commercial routers; I’ve seen similar results on a Cisco e3000, Dlink DIR-825revA and others. An open source router, however, will allow us to diagnose (at least part of) the problem more definitively. I suspect more recent home routers may behave worse than old home routers; but as my old routers have been blown up by lightning, I can’t test this hypothesis.

Here’s my experiment configuration:

computer 802.11  <-802.11->      Router    <-ethernet->  server computer

Seems pretty simple, doesn’t it?  For completeness sake, I’ll more carefully document the configuration, not that I think it matters much, though may change the details of the results; feel free to substitute your own gear arbitrarily:

    * The server system is connected to the router via GigE.
    * The test computer is an HP EleteBook 2540p running Linux 2.6.36-rc5, and uses a Intel Centrino Advanced-N 6200 AGN, REV=0×74

The test computer was sitting about 4 feet away from the router; my local radio environment is quiet; you will see the most interesting results for reasons I cover in the next installments on such a quiet network.  A commercial home router should suffice for experiment 2: you’ll need an open source router (or be able to log in to your router) to perform parts of experiment 3 below.

h2. Experiment 2a:

ping -n server & scp YourFavoriteBigFile server:

YourFavoriteBigFile needs to be large, say 100Mbytes or more, so the copy will take more than a few seconds.  You can use nttcp as well if you have installed it in Experiment 1 (but it will take a bit longer to reach full effect, I believe). Your favorite distro’s ISO image will do fine.

How much buffering should we expect to keep TCP busy? For a single flow like this, over 802.11g (presuming we can actually get about 25Mbps, and a delay of 1ms, we’d expect to need no more than the bandwidth x delay product.  This is about 2 packets; it makes sense we need to always have a second packet available to keep the wireless link busy.  You’d expect an extra millisecond of queuing delay for the ICMP ping packet (which has an almost negligible size) 

What do you observe?

I observe latencies that increase the longer the TCP session goes on, reaching up to about 600 or more milliseconds after about 20 seconds on Linux, but with very high jitter.  Pinging the server from a second machine shows little increase in latency.

Why is this occurring?  Ah, dear Watson, that is the question….

h2. Experiment 2b:

As in Experiment 1, reduce your txqueuelen to zero in several steps (e.g.”ifconfig wlan0 txqueuelen 0“).  What do you observe?  I observe about 100ms latency, with significant jitter.

Unfortunately, my wireless NIC does not support the “-g” and “-G” options we explored in Experiment 1. So I cannot try reducing the transmit ring. If yours does, I encourage you to to try twisting that knob as in the first experiments.   hypothesize my wireless NIC has a transmit ring of order the same size as the ethernet NIC we explored in Experiment 

h2. Experiment 2c:

Move the test computer further from the router, until, say, you can only 6 Mbps of bandwidth (your actual ""goodput"":http://en.wikipedia.org/wiki/Goodput will be less; remember, just because your radio is signalling at 6Mbps doesn’t mean you are able to get that much actual wireless bandwidth).

Remember to set your txqueuelen back to its original value (e.g. ﻿﻿”ifconfig wlan0 txqueuelen 1000“, for my laptop).

Run the experiment again. What do you observe? Why?  I observe up to several seconds of latency; the lower the bitrate, the higher the latency.

h2. Experiment 2d:

Third experiment (while still remote enough the bandwidth available is low).

Try web browsing in another window, during the copy. What do you think of this result?  I don’t think you will like it at all.  I sure don’t.

h2. Experiment 2e:

As in Experiment 1, reduce your txqueuelen to zero in several steps (e.g.”ifconfig wlan0 txqueuelen 0“).  What do you observe?

I observe the latency drop to only a bit over a hundred milliseconds (but with substantial jitter.

Unfortunately, my wireless Intel NIC does not support the “-g” and “-G” options So I cannot try reducing the transmit ring in the wireless device as I could on ethernet.  I hypothesize a similarly large ring for the wireless chip.

h2. Experiment 3a-3d:

Repeat experiment 2, but copy YourFavoriteBigFile from your server back to your system.  Make sure that there is more bandwidth from where you are copying from than the wireless link.

On a Linksys E3000 router running commercial firmware, my latencies reach 500ms or more, with high jitter at 54Mbps data-rate, with high ping packet loss when pinging from the transmitting direction. ﻿﻿On a Netgear WNDR3700, running OpenWRT 10.03, changing txqueuelen seems to have no effect, but the latency is stuck at around 200ms. In a quick test at 6Mb/second, I observed 4 second (highly variable) latency; at 12Mb/second, I observe about 2 second (highly variable) latency.

Note that twisting the txqueuelen knob (and/or transmit rings) on your laptop has no effect, but by logging into your router and twisting the knob, you may (or may not be able to) eliminate most of the latency. On a Linksys WRT-54TM running [[Gargoyle]] router code version 1.3.8, I can reduce the latency (when at 54Mbps) from of order 1 second (with high jitter) to around 20ms by setting txqueuelen to 10  on wl0 (you can’t go to zero on this hardware, I surmise).  This is still higher than it should be from first principles, but closer to something tolerable.

h2. Conclusion of Experiments 1-3

Your home network can’t walk and chew gum at the same time.

h1. See Also

","",2011-04-11 09:14:08.451039,3
77,77,3,"h1. Wndr3700 and BISMark

NOTE: Although the wndr3700 works, the [[wndr3700v2]] has 16MB of flash, which is GREAT. The v1 may not be supportable in the near future.

If you acquire a wndr3700, look [[wndr3700v2|on the side of the box]] to make sure you get a [[wndr3700v2]] version.

And then install the v2 squashfs version of the bismark images.

You will need to download the latest ""images are here"":http://huchra.bufferbloat.net/~bismark/

Generic ""Installation instructions"":http://wiki.openwrt.org/toh/netgear/wndr3700#oem.easy.installation
Specific [[Flashing instruction for Mac]].

If you need additional packages, you will need to remove /etc/opkg/* then edit the /etc/opkg.conf file to point to either http://huchra.bufferbloat.net/~bismark/ your_build instead of what it points to currently, then do a

@opkg update
  opkg list
  opkg install your_package@

There will be a special [[bismark feed]] at some point 

Please note that huchra will move to a saner name at some point in the near future, and we hope to make these defaults somehow.
","",2011-05-11 13:08:56.734911,15
266,266,3,"h1. Reconciling codel variants

See ""Van Jacobson's talk at the recent ietf"":http://recordings.conf.meetecho.com/Recordings/watch.jsp?recording=IETF84_TSVAREA&chapter=part_3 for an overview of the core concepts in codel and fq_codel and fairly current status.

h2. Codel

h3. The original algorithm

In the original algorithm, as published in the original paper, the count variable would increase without bound. 

This was discovered on the third day of the implementation, and after several experiments, was discarded in favor of several alternatives. These alternatives have various theorists and implementors wandering in different directions, doing different sort of tests. Uniformly the results of all current variants are pretty good, but not ""optimal""...

h3. Linux 3.5 and cerowrt 3.3.8-17 and prior

The linux version has a more aggressive ""decrease the drop schedule"" state, and retains the ""increase the drop schedule rapidly when in a massive drop state"" state.

This leads to long-period oscillations in short and overlong RTTs. However this testing has been not repeated yet, as at the time there was an initialization bug in the 0 state of the codel algorithm fixed in net-next and queued up for linux 3.5.x.

It also contains some performance optimizations vs a vs the ns2 models - notably using fixed point arithmetic, and using a newtonian method to calculate the increase in the invsqrt (valid), as well as the decrease (possibly dicey).

h3. Current ns2 model

The current ns2 model does not exhibit the counting without bound as the control law is entered more rarely and not during a burst of packets, so count increments more slowly. The count decrement on re-entering a drop state is by 2.

h3. Current ns3 model

Is a close analog to the Linux implementation, including the newtonian invsqrt but with a decline of 2 packets per re-entry from drop state, rather than the linux algorithm. It is also missing a critical fix to the 0 state that is now in Linux 3.5.1.

h2. Fq_Codel

h3. ns2 model

The ns2 model as implemented by Kathie and Van is ""Packet Fair"". It has the benefit of even more simplicity than the linux model, however it may not be appropriate in asymmetric bandwidth scenarios. 

h3. Linux 3.5 implementation

The Linux 3.5 implementation is ""byte fair"", where X amount of bytes are delivered per quantum X, where quantum X has a range of 256 through 64k - with a single mtu (1500) being the default. It would be interesting to see how various quantums behave in various scenarios.

h2. Testing and testers

h3. Kathie Nichols/Van Jacobson

Continues to think upon and modify the core ns2 model to reflect results reported from the testers.

h3. Andrew Mcgregor

Works with both a the Linux implementation and his ns3 model. His primary dumbbell ns3 model is focused on the sorts of special problem New Zealand faces - with very short on-island RTTs, and very long (230+) ms RTTs. Until recently most of his work was using a 4500 byte quantum rather than the default. 

h3. Dave Täht

Is primarily focused on improving latency on the two sides of the edge devices, at bandwidths ranging from 2Mbit to 20Mbit, as well as the upcoming issues with wifi.

Works with the ns3 model, the linux kernel on x86, and the cerowrt implementation, in a variety of scenarios - notably with a live deployment in Los Gatos california, which is mostly targetted at getting some long term data on wifi.

He's working better charactising overall codel behavior in an embedded box with BQL and with soft rate limiting (HTB or HFSC), and with native ipv6 in the mix.

Internal tests of cerowrt include tests to/from [[bloat:bloatlab #1]] from various locations around the US, as well across multiple cerowrt boxes and laptops setup in various scenarios. High on the list of simulated tests to add is larger RTTs.

Given that smaller quantums had not been explored, cerowrt 3.3.8-17 runs with a 256 quantum for fq_codel on almost all queues. Prior work used 3000 byte quantums on wifi, 1500 on ethernet. 

h3. Jim Gettys

Is working with comcast's highest end service, with 100Mbit down/20Mbit up. (and thus is blowing up dave's 20/4Mbit models)

Is using cerowrt and linux/windows based hardware to servers running across the continental US at roughly a 100ms RTT, as well as his std bufferbloat busting bandwidth saturating 10ms scp to MIT test.

h3. Eric Dumazet

Has a primary focus on improving bufferbloat on 10GigE (and higher) devices. He typically runs with a much shorter RTT (500us) and target (20ms) than the default, aiming at good performance in the data center environment rather than in the web at large. 

h3. Unnamed BigCorp 1

Did an extensive analysis of linux's implementation showing some difficulties at really high (150 tcp) saturating workloads. (the oscillation issue noted earlier)

h3. BigCorp 2

has set up a set of servers in Russia for testing of both short 10GigE and long RTT links. No results as yet.

h3. Stanford

Researchers at Stanford have reproduced most of the results of the early codel and fq_codel work. ""Their work on Codel and fq_codel"":http://reproducingnetworkresearch.wordpress.com/2012/06/06/solving-bufferbloat-the-codel-way/ 

h3. Others?
","",2012-08-13 15:13:18.004755,13
78,78,3,"h1. Flashing Instructions for Mac

# Get the image file - *pay attention to the version number*. (It's on the back of the router, after WNDR3700. If no v#, then v1)
# Image file for North-America is *-NA* - see http://huchra.bufferbloat.net/~bismark/capetown/capetown-wndr3700v2/openwrt-ar71xx-generic-wndr3700v2-jffs2-factory.img for the main file (If you are doing a sysupgrade you will need the ""sysupgrade version""http://huchra.bufferbloat.net/~bismark/capetown/capetown-wndr3700v2/openwrt-ar71xx-generic-wndr3700v2-jffs2-sysupgrade.bin , if you want to wipe out everything, use the ""factory"" version, above) (and if you are overseas, don't use the NA version)
# Configure an ethernet port on your machine to 192.168.1.2.
# Connect port 1 on the router to the ethernet port (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
# Hold down the ""factory reset"" button on the bottom of the router.
# Turn on the router. Light 1 will light up green; the connection light will light up yellow, flash yellow, turn green, then flash green. This takes over a minute.
# Release reset button
# Open terminal on mac and type the following commands to flash the router
** tftp 192.168.1.1
** binary
** put <image-file>
A successful tftp will simply return no message, a failed one will eventually time out and tell you so.  *Waiting at least 5 minutes is KEY*; The router needs to rewrite a lot of flash which is very slow... If impatient, go for a walk, have some coffee... or do another router (after the tftp succeeds you can disconnect your laptop's network cable with no issues, so this will speed your life up if you are doing multiple routers) Depending on background radiation, the router may or may not reset - you will see the light go solid green in this case...
# Configure an Ethernet port on your machine to 192.168.42.2
# Point your Web browser at http://192.168.42.1:81 .  It will ask you to create a new password.  If that doesn't work, power cycle the router and try again.  If that doesn't work, proceed to step 2.  The router will ask you to create a new password.  After you set the password, telnet is disabled. You can ssh in as root with password or continue using the web interface
# Connect the WAN port on the router to your ISP uplink and reboot the router.
# See [[Further Configuration for wndr3700]] for the next steps","",2011-05-29 06:15:22.430162,18
68,68,3,"h1. Hardware evaluation process

The hardware evaluation process has proceded as more a matter of luck and available resources than anything else.

There has been no financial involvement by any vendor in any part of the selections made so far.

The principal factor determining the value of hardware to this project has been the availability of support in the openwrt mainline and non-binary blobs used for the wifi drivers. A minimum of 8MB of flash is required for this project (more would be helpful), as well as a minimum of 32MB of ram (64MB or more recommended), which also excludes many off-the-shelf components commonly available on the market today.

{{include(good hardware)}}

{{include(useless hardware)}}","",2011-03-20 10:08:06.593239,3
146,146,3,"h1. Using oprofile

There is a development build of [[cerowrt:wiki|Cerowrt]] available at:

http://huchra.bufferbloat.net/~cerowrt/cerowrt-dbg

h2. Installation on the router

@opkg update
opkg install oprofile@


h2. Setup

Oprofile by default wants to write to a location on flash memory. This is slow and can skew the test.
Better is to write to ram. Also, you will need a kernel to look at in order to see the symbols.

(Naturally, by using a ramdisk, this information will be lost on boot)

@cd /tmp
mkdir /tmp/op
wget http://huchra.bufferbloat.net/~cerowrt/cerowrt-dbg/vmlinux
opcontrol --setup --vmlinux=/tmp/vmlinux --session-dir=/tmp/op@

h2. Running oprofile (basic performance counters

@opcontrol --init
opcontrol --start@

Do your test

@opcontrol --stop
 opcontrol --dump@

h2. Analyzing results

@opreport -a --symbols --session-dir=/tmp/op@

h2. Notes

Oprofile is a development tool and can make a system slower (thus skewing your test) and more fragile. 

h2. Some sample oprofiles

[[wireless oprofile]]

[[wired oprofile with alignment trap]]
","",2011-06-04 05:35:04.992769,2
287,287,213,"h1. Setting QoS Properly if you can't use fq_codel (CoDel + SFQ)

_*Note:* This process is no longer needed in CeroWrt. See the [[Setting up SQM for CeroWrt 310]] page for a better procedure._

But if your router doesn't support these new algorithms for Active Queue Management, you can still make your internet performance a little better. You need to turn on the Quality of Service (QoS) settings within your router. This artificially limits the speed that your router sends data, therefore decreasing the effect of bloated buffers. You lose a little speed to gain a whole lot of performance. 

To do this with the OpenWrt firmware, open the Web LuCI interface. Go to the Network -> QoS page. 

# Uncheck the Enable box to turn off QoS, then click Save & Apply
# Use a speed test (such as http://speedtest.net) to get your network's speed.
# Set Upload and Download to a value a value 95% of the speeds you measured.
# Check the Enable box to turn QoS back on again
# Click Save and Apply button at the lower right.

The image below shows the controls:

!CeroWrt-QoS-steps.png!","",2014-03-18 11:05:42.969166,4
69,69,3,"h1. Good hardware for debloating purposes

h2. Atheros equipment

In particular the support for the ath9k 802.11n chip is complete and open source across many embedded and mini-pci devices

h3. Ath9k based gear

h4. WNDR3700

h4. Nanostation M5

h4. Mini-pci cards yet to be determined

h3. Ath6k

h2. Intel IWLlangn

A common design used in mini-pci cards, it has been debloated extensively already and has good aggregation support and an active development base.

h2. Buffalo

There is a router with 32MB flash rumored to be coming from buffalo

h2. USB sticks

TBD

h2. mini-pci cards

TBD","",2011-03-20 10:14:03.83295,3
161,161,3,"h1. Enable ECN on multiple operating systems

h2. Solaris

h2. OSX

h2. Linux

h2. FreeBSD

notes to sort out:



[Tue Jun 21 2011]
<bmc> What was the name of the bufferbloat-related sysctl parameter on Linux?
      ECN? I'm drawing a blank.  [07:43]
<dtaht> ?
<dtaht> Got your plug?
<bmc> <FONT>Up and running.</FONT>
<dtaht> heh
<bmc> <FONT>net.ipv4.tcp_ecn</FONT>  [07:44]
<bmc> <FONT>That's it.</FONT>
<dtaht> http://www.bufferbloat.net/projects/bloat/wiki/Dogfood_Principle
<bmc> <FONT>I have it set to 2 which, as I recall, means ""try ECN, but
      fallback if it's not there""</FONT>
<dtaht> no, it's worse than that
<dtaht> secondly this only applies to connections initiated from or to the
	router  [07:45]
<dtaht> dsack, and sack are good too
<bmc> <FONT>But it should help with NAT'ed connections, no?</FONT>
<dtaht> I just got a guruplug version of openwrt built, but debian is WAY
	easier to deal with.
<dtaht> no
<dtaht> proxied via something like polipo, yes  [07:46]
<bmc> <FONT>Hmm. But the original problem you had here was that my crappy
      Linksys didn't grok ECN at all, and you had ECN = 1 on your Linux
      box. Right?</FONT>
<dtaht> right  [07:47]
<dtaht> your router was not passing through the ECN bits - dying terribly.
<dtaht> Now you should be able to turn it on on the rest of your internal gear
<bmc> <FONT>So, if my plug router groks ECN, and I enable ECN on it, I gain …
      what?</FONT>
<bmc> <FONT>It's a flow-control thing, isn't it?</FONT>
<dtaht> and have all the relative theoretical chocolaty goodness
<dtaht> yes
<dtaht> marking rather than dropping packets is a theoretical goodness  [07:48]
<bmc> <FONT>Right. So, bottom line, I want to enable it on the plug, and
      enable it (set to 2 or 1) on the various internal machines.</FONT>
<dtaht> yes.
<bmc> <FONT>Interesting. Out of the box, the plug's Debian has:</FONT>  [07:49]
<bmc> <FONT>net.ipv4.tcp_sack = 1<BR>net.ipv4.tcp_ecn =
      2<BR>net.ipv4.tcp_dsack = 1<BR></FONT>
<dtaht> that are the best defaults for yesterday's internet. The new hotness
	is ecn
<dtaht> :)
<bmc> <FONT>The internal Ubuntu servers are similarly configured.</FONT>
<dtaht> yep
<dtaht> ECN breakage was a real problem
<bmc> <FONT>Yes, but, IIRC, ecn=2 is essentially ecn=1, with a fallback to
      oldness.</FONT>  [07:50]
<dtaht> in fact, we've fixed ECN, TOS, and Diffserv problems all over the
	Linux stack in the last month.
<dtaht> ummmm
<bmc> <FONT>Or did I misunderstand your original explanation?</FONT>
<dtaht> Or I was drunk...
<dtaht> ecn = 0 entirely disabled
<dtaht> ecn = 1 enabled
<bmc> <FONT>Right. I got that.</FONT>
<bmc> <FONT>What is ecn=2?</FONT>
<dtaht> ecn = 2...
<dtaht> I think means accept it if presented but don't initiate it... Wait one
								        [07:51]
<dtaht> yea
<bmc> <FONT>Ah. So, ecn=2 on the router is fine, but I want ecn=1 on the
      internal client machines.</FONT>
<dtaht> so ecn=1 is good, and a fallback, like ecn=3 - if it existed, which
	would have the desired fallback behavior would be good  [07:52]
<dtaht> there's a patch for that coming, I think
<bmc> <FONT>Sounds like I should leave the router at 2, in case there are
      internal machines (e.g., windows breakage) that don't do ECN.</FONT>
<dtaht> heh
<dtaht> I'm not aware of ecn=1 breaking on ANYTHING except your old
	router. You were the first, the last, and the worst. 
<dtaht> but whatever
<bmc> <FONT>I'm just trying to grok this stuff.</FONT>  [07:53]
<bmc> <FONT>I'll try 1 on the router, see what happens.</FONT>
<dtaht> it helps to have qos on the router that applies it to streams that are
	killing your life, rather than drops it... But that's not a huge issue
	for you as you have bandwidth to burn.
<bmc> <FONT>Man, this dream plug is sweet. Tiny, small footprint (physical and
      electrical), quiet as all fuck, and real *nix, to boot.</FONT>
<dtaht> thx for tryin it. How does the 'dreamplug' feel? Is it a better piece
	of gear?
<dtaht> hahha
<dtaht> answered my question in advance  [07:54]
<bmc> <FONT>Way better. I resurrected the GuruPlug, via the JTAG. Trying to
      decide whether I have a use for it.</FONT>
<bmc> <FONT>Or whether I should give it to someone (e.g., Costine) and spread
      the love.</FONT>
<dtaht> yea, I loved the openrd, but the interviening releases of sheevaplug
	and guruplug left me cold. I'm also not happy with the wireless chip,
	but that's relatively minor.
<dtaht> spread the love, man....
<bmc> <FONT>That's what I'm thinking. … Okay, time for a conf call. By then,
      my kid should be awake and ready for waffles.</FONT>  [07:55]
<bmc> <FONT>BTW, the wireless is working just fine here.</FONT>
<bmc> <FONT>I use rc.local to adjust the params via uapctl.</FONT>
<dtaht> yea, well, start moving to the edge of the range and then watch your
	ping times....
<bmc> <FONT>Not an issue here.</FONT>
* dtaht plans to get one of these puppies too, after bmc is happy for a few
  weeks.
<bmc> <FONT>I have four WAPs in this interference-laden place. :-)</FONT>
* dtaht is using diversity mesh routing now with babel  [07:56]
<dtaht> babel + ahcpd is sweet
<dtaht> sit down, plug in the laptop
<dtaht> it figures out it's on wired
<bmc> <FONT>Something to look into, when I have time. If I ever have time
      again.</FONT>
<dtaht> unplug, it figures out you are on wireless
<bmc> <FONT>Niiiice.</FONT>
<dtaht> streams, and connections, STAY UP
<bmc> <FONT>Very sweet.</FONT>
<bmc> <FONT>Okay, time to make that call. Later.</FONT>
<dtaht> yea, it's amazing how freeing it is to be able to plug in again.
<dtaht> later  [07:57]
<dtaht> thx 
<dtaht> also the mesh routing 'diversity' means that I have several nodes that
	route over 5.x ghz and are aps over 2.4, and vice versa... Connect
	your neighbors
<dtaht> whenever you get time I wanted to know how that meeting turned out.
								        [07:58]
<bmc> <FONT>What meeting?</FONT>  [08:00]
<dtaht> some users group meeting of all the users groups  [08:07]
<bmc> <FONT>Right. I went to a lot of meetings last week. :-) That went
      well. We're moving forward, trying to get common venues, common
      calendars, etc.</FONT>  [08:10]
<bmc> <FONT>FYI, on Mac OS X:</FONT>  [08:12]
<bmc> <FONT>$ sysctl -a | egrep 'ecn|sack'<BR>net.inet.tcp.ecn_initiate_out:
      0<BR>net.inet.tcp.ecn_negotiate_in: 0<BR>net.inet.tcp.sack:
      1<BR>net.inet.tcp.sack_maxholes:
      128<BR>net.inet.tcp.sack_globalmaxholes:
      65536<BR>net.inet.tcp.sack_globalholes: 0<BR>net.inet.ipsec.ecn:
      0<BR>net.inet6.ipsec6.ecn: 0<BR></FONT>
<dtaht> heh. THANK YOU  [08:22]
* dtaht wanted a mesh network in philly to implement.
<bmc> <FONT>Another data point: (dancer:bmc) ~ $ uname -s -r  <BR>FreeBSD
      8.2-RELEASE<BR>(dancer:bmc) ~ $ sysctl -a | egrep
      'sack|ecn'<BR>vfs.bufreusecnt: 932<BR>net.inet.tcp.ecn.maxretries:
      1<BR>net.inet.tcp.ecn.enable: 0<BR>net.inet.tcp.sack.globalholes:
      0<BR>net.inet.tcp.sack.globalmaxholes:
      65536<BR>net.inet.tcp.sack.maxholes: 128<BR>net.inet.tcp.sack.enable:
      1<BR>net.inet.sctp.enable_sack_immediately:  [08:48]
<bmc> 0<BR>net.inet.sctp.nr_sack_on_off: 0<BR>net.inet.sctp.sack_freq:
      2<BR>net.inet.sctp.delayed_sack_time: 200<BR>net.inet.sctp.strict_sacks:
      1<BR>net.inet.sctp.ecn_nonce: 0<BR>net.inet.sctp.ecn_enable:
      1<BR></FONT>
<dtaht> sight  [08:50]
<dtaht> sigh  [08:51]
<bmc> <FONT>They're all different.</FONT>
<bmc> <FONT>I have OpenSolaris here, too. Want that data point?</FONT>
<dtaht> sure
<bmc> <FONT>Booting...</FONT>
* dtaht just had 3 new olpcs arrive and is mildly distracted
<bmc> <FONT>Nice.</FONT>  [08:52]
<bmc> <FONT>They make good nightlights, I'm told.</FONT>
<dtaht> the 1.5s are better nightlights
<dtaht> the 1.75s (I'm on the list) are cool
<dtaht> I'm trying to convince them to add 5.x ghz support
<bmc> <FONT>Every child should have that.</FONT>
<dtaht> hahahaha
<bmc> <FONT>Hmm… SunOS 5.11. sysctl not found...</FONT>  [08:53]
<bmc> <FONT>$ ndd /dev/tcp \?|egrep -i 'ecn|sack'<BR>tcp_sack_permitted
      (read and write)<BR>tcp_ecn_permitted              (read and
      write)<BR></FONT>  [08:58]
<bmc> <FONT>(sunball:bmc) /etc $ ndd -get /dev/tcp
      tcp_sack_permitted<BR>2<BR>(sunball:bmc) /etc $ ndd -get /dev/tcp
      tcp_ecn_permitted<BR>1<BR></FONT>  [08:59]
<bmc>
      <FONT>http://download.oracle.com/docs/cd/E19963-01/html/821-1450/chapter4-31.html</FONT>
<bmc> <FONT>(Oracle Solaris Tunable Parameters Reference Manual)</FONT>
<bmc> <FONT>ecn: 0 (disabled), 1 (passive enabled), or 2 (active enabled)
      </FONT>  [09:00]
<bmc> <FONT>Same values for SACK</FONT>
<bmc> <FONT>Defaults are as shown above.</FONT>  [09:01]
<dtaht> excellent.  [09:09]
<bmc> <FONT>I just tweeted this: When you've spent the last decade mostly
      using Linux and BSD, the infrequent foray into Solaris feels like going
      to Mars. #unix</FONT>
<dtaht> So if I get you to turn it on, that will only leave about 2 billion
	computers left to fix and 10s of thousands or routers left to junk
								        [09:10]
<dtaht> heheheh
<dtaht> solaris is like 1998
<bmc> <FONT>I don't even want to think about how one accomplishes this in
      HP/UX.</FONT>
<bmc> <FONT>Assuming it's even possible.</FONT>
<dtaht> thx for the data I'm going to update the wiki in a bit
<bmc> <FONT>Or, for that matter, AIX, which makes Mars seem familiar.</FONT>
<dtaht> hahahah
<dtaht> do these things have sysctl.conf?
<bmc> <FONT>I didn't see a reference to an ndd.conf</FONT>  [09:11]
<bmc> <FONT>http://www.sean.de/Solaris/soltune.html#ndd</FONT>
<bmc> <FONT>Worth skimming.</FONT>  [09:12]
<bmc> <FONT>Of course, Solaris no longer has an /etc/rc.local, either.</FONT>
<bmc> <FONT>Instead, you're supposed to create something in /etc/init.d
      (rc.local is fine), then symlink it to an ""S"" file in the appropriate
      runlevel directory (e.g., rc3.d).</FONT>
<bmc> <FONT>*sigh*</FONT>
<bmc> <FONT>Wait...</FONT>  [09:13]
<bmc> <FONT>I just ran across this:</FONT>
<bmc> <FONT>To set parameters so they remain in effect after you reboot the
      system, add the parameter values to /etc/system when you want to
      configure parameters for all devices in the system.</FONT>
<bmc> <FONT>A startup script can also be used to set a ndd parameters across
      system reboots. Include the appropriate ndd command in a system startup
      script, such as the /etc/init.d/inetinit file or a customized script in
      /etc/rc2.d or /etc/rc3.d. Be sure to make a copy of any files before
      adding the ndd commands.</FONT>  [09:14]
ERC> 


      http://www.vistax64.com/vista-general/53861-how-do-you-enable-ecn-explicit-congestion-notification.html</FONT>
								        [09:15]
<bmc> <FONT>Gotta run. Back later.</FONT>
ERC> ","",2011-06-21 08:16:24.890037,2
65,65,3,"h1. Build configuration

There will be several different builds for different [[targets]] as time goes by, but these are the core changes to the openwrt build that uberwrt enabled builds will have.

We will build both mainline openwrt and the following branches under control of the main [[buildbot]] based openwrt [[buildmaster]]. 

h2. Patches

[[pfifo ECN patches]]
[[bloat:CHOKe]] and [[bloat:SFB]] support
[[bloat:eBDP]]

h2. Mandatory features

* [[bloat:ECN]], [[bloat:SACK]], [[bloat:DSACK]] will be enabled by default

* TXQUEUELEN will be reduced by default on wired and wireless

* DMA TX queues will be reduced by default on wired and wireless

* TX RETRIES on wireless will be reduced by default

* IPv6 support, including IPsec, 6rd, ipv6 tunneling, radvd

* The polipo proxy will be included by default 

* Different forms of TCP/ip (Vegas, Reno, Cubic, Bic, Westwood) are enabled - westwood+ is the default

* Switching to using openssl as the default ssl provider 

* Web server support (lighttpd)

* Shaper scripts will be distributed by default

* Gui: Luci

* More?

h2. Under debate


* [[perfect wireless router]]

h2. Optional

Given the load this places on flash, a GUI may end up being optional and/or loaded on a USB stick.

There are routers with more flash in the pipeline from Buffalo and others.

h2. Futures

Ultimately some of this may incorporate the more radical changes from the [[wisp6]] project","",2011-07-01 14:40:20.228318,10
220,220,193,"h1. Sharing Windows Files from wired to wireless

By default Cerowrt routes between network interfaces rather than bridge them. This improves performance markedly however it is an uncommon concept, and introduces problems with protocols and applications that expect everything to be on the same 'wire'. 

Windows filesharing by default, expects everything to be on the same wire. However, for larger deployments, it has always had the ability to share files and printers across different wires, it has merely fallen into disuse and is not enabled by default. Further, cerowrt doesn't include windows support by default at this time, but it can be installed via an optional package.

h2. Instructions

1)  On each PC, enable NetBIOS over TCP/IP.  I found this disabled on both Windows XP and Windows 7 machines.  Go to the properties for your network adapter, select Internet Protocol Version 4 then click on the Properties button.  When the Properties window comes up, click on the Advanced... button in the lower-right hand corner.  When the Advanced Settings window comes up, make sure that ""Enable NetBIOS over TCP/IP"" is selected.  LMHOSTS lookup can be on or off.

2)  Install the samba36-server package on the router to enable WINS support, via:

<pre>
   opkg update
   opkg install luci-app-samba

   (or install via the web interface)
</pre>

3)  By default, /etc/config/samba will look like:

<pre>
   config samba
       option 'name'                   'openwrt'
       option 'workgroup'              'openwrt'
       option 'description'            'openwrt'
       option 'homes'                  '1'

   config sambashare
       option 'name'                   'tmp'
       option 'path'                   '/tmp'
       option 'read_only'              'no'
       option 'guest_ok'               'no'
       option 'create_mask'            '0700'
       option 'dir_mask'               '0700'
       #option 'users'                 'abc'
</pre>

   Change the 'workgroup' option above to match your Windows workgroup name, or re-configure the workgroup of all the Windows
computers to be OPENWRT (matches default 'workgroup' above)

You MAY need to supply more options, we're working on it.

5)  Modify ""/etc/samba/smb.conf.template"" and add this line to the
[global] section:

<pre>
   # Next line needed for Windows 7
   reset on zero vc = no

   wins support = yes
</pre>

6)  Start samba via:

<pre>
   /etc/init.d/samba start
</pre>

And there may be more things required to make samba be correct.

7)

On Windows XP and later, the built-in firewall will filter incoming NetBIOS over TCP traffic from remote subnets.  This is only an issue on machines that are actually sharing files.

* On Windows XP, go to Control Panel, open Windows Firewall and switch to the Exceptions tab.  Select the ""File and Printer Sharing"" entry and click ""Edit Scope"".  You will need to enter a custom scope of ""172.30.42.0/24"".
* On Windows 7, running the following as Administrator should work:
<pre>netsh advfirewall firewall set rule group=""File and Printer Sharing"" new enable=Yes remoteip=172.30.42.0/24

rem Next lines are based on http://www.sevenforums.com/system-security/257798-windows-7-ipsec-vpn-client-firewall-configuration.html#post2136247
netsh advfirewall firewall set rule name=""File and Printer Sharing (NB-Session-In)"" new remoteip=172.30.42.0/24,LocalSubnet
netsh advfirewall firewall set rule name=""File and Printer Sharing (NB-Name-In)"" new remoteip=172.30.42.0/24,LocalSubnet
netsh advfirewall firewall set rule name=""File and Printer Sharing (NB-Datagram-In)"" new remoteip=172.30.42.0/24,LocalSubnet
netsh advfirewall firewall set rule name=""File and Printer Sharing (Echo Request - ICMPv4-In)"" new remoteip=172.30.42.0/24,LocalSubnet
</pre>

Alternatively, go to Control Panel, then Firewall.  Click on Advanced Settings (in the left hand panel), then in the ""Incoming Rules"" folder, open ""File and Printer Sharing (SMB-in) (Private Profile)"".  In the Scope tab, add the remote IP address ""172.30.42.0/24"".

8)  Open Windows Explorer, and make sure you can see the computers on the wireless subnet from the computers on the wired subnet, and vice-versa (this will be in the Network section in the lower-left hand corner).  Try to access the file share of a remote system using its Windows file path:

<pre>
   \\WIRED (from a wireless computer)
</pre>

9)  One it's all working, open the router GUI, click on the System tab in the top row, then on the Startup tab in the second row.  Make sure the ""samba"" is Enabled.  This is so Samba starts when the router is rebooted.

","",2013-06-18 02:37:21.305201,8
206,206,3,"h1. Custom homepage

Cerowrt has a fast, but basic web server, installed. There is, for example, no php support, so only static web pages are supported at present. 
(python, fastcgi, etc are available as options)

You can customize your landing page by uploading a new index.html into /etc/www.

If you intend to have lots of data stored on the router, however, it is best to change /etc/lighttpd/cerowrt.conf to point it's home dir onto a usb stick or hard disk,
and upload your pages there.
","",2011-09-05 11:34:31.927162,2
83,83,213,"h1. Introduction

Bufferbloat is the undesirable latency that comes from a router or other network equipment buffering too much data. It is a huge drag on Internet performance created, ironically, by previous attempts to make it work better.  The one-sentence summary is ""Bloated buffers lead to network-crippling latency spikes.""

The bad news is that bufferbloat is everywhere, in more devices and programs than you can shake a stick at. The good news is, bufferbloat is now, after 4 years of research, development and deployment, relatively easy to fix. See: fq_codel: [[codel:wiki]]. The even better news is that fixing it may solve a lot of the service problems now addressed by bandwidth caps and metering, making the Internet faster and less expensive for both users and providers.

The introduction below to the problem is extremely old, and we recommend learning about bufferbloat via van jacobson's ""fountain"":http://www.bufferbloat.net/projects/cerowrt/wiki/Bloat-videos model instead. Although the traffic analogy is close to what actually happens... in the real world, you can't evaporate the excessive cars on the road, which is what we actually do with systems like fq_codel [[codel:wiki]].

Still, onward to the blow. 

h2. Packets on the Highway

To fix bufferbloat, you first have to understand it.  Start by imagining vehicles traveling down an imaginary road. They're trying to get from one end to the other as fast as possible, so they travel nearly bumper to bumper at the road's highest safe speed.

Our ""vehicles"" are standing in for Internet packets, of course, and our road is a network link. The 'bandwidth' of the link is like the total mount of stuff the cars can carry from one end to the other per second; the 'latency' is like the amount of time it takes any given ar to get from one end to the other.

One of the problems road networks have to cope with is traffic congestion.  If too many cars try to use the road at once, bad things happen.  One of those bad things is cars running off the road and crashing. The Internet analog of this is called 'packet loss'. We want to hold it to a minimum - however we do not want to eliminate it it entirely.

There's an easy way to attack a road congestion problem that's not actually used much because human drivers hate it. That's to interrupt the road with a parking lot. 

You drive in, a traffic cop at the exit tells you when you can leave, and then you drive out. If there's nobody using the parking lot, you can just zip right through.

But, as the parking lot fills the cop at the exit becomes ever more necessary.

He has to control the timing and rate by which vehicles exit the parking lot, so he can hold the number of vehicles in the road downstream of the lot at sane levels. He looks at the upstream road he's protecting occasionally, to make sure he's not causing problems here.

We only have one cop managing the lot in this case, so the other thing that has to be true is that the lot doesn't exceed its maximum capacity.  That is, cars leave often enough relative to the speed at which they come in that there's always space in the lot for incoming cars.

The Internet analog of our parking lot is a packet buffer. People who build network hardware and software have been raised up to hate losing packets the same way highway engineers hate auto crashes.  So they put lots of huge buffers everywhere on the network.

In network jargon, this optimizes for bandwidth.  That is, it maximizes the amount of stuff you can bulk-ship through the network in constant time. The problem is that it does horrible things to latency. To see why, let's go back to our cars in the parking lot.

It's rush hour now, and vehicles of all types enter the parking lot, faster than they can exit. Emergency vehicles, cars, vans, food trucks, all pile up in the order they arrived. (This is called FIFO - first IN, First Out order).

Our bufferbloated parking lot is so big that our cop can't see from one end to the other. He can't see what vehicles are important, and which ones are not.

Our poor traffic cop overloads - he's so busy sorting out the traffic jam in front of him, he can't look upstream anymore, either. He gets distracted by the mess in front of him; people start driving over the berm, smooth traffic flows become clumpy, and the highway he's trying to manage gets overloaded.

When this happens to the Internet, the parking lot - the buffer - adds latency to the connection.  Packets get large time delays, just like you would when stuck in a real-world traffic jam. Smooth network traffic turns into a herky-jerky stuttering thing; cars try to find alternate routes, and often fail.

A constantly spaced string of vehicles coming in tends to turn into a series of clumps coming out, with size of each clump controlled by the width of the exit from the parking lot.  This is a problem, because car clumps tend to cause car crashes.

Performance becomes worse than if the buffer weren't there at all. And - this is an important point - the larger (more bloated) the buffer is, the worse the problems are.

The Bufferbloat Project has found some really, really, really oversized parking lots on the Internet. May Internet connections have buffers that, if the connections were highways, would be the proportional size of the state of Texas.

h2. From Highway to Network

Now imagine a huge network of roads and highways, each with parking lots at their intersections. Cars trying to get through will experience multiple cascading delays, and initially smooth traffic will become clumpy and chaotic. Clumps from upstream buffers will clog downstream buffers that might have handled the same volume of traffic as a smooth flow, leading to serious and sometimes unrecoverable packet loss.

As the total traffic becomes heavier, network traffic patterns will grow burstier and more chaotic. Usage of individual links will swing rapidly and crazily between emptiness and overload cascades. Latencies, and total packet times, will zig from instantaneous to check-again-next-week-please and zag back again in no predictable pattern.

Packet losses - the very problem all those buffers were put in to prevent - will begin to increase dramatically once all the buffers are full, because the occasional thousand car pileup is the only thing that can currently tell Internet routers to slow down their sending. 

Bad consequences of this are legion. One of the most obvious is what latency spikes do to the service that converts things like website names to actual network addresses - DNS lookups get painfully slow. Voice-over-IP services like Skype and video streamers like YouTube become stuttery, prone to dropouts, and painful to use. Gamers get fragged more.

The way these latency-sensitive services degrade illustrates a general point.  Perceived speed of the Internet is much more a function of latency (time to get a response) than of bandwidth (ability to bulk-ship). Thus, bufferbloat hammers the performance characteristic users care about most.

For the more technically-inclined reader, there are several other important Internet service protocols that degrade badly in an environment with serious latency spikes: NTP, ARP, DHCP, SSH, and various routing protocols. Yes, things as basic as your system clock time can get messed up!

And - this is the key point - the larger and more numerous the buffers on the network are, the worse these problems get.  This is the bufferbloat problem in a nutshell.

One of the most insidious things about bufferbloat is that it easily masquerades as something else: underprovisioning of the network. But buying fatter pipes doesn't fix the bufferbloat cascades, and buying larger buffers actually makes them worse! 

h2. Three Cures and a Blind Alley

Now that we understand the bufferbloat problem, what can we do about it?

We can start by understanding how we got into this mess; mainly, by equating ""The data must get through!"" with zero packet loss.

Hating packet loss enough to want to stamp it out completely is actually a bad mental habit.  Unlike real cars on real highways, the Internet's foundational TCP/IP protocol is designed to respond to crashes by resending an identical copy when a packet send is not acknowledged.  In fact, the Internet's normal mechanisms for avoiding congestion rely on the occasional packet loss to trigger them.  Thus, the perfect is the enemy of the good; some packet loss is essential.

But, historically, the designers of network hardware and software have tended to break in the other direction, bloating buffers in order to drive packet losses to zero.  Undoing this mistake will pay off hugely in improved network performance.

There are three main tactics:

First, we can *pay attention*!  Bufferbloat is easy to test for once you know how to spot it.  Testing for bufferbloat and fixing it needs to be part of the normal duties of every device designer, software driver author, and every network administrator. Some fixes are easy enough for Aunt Tilly to install.

Second, we can decrease unmanaged buffer sizes.  This cuts the delay due to buffering and decreases the clumping effect on the traffic.  It can increase packet loss, but that problem is coped with pretty well by the Internet's normal congestion-avoidance methods. As long as packet losses remain unusual events (below the levels produced by
bufferbloat cascades), resends will happen as needed and the data will get through.

Third, we can use smarter rules than FIFO for when and by how much a buffer should try to empty itself.  That is, we need buffer-management rules that we can expect to statistically smooth network traffic rather than clumpifying it.  The reasons smarter rules have not been universally deployed already are mainly historical; now, this can and
should be fixed.

Next we need to point out one tactic that won't work by itself.  

Some people think the answer to Internet congestion is to turn each link into a multi-lane highway, with toll booths, fast lanes, slow lanes and carpooling. The theory of QoS (""Quality Of Service"") is that you can put priority traffic in fast lanes and bulk traffic in slow ones.

This approach has historical roots in things telephone companies used to do. It doesn't work well for Internet traffic. To return to the roads and highway analogy, only a few spots have carpool lanes, and rest of the roads are still jammed.  Once the special lanes are gone (you get to another part of the network), there's still dozens of overstuffed parking lots administered by cops with different rules...

Explicit QoS may have a place in our overall strategy for network performance, but the right order to do things is this: first, reduce the size of the parking lots, then get buffer management right, then implement QoS on top of that.

== How Hard Is It? ==

We started by asserting that bufferbloat is easy to fix.  First we'll lay out the reasons for optimism, then the problems:

First, it's easy to detect once you understand it - and verifying that you've fixed it is easy, too.

Second, many fixes are cheap and give direct benefits as soon as you've applied them.  You don't have to wait for other people to fix bufferbloat in their devices to improve the performance of your own.

Third, you'll usually only have to fix it once per device; continual tuning isn't necessary.

Fourth (and importantly!), trying to fix bufferbloat won't significantly increase your risk of a network failure. If you fumble the first time, it's reversible.

The hard problems are these:

First, we don't yet know how to write good buffer-management rules for networks with variable bandwidth.  This is a research area, as we write in early 2011 good results seem likely soon.

Second, lots of devices and device drivers need to get debloated, their fixes tested, and the manufacturers convinced field upgrades are worthwhile. This is going to take some time.

Third, a lot of devices (especially consumer-grade routers, but also wireless access points, switches, DSLAMs, and cable modems) are difficult enough to upgrade firmware on that they will need to be replaced. Since the IPv6 transition is bearing down on us, however, it may be possible to fold our upgrade wave into that one.

h2. The Stakes Are High

Those of us who have been studying bufferbloat believe that many of the problems now attributed to under-capacity and bandwidth hogging are actually symptoms of bufferbloat.  We think fixing the bufferbloat problem may well make many contentious arguments about usage metering, bandwidth caps, and tiered pricing unnecessary.  At the very least, we think networks should be systematically audited for bufferbloat before more resources are plowed into fixing problems that may be completely misdiagnosed.

We also have some worries about the future.  For various reasons (including the gradual retirement of Windows XP) more and more Internet traffic is now running over saturated links.  In this new environment, we think there is a possibility that bufferbloat cascades and defects in buffer-management strategies might produce self-synchronising behaviour in network traffic - packet floods and network resonance on a local, regional or global scale that could be a greater threat to the Internet than the congestion-driven near-collapse of the NSF backbone in 1986.

This is a classic ""black swan"" situation in Nassim Taleb's sense; in today's Internet-dependent economy there is a potential for nearly incalculable havoc in the worst case, but we don't even know in principle how to estimate the overall risk.  Bufferbloat mitigation might keep us out of some very serious trouble, and is worth pursuing
on those grounds alone.
","",2015-05-16 12:54:51.589557,7
29,29,3,"h1. Experiment - TCP Cubic vs TCP Vegas

PURPOSE: examine TCP responses to short and long haul 802.11n packet loss.

On a suggestion from one of the posters to jg's blog, I took a look at tcp vegas. The results I got were puzzling. 

With tcp cubic, I typically get 71Mbit/sec and the side effects of bufferbloat with a single stream.

With vegas turned on, a single stream peaks at around 20Mbit.

10 vegas streams did about 55Mbit in total. 

Can I surmise that TCP cubic is like a dragster, able to go really fast in one direction down a straightaway, and TCP vegas more like an 80s model MR2, maneuverable, but underpowered?

The testbed network: !http://nex-6.taht.net/images/housenet.png! 

The first test path: laptop->nano-m->nano-m->openrd 
    (I note that this path almost never exhibits packet loss) 

Most of the machines on the path are running with minimal txqueues and dma buffers running as low as they can go. (I'll fully document this in a bit)

h2. TEST 1 - raw throughput, maximum wireless speed

h3. With cubic:

<pre><code class=""sh"">
$ openrd: iperf -s 
$ laptop: iperf -t 60 -c openrd
</code></pre>

h3. With vegas (on both laptop and server)

<pre><code class=""sh"">
modprobe tcp_vegas
echo vegas > /proc/sys/net/ipv4/tcp_congestion_control

openrd:$ iperf -s 
laptop:$ iperf -t 60 -c openrd &
laptop:$ ping openrd
</code></pre>
On a failed hunch, I also re-ran the tests with a much larger 
receive/transmit windows:

<pre><code class=""sh"">
echo 8388608 > /proc/sys/net/core/rmem_max  # on both machines
echo 8388608 /proc/sys/net/core/wmem_max    # on both machines
openrd: iperf -w8m -s
laptop: iperf -t 60 -w8m -c openrd
</code></pre>

To no net difference in effect.

Conclusion: In part, people like vegas because it is slower than cubic and thus has fewer side effects. More research into vegas's response to latency is desirable, which we can do with series 2.

Also - some required background reading: http://neal.nu/uw/linux-vegas/ 
And potential test tools: http://psps.perfsonar.net/

h2. Test 2 - testing with minimal wireless speed

TBD

h2. Test 3 - testing with packet loss

TBD

h2. Test 4 - testing with de-bufferbloated drivers

TBD

h2. Test 5 - testing with traffic shaping

TBD
","",2011-02-02 12:00:17.835379,10
207,207,3,"h1. Cosmic background bufferbloat detector

h2. NTP
","",2011-09-05 14:30:18.503644,1
79,79,3,"h1. OpenWRT build for the wndr3700v2

Presently the prototypes are being built on http://huchra.bufferbloat.net/wndr3700

Please send a ssh key to bismark-admins if you wish to access the build system directly.

(this will become simpler in the future AND the build server will move)

If you wish to do your own builds, see:

[[Setting up an OpenWRT Toolchain]] or [[Setting up a wndr3700 Toolchain at home]]","",2011-04-16 07:45:06.880556,2
108,108,3,"h1. Openwrt tips

h2. Finding out what packages you have installed from your feeds

find package/feeds/ -type l -print  | while read x; do basename $x; done

","",2011-05-08 10:45:26.306227,1
39,39,3,"h1. Experiment - Bloated LAGN vs debloated WNDR5700

WARNING: THIS IS JUST NOTES, A DRAFT, FROM AN ONGOING EXPERIMENT

!>http://nex-6.taht.net/images/housenet.png!

h2. NET2 (LAGN(bloated) -> WNDR5700 (debloated) -> OPENRD 

Connected at 36Mbit

h3. Uncontended

64 bytes from 192.168.176.1: icmp_req=90 ttl=63 time=0.905 ms
64 bytes from 192.168.176.1: icmp_req=91 ttl=63 time=0.723 ms
64 bytes from 192.168.176.1: icmp_req=92 ttl=63 time=1.25 ms
64 bytes from 192.168.176.1: icmp_req=93 ttl=63 time=0.927 ms

Hey - gigE is actually useful on the router.

h3. under load - bloated to debloated

64 bytes from 192.168.176.1: icmp_req=39 ttl=63 time=147 ms
64 bytes from 192.168.176.1: icmp_req=40 ttl=63 time=147 ms
64 bytes from 192.168.176.1: icmp_req=41 ttl=63 time=146 ms

h3. debloated to bloated

Going the other way, where I actually have a sane txqueue and dma buffers

64 bytes from 192.168.176.1: icmp_req=1 ttl=63 time=2.73 ms
64 bytes from 192.168.176.1: icmp_req=2 ttl=63 time=3.30 ms
64 bytes from 192.168.176.1: icmp_req=3 ttl=63 time=2.69 ms
64 bytes from 192.168.176.1: icmp_req=4 ttl=63 time=2.69 ms
64 bytes from 192.168.176.1: icmp_req=5 ttl=63 time=2.36 ms
64 bytes from 192.168.176.1: icmp_req=6 ttl=63 time=3.58 ms
64 bytes from 192.168.176.1: icmp_req=7 ttl=63 time=3.50 ms
64 bytes from 192.168.176.1: icmp_req=8 ttl=63 time=3.53 ms
64 bytes from 192.168.176.1: icmp_req=9 ttl=63 time=2.54 ms
64 bytes from 192.168.176.1: icmp_req=10 ttl=63 time=1.82 ms
64 bytes from 192.168.176.1: icmp_req=11 ttl=63 time=3.15 ms

And under contention (4 streams) it does start to exhibit about 4% packet loss on pings

h3. debloated to bloated with TCP/vegas

NOTES:

TCP vegas actually outperformed veno 19.9Mbit vs 19.4Mbit for a single transfer but this is well within the range of statistical variance.


* NET1 e1000e -> nanostation M5 -> nanostation M5 -> openrd

It's connected at 135MB-180MB 220k window size
Empty: 1.9ms

[  3] local 192.168.176.1 port 41965 connected with 192.168.23.20 port 5001
64 bytes from 192.168.23.20: icmp_req=2 ttl=62 time=5.82 ms
64 bytes from 192.168.23.20: icmp_req=3 ttl=62 time=5.39 ms
64 bytes from 192.168.23.20: icmp_req=4 ttl=62 time=10.5 ms
64 bytes from 192.168.23.20: icmp_req=5 ttl=62 time=14.4 ms
64 bytes from 192.168.23.20: icmp_req=6 ttl=62 time=8.62 ms
64 bytes from 192.168.23.20: icmp_req=7 ttl=62 time=4.31 ms
64 bytes from 192.168.23.20: icmp_req=8 ttl=62 time=9.03 ms
64 bytes from 192.168.23.20: icmp_req=9 ttl=62 time=5.30 ms
64 bytes from 192.168.23.20: icmp_req=10 ttl=62 time=6.56 ms
64 bytes from 192.168.23.20: icmp_req=11 ttl=62 time=5.72 ms
64 bytes from 192.168.23.20: icmp_req=12 ttl=62 time=14.4 ms
64 bytes from 192.168.23.20: icmp_req=13 ttl=62 time=11.4 ms
64 bytes from 192.168.23.20: icmp_req=14 ttl=62 time=10.9 ms

64 bytes from 192.168.176.1: icmp_req=2 ttl=62 time=8.93 ms
64 bytes from 192.168.176.1: icmp_req=3 ttl=62 time=5.42 ms
64 bytes from 192.168.176.1: icmp_req=4 ttl=62 time=10.2 ms
64 bytes from 192.168.176.1: icmp_req=5 ttl=62 time=5.44 ms
64 bytes from 192.168.176.1: icmp_req=6 ttl=62 time=7.23 ms
64 bytes from 192.168.176.1: icmp_req=7 ttl=62 time=8.19 ms
64 bytes from 192.168.176.1: icmp_req=8 ttl=62 time=8.15 ms

Lets change the txqueuelen

PING 192.168.176.1 (192.168.176.1) 56(84) bytes of data.
64 bytes from 192.168.176.1: icmp_req=1 ttl=62 time=2.19 ms
------------------------------------------------------------
Client connecting to 192.168.176.1, TCP port 5001
TCP window size: 16.0 KByte (default)
------------------------------------------------------------
[  3] local 192.168.22.101 port 60572 connected with 192.168.176.1 port 5001
64 bytes from 192.168.176.1: icmp_req=2 ttl=62 time=9.20 ms
64 bytes from 192.168.176.1: icmp_req=3 ttl=62 time=3.14 ms
64 bytes from 192.168.176.1: icmp_req=4 ttl=62 time=9.45 ms
64 bytes from 192.168.176.1: icmp_req=5 ttl=62 time=9.25 ms
64 bytes from 192.168.176.1: icmp_req=6 ttl=62 time=9.29 ms
64 bytes from 192.168.176.1: icmp_req=7 ttl=62 time=8.55 ms
64 bytes from 192.168.176.1: icmp_req=8 ttl=62 time=7.34 ms
64 bytes from 192.168.176.1: icmp_req=9 ttl=62 time=12.8 ms
64 bytes from 192.168.176.1: icmp_req=10 ttl=62 time=9.41 ms
64 bytes from 192.168.176.1: icmp_req=11 ttl=62 time=10.4 ms
64 bytes from 192.168.176.1: icmp_req=12 ttl=62 time=6.47 ms
64 bytes from 192.168.176.1: icmp_req=13 ttl=62 time=8.90 ms
64 bytes from 192.168.176.1: icmp_req=14 ttl=62 time=10.5 ms
64 bytes from 192.168.176.1: icmp_req=15 ttl=62 time=9.85 ms
64 bytes from 192.168.176.1: icmp_req=16 ttl=62 time=12.0 ms
64 bytes from 192.168.176.1: icmp_req=17 ttl=62 time=8.86 ms
64 bytes from 192.168.176.1: icmp_req=18 ttl=62 time=8.98 ms
64 bytes from 192.168.176.1: icmp_req=19 ttl=62 time=9.00 ms
64 bytes from 192.168.176.1: icmp_req=20 ttl=62 time=9.92 ms
64 bytes from 192.168.176.1: icmp_req=21 ttl=62 time=7.48 ms
64 bytes from 192.168.176.1: icmp_req=22 ttl=62 time=6.63 ms
64 bytes from 192.168.176.1: icmp_req=23 ttl=62 time=3.86 ms
64 bytes from 192.168.176.1: icmp_req=24 ttl=62 time=8.86 ms

64 bytes from 192.168.23.20: icmp_req=8 ttl=62 time=9.80 ms
64 bytes from 192.168.23.20: icmp_req=9 ttl=62 time=10.1 ms
64 bytes from 192.168.23.20: icmp_req=10 ttl=62 time=5.34 ms
64 bytes from 192.168.23.20: icmp_req=11 ttl=62 time=12.5 ms
64 bytes from 192.168.23.20: icmp_req=12 ttl=62 time=6.42 ms
64 bytes from 192.168.23.20: icmp_req=13 ttl=62 time=3.11 ms
64 bytes from 192.168.23.20: icmp_req=14 ttl=62 time=7.91 ms
64 bytes from 192.168.23.20: icmp_req=15 ttl=62 time=5.12 ms
64 bytes from 192.168.23.20: icmp_req=16 ttl=62 time=7.44 ms
64 bytes from 192.168.23.20: icmp_req=17 ttl=62 time=12.8 ms
64 bytes from 192.168.23.20: icmp_req=18 ttl=62 time=6.99 ms
64 bytes from 192.168.23.20: icmp_req=19 ttl=62 time=11.9 ms
64 bytes from 192.168.23.20: icmp_req=20 ttl=62 time=8.37 ms
64 bytes from 192.168.23.20: icmp_req=21 ttl=62 time=5.14 ms
64 bytes from 192.168.23.20: icmp_req=22 ttl=62 time=4.25 ms


root@cruithne:/media/c2e4f42e-9fdc-438c-998f-53c0abaf27f3/backups/cruithne/home/d/src/iperf-2.0.8# echo 16777216 > /proc/sys/net/core/wmem_max 
root@cruithne:/media/c2e4f42e-9fdc-438c-998f-53c0abaf27f3/backups/cruithne/home/d/src/iperf-2.0.8# echo 16777216 > /proc/sys/net/core/rmem_max 


OK so on the wnder:

unloaded
64 bytes from 192.168.176.1: icmp_req=1 ttl=63 time=1.20 ms
64 bytes from 192.168.176.1: icmp_req=2 ttl=63 time=1.13 ms
^C

36Mb/sec

...


64 bytes from 192.168.172.181: icmp_req=2 ttl=63 time=4.30 ms
64 bytes from 192.168.172.181: icmp_req=3 ttl=63 time=3.77 ms
64 bytes from 192.168.172.181: icmp_req=4 ttl=63 time=2.22 ms
64 bytes from 192.168.172.181: icmp_req=5 ttl=63 time=1.02 ms
64 bytes from 192.168.172.181: icmp_req=7 ttl=63 time=4.55 ms
64 bytes from 192.168.172.181: icmp_req=8 ttl=63 time=5.66 ms
64 bytes from 192.168.172.181: icmp_req=9 ttl=63 time=4.72 ms
64 bytes from 192.168.172.181: icmp_req=10 ttl=63 time=2.85 ms
64 bytes from 192.168.172.181: icmp_req=11 ttl=63 time=4.19 ms
64 bytes from 192.168.172.181: icmp_req=12 ttl=63 time=3.77 ms
64 bytes from 192.168.172.181: icmp_req=13 ttl=63 time=2.47 ms
64 bytes from 192.168.172.181: icmp_req=14 ttl=63 time=4.20 ms
64 bytes from 192.168.172.181: icmp_req=15 ttl=63 time=4.31 ms
64 bytes from 192.168.172.181: icmp_req=17 ttl=63 time=1.79 ms
64 bytes from 192.168.172.181: icmp_req=18 ttl=63 time=4.19 ms
64 bytes from 192.168.172.181: icmp_req=19 ttl=63 time=3.80 ms
64 bytes from 192.168.172.181: icmp_req=20 ttl=63 time=2.16 ms
64 bytes from 192.168.172.181: icmp_req=21 ttl=63 time=3.43 ms
64 bytes from 192.168.172.181: icmp_req=22 ttl=63 time=2.67 ms
64 bytes from 192.168.172.181: icmp_req=23 ttl=63 time=3.10 ms
64 bytes from 192.168.172.181: icmp_req=24 ttl=63 time=8.62 ms


64 bytes from 192.168.172.181: icmp_req=59 ttl=63 time=3.39 ms

--- 192.168.172.181 ping statistics ---
60 packets transmitted, 54 received, 10% packet loss, time 59046ms
rtt min/avg/max/mdev = 0.958/3.517/8.623/1.369 ms
[  3]  0.0-61.1 sec    139 MBytes  19.0 Mbits/sec


PING 192.168.176.1 (192.168.176.1) 56(84) bytes of data.
64 bytes from 192.168.176.1: icmp_req=1 ttl=63 time=44.5 ms
64 bytes from 192.168.176.1: icmp_req=2 ttl=63 time=48.3 ms
64 bytes from 192.168.176.1: icmp_req=3 ttl=63 time=74.9 ms
64 bytes from 192.168.176.1: icmp_req=4 ttl=63 time=111 ms
64 bytes from 192.168.176.1: icmp_req=5 ttl=63 time=84.7 ms
64 bytes from 192.168.176.1: icmp_req=6 ttl=63 time=121 ms
64 bytes from 192.168.176.1: icmp_req=7 ttl=63 time=139 ms
64 bytes from 192.168.176.1: icmp_req=8 ttl=63 time=141 ms
","",2011-02-03 07:25:31.337195,1
116,116,3,"h1. Why 42?

No reason in particular, apart from the fact that it's unlikely to conflict with upstream NATs and other routers normally configured on the 192.168.1. and 192.168.0. addresses.

It's also the answer to ""Life, the Universe, and Everything"":http://en.wikipedia.org/wiki/Phrases_from_The_Hitchhiker%27s_Guide_to_the_Galaxy#Answer_to_the_Ultimate_Question_of_Life.2C_the_Universe.2C_and_Everything_.2842.29

What was the question?","",2011-05-18 12:41:00.098558,3
111,111,3,"h1. Huchra openwrt build procedure

h2. When working on a bismark package on huchra

Login as bismark
cd ~bismark/src/bismark-packages
make the change to the package 
update the version number in its makefile
git commit -a # the change
cd ~bismark/src/capetown-wndr3700v2
./scripts/feeds update # you will see your package pulled
make package/whateveritis/{compile,install} V=99

(e.g. Wash, rinse, repeat until it compiles and installs)

h2. to get it into the package repo
echo make -j 8  | batch  

# wait for email to the bismark account, read email in mutt with the log
On your client box

opkg update the_package @ FROM HUCHRA in your opkg repo @


AFTER you are shure it is working, push it out to the main repositories

@echo ~bismark/bin/sync_repos | batch@


UPDATE THE BUG on the wiki","",2011-05-13 07:11:18.80824,3
87,87,3,"h1. Experts

h2. TCP/ip

h2. Queuing Theory

h2. Routing

h2. VOIP

h2. Embedded Systems

h2. Wireless

h2. OSes

h3. Linux

h3. Windows

h3. OSX","",2011-04-11 08:08:58.610023,2
107,107,213,"h1. Wiki

This project has only recently been broken out of the core [[uberwrt:wiki|Uberwrt wiki]]. Go there for more details.

*Update - March 2012:* The [[Cerowrt:|CeroWrt]] project has taken on most of the development effort for this project.","",2012-03-17 10:13:19.766408,4
31,31,3,"h1. Experiments

h1. Experiments with interesting results

[[Experiment-Fun with wireless]]

[[Experiment-Fun with your switch]]

h1. Experiments in progress

[[Experiment - TCP cubic vs TCP vegas]]

[[Experiment - BismarkECNDNSGOOGLE]]



","",2011-05-21 13:44:50.981631,4
119,119,3,"h1. Wiki

This is a place for general notes about how the backend servers actually work, intended for those doing system administration of the backend bismark servers.

DO NOT PUT PASSWORDS or certificates on this wiki. 

Keep those locked up with passwordsafe or equivalent elsewhere.
[[Future directions]]

[[Postgres Configuration]]
[[Backup configuration]] 
[[Web Server Configuration]] 
[[Fcgi configuration]] 
[[Rsync Configuration]]
[[DNS configuration]]","",2011-05-22 04:15:24.558413,3
147,147,3,"h1. Wireless Oprofile

this is the result of an iperf for 20 seconds.


vma      samples  cum. samples  %        cum. %     app name                 symbol name
-------------------------------------------------------------------------------
0000000000000000 952      952           11.0608  11.0608    ath9k                    /ath9k
  0000000000000000 952      952           100.000  100.000    ath9k                    /ath9k [self]
-------------------------------------------------------------------------------
0000000000000000 883      1835          10.2591  21.3199    mac80211                 /mac80211
  0000000000000000 883      883           100.000  100.000    mac80211                 /mac80211 [self]
-------------------------------------------------------------------------------
ffffffff8007a39c 876      2711          10.1778  31.4976    vmlinux                  __do_softirq
  ffffffff8007a39c 876      876           100.000  100.000    vmlinux                  __do_softirq [self]
-------------------------------------------------------------------------------
0000000000000000 557      3268           6.4715  37.9691    ip_tables                /ip_tables
  0000000000000000 557      557           100.000  100.000    ip_tables                /ip_tables [self]
-------------------------------------------------------------------------------
0000000000000000 409      3677           4.7519  42.7210    nf_conntrack             /nf_conntrack
  0000000000000000 409      409           100.000  100.000    nf_conntrack             /nf_conntrack [self]
-------------------------------------------------------------------------------
0000000000000000 329      4006           3.8225  46.5435    ath9k_hw                 /ath9k_hw
  0000000000000000 329      329           100.000  100.000    ath9k_hw                 /ath9k_hw [self]
-------------------------------------------------------------------------------
ffffffff80155d7c 260      4266           3.0208  49.5643    vmlinux                  csum_partial_copy_nocheck
  ffffffff80155d7c 260      260           100.000  100.000    vmlinux                  csum_partial_copy_nocheck [self]
-------------------------------------------------------------------------------
","",2011-06-04 05:36:00.775749,1
34,34,15,"h1. Mitigations and Solutions

h2. Strategy

How to attack the bufferbloat problem and develop your own solutions.

* [[Mitigations and solutions for Broadband]] 

* [[Mitigations and solutions for Home Gateways]]

h2. Tactics

Specific recipes for bufferbloat mitigation.

* [[Linux_Tips|Linux Tips]]

* [[Windows Tips|Windows Tips]]




","",2011-04-11 09:55:44.028322,7
26,26,3,"h1. Dave Täht's tasks

1) Reducing the unmanaged buffers on the devices I have (all Linux-based) and observing the effects on latency and throughput. This involves a bit of kernel hacking. As kernel hackers go, I'm a little unusual in that usually I work on rt based kernels in the first place, because I do audio editing and production. At the moment, I'm merely using the 2.6.37 kernel as a base, as it's common between all my devices and the rt patches have frozen at .33.

2)  High on my personal list is exploring the inter-relationship between the mq qdisc and the wireless device drivers themselves. Buffering is ok. Unmanaged buffering is not. Wireless has special problems for which most people have been papering over with excessive buffering and retransmit settings, especially on newer devices.

3) Also related to that is playing with the SFB qdisc which seems to have a lot of potential to manage flows at the gateway and laptop level.

4) In the context of real-time, I'd like to be exploring the interaction of HTB and device driver buffering in the context of having smaller quantums for the kernel and device driver(s) to be making their decisions.

5) I'm also helping maintain and upgrade the bufferbloat website, and keep the public conversation(s) on track, and recruiting [[helpers]] which is eating far more of my time than I'd  like.

[[RFC Improving DSCP support in Linux]]

[[latency]]

6) Writing articles on describing the mis-understood portions of the IP stack.

I can be found in the #bufferbloat channel(s) on irc. 

[[Save the Mice]]  [[Diffserv statistics]]

[[Dtaht test rig]]

[[Experiment - TCP cubic vs TCP vegas]]

[[Experiment - Bloated LAGN vs debloated WNDR5700]]

[[Improving DSCP support in Linux]]

""Cool TCP/ip animations"":http://www.kehlet.cx/articles/99.html 

* Random Stuff that I'll catagorize when I have the time

[[BPR3]]

There's a rule of thumb for the upper bound in two SIGCOMM-award
papers; I generally use the simple one from the Mathis paper.

bandwidth = (MSS / RTT) * (C / sqrt(loss))

   MSS = maximum segment size
   RTT = round trip time
   C = a constant between 0.87 and 1.31, depending on the ACK strategy
and type of loss
   sqrt(loss) = square root of the probability of losing a packet

So, for a given connection, your expected throughput scales linearly
with the size of your packets, and inversely with the RTT and
sqrt(loss).

I have an unverified/untested Python implementation of the equations
at http://www.cs.umd.edu/~jmccann/tcp_tput.py

I wonder how jumbo frames play into bufferbloat. When queues are in
terms of number of packets (not bytes), jumbo frames make the problem
even worse.

    Justin

* The Macroscopic Behavior of the TCP Congestion Avoidance Algorithm,
by Matthew Mathis, Jeffrey Semke, Jamshid Mahdavi, and Teunis Ott, CCR
27(3), 1997. (pdf:
http://ccr.sigcomm.org/archive/1997/jul97/ccr-9707-mathis.pdf)
* Modeling TCP Throughput:  A Simple Model and Its Empirical
Validation, by Jitendra Padhye, Victor Firoiu, Don Towsley, and Jim
Kurose, Proc. of ACM SIGCOMM 1998. (pdf:
http://conferences.sigcomm.org/sigcomm/1998/tp/paper25.pdf)

http://ieeexplore.ieee.org/iel5/11096/35442/01682953.pdf

http://www.freepatentsonline.com/6614808.html

http://systems.cs.colorado.edu/Networking/CommuNet/packet_aggregation.html

http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.86.6126&rep=rep1&type=pdf

http://kernel.org/doc/

Subject: Re: Understanding Bandwidth-Delay Product in Mobile Ad Hoc Networks
X-Boundary: _______________________________________________________________________________________________________________________________

On 01/18/2011 11:27 AM, Dave Täht wrote:
>
> Don't know if anyone sent this one to you yet.
>
> http://cairo.cs.uiuc.edu/publications/papers/elsevier2004-bdp.pdf




http://www1.sce.umkc.edu/~sohrabyk/papers/TcomReport.pdf

http://portal.acm.org/citation.cfm?id=1219649

[[VOIP]]

>
> Also, PLUGFEST!!! Sounds like a good spot to do some testing in
>
> http://www.networkworld.com/news/2011/030411-ipv6-home-routers.html

No, even better is to educate the UNH Interoperability lab, and have
them test *everything*.

Dunno if they are competent to test 802.11 full up or not for what we
need; but the task of educating them will make that clear.

See: http://www.iol.unh.edu/
			- Jim


* [[Network Analysis Tools]]

* [[Bufferbloat and Freeswitch Conference Call March 9]]

[[Enable ECN on multiple operating systems]]

[[irc clients]]

[[BANA]]","",2011-07-09 08:34:29.343215,26
38,38,15,"h1. IPv6 and Bufferbloat.net

Bufferbloat.net's core services are fully IPv6 enabled. 

h2. Open Questions

Do you have Ipv6 to your home or business/university? Native? Or can you get 6to4 to work? 6rd? Or a tunnelbroker.net tunnel? Or?

For those ssh users that lack easy access to IPv6, I plan a ""jump"" box that is dual-stack, and it's only the core bufferbloat servers that need to be dual stacked - obviously most of the edge boxes will be ipv4. IF there are websites that need to run on a virtual, I plan to run them  through a proxy. 

The main folk I've been dealing with (jg, linville) both have native IPv6 support, and I've been using 6to4 tunneling with reasonable success. In fact, the voip calls we've been making over linphone directly over IPv6 have been the best quality voip calls I've ever experienced. 

h2. Comcast's example

Based on comcast's example of running their entire monitoring stack on IPv6, and the relative lack of easy access to ipv4 for our virtual servers, I have been making a big push to IPv6 enable everything at least on the monitoring side, rather than use private (RFC1918) addressing. 

The prospect of coping with private addressing across the planet for virtual servers strikes me as far more difficult than coaxing IPv6 to work well.

So far I haven't found any service majorly broken, at least on Linux. Tested thus far are apache, fcgi, snmpd, the web interfaces to cacti, mrtg, redmine, ssh (of course) and multiple other services. In fact, I haven't found anything that broke thus far besides:

h2. IPv6 Minuses

* our soon to be abandoned DNS provider returns invalid IPv6 addresses instead of NXDOMAIN (name.com, see #25) 

* Over the last 5 years, people have stopped shipping /etc/gai.conf files that default to using IPv6 first (See below)

* Shapers, across all of Linux, are horribly broken when it comes to IPv6.

* I'm told there are issues with BSD and snmpd. 

* It's turned out that finding native IPv6 on the east coast of the US has been a real problem. I'm under the impression that MIT has issues with it, and I'm working up the chain at gatech to get native IPv6 there, as they have EXCELLENT coast-2-coast IPv6 connectivity from california, 64ms, which is very close to theoretical. 

??shipka.bufferbloat.net $: ping6 ipv6.gatech.edu

64 bytes from 2610:148:fd8f:d7fc:203:baff:fe8f:29d: icmp_seq=3 ttl=58 time=64.2 ms??

h2. Traffic shaping

Very few traffic shapers ""do the right thing"" when it comes to IPv6 traffic. It is likely that your interactive traffic usually shaped by a traffic shaper like wondershaper, won't be.

To my knowledge, none of these Linux traffic shapers ""do the right thing"" when confronted with IPv6 or IPv6 encapsulated traffic.

* ""ADSL-optimizer"":http://www.adsl-optimizer.dk  http://netoptimizer.blogspot.com/2011/01/bufferbloat-wireless-is-worse-than.html
* ""wondershaper"":http://lartc.org/wondershaper/
* Openwrt Qos-Scripts
* hsfc
* Gargoyle

h2. Preferring IPv6 over IPv4 for glib systems

put the following as your /etc/gai.conf

@label ::1/128 0
label ::/0 1
#label 2002::/16 2 
label ::/96 3
label ::ffff:0:0/96 4
label fec0::/10 5
label fc00::/7 6
label 2001:0::/32 7@

I don't know why this works, nor do I think it's entirely correct.
","",2011-04-11 09:59:16.693887,4
41,41,15,"h1. Symptoms of bufferbloat-induced congestion

Once a network is congested, various service protocols (statistically insignificant in terms of additional network load, but mission-critical) *can't do their jobs*.  Here are some examples

* DNS - adding hundreds of ms of latencies to turning a website into an IP address is *not* good. With a typical web page doing dozens, even hundreds of DNS lookups, DNS not getting through in a timely fashion results in vastly slower browsing.

* NTP - the network time protocol - relies on somewhat timely delivery of packets in order to keep your computer's clock accurate. Lots of things rely on accurate timekeeping.

* ARP - the address resolution protocol - also relies on timely resolution in order to even find other devices on your network.

* DHCP - if these packets are lost or excessively delayed, machines can't get on the network in the first place.

* Routing - many routing protocols depend on packet drops as a way of monitoring network health and are time sensitive.

* VOIP - needs about a single packet per 10ms flow in order to be good, and less than 30ms jitter.

* Gamers will get fragged a lot more often with latencies above their twitch factor.

* IPv6 relies on even more specialized packet types for autoconfiguration, e.g. the equivalent of ARP 

* Encapsulated packets (VPNs, X11 over ssh, IPv6 over 6rd/6to4) also suffer.

","",2011-04-11 10:26:23.37392,3
176,176,49,"h1. Tutorial Day 1

* *Goal:* Get familiar with router, familiarize with build

h3. Overview and Setup

* Current build at: http://143.215.100.236/~d/cerowrt-wndr3700/
* Grab build_cero.sh from here: http://143.215.100.236/~d/gatech/build_cero.sh
* Notes about images:
** factory-NA image no longer functions.  v2 bootloader only functions with the regular factory image
** squashfs is read-only.  jffs is read-write

h3. Initiate build

* make sure the following development tools are installed: 
** build-essential
** gawk 
** flex 
** at
* set up git username
** git config --global user.name ""Your Name"" (replace with your name)
** git config --global user.email ""user@host.com"" (replace with your email address)
* ./build_cero.sh init
** (temporary bug fix): cp blessed_config src/cerowrt/.config
* cd src/cerowrt/
* make (use batch to be nice)
** make -j8 V=99  
** make V=99
* wait (build can take 45-60 minutes on huchra)

h3. Install the build

* Use the image you just built, or pull down from the bufferbloat site
* Follow ""these instructions"":http://www.bufferbloat.net/projects/cerowrt/wiki/OCEAN_CITY_INSTALLATION_GUIDE","",2011-07-11 09:10:05.841285,4
150,150,6,"h1. Targets

Memory goal: ideally, less than 6MB of flash; but it's best not to spend time engineering to this ideal given Moore's law.

h2. Primary targets:

# WNDR3700v2
# WNDR3700v1 (8MB flash; can't run jffs2 image already; not primary target)
# NANOstation M5 (8MB flash)

h2. Additional Targets

# Buffalo (32MB flash)
# x86 KVM (32MB flash)
# Dreamplug (512MB flash)","",2011-08-17 13:31:23.895887,4
117,117,3,"h1. CAPETOWN QA

h1. Testers

|Who|What|Where|When|Status|
|Dave Täht|Core routing|[[testlab]]|Friday|Need lab setup and PDUS [[#164]]|
|Dave Täht|Wireless|[[testlab]]|Friday||
|Dave Täht|DHCP|[[testlab]]|Friday||
|Dave Täht|Firewall|[[testlab]]|Friday||
|Dave Täht|Web Server|[[testlab]]|Friday||
|Dave Täht|Uptime|[[testlab]]|Friday||
||DITG|||[[#50]]|
||BISMARK-ACTIVE||||
||BISMARK-PASSIVE||||
||GENERIC AT HOME||||
||DOGFOOD||||
||DB BACKEND||||
||WEB SITE||||
||DYNAMIC REPORTING||||
||REPORTING||||
|Dave Täht|PACKAGE DOWNLOADS||||
||REGRESSIONS||||

","",2011-05-18 16:20:13.739659,8
183,183,48,"h1. Bismark

h2. Description

This consists of two different packages: bismark-mgmt, which talks to the server and sets up remote tunnels (apart from other things), and bismark-active, which conducts active measurements.

In bismark-mgmt, a probe runs every minute. This probe consists of a single UDP packet to the probe server, and serves two purposes; one as a heartbeat, so that the server knows it's alive, and also to punch a hole in the NAT (if one exists), so that a reverse-ssh tunnel can be established on-demand from the server.

The bismark-active script runs every 5 minutes. It conducts a subset of the following tests: ping to one of a set of servers, ping to the last-mile router, traceroute to the server, dns lookup time to a set of servers, netperf upstream and downstream tests, ping to the last mile router at the same time as the netperf tests, shaperprobe, and ditg for measuring packet loss.

The output from the test is stored as an xml file in /tmp/bismark/ and, upon completion of test, is immediately uploaded to the measurement server and deleted upon upload. 

h2. Testing

bismark-mgmt should report to bdm after first boot, and every minute thereafter, as long as it's connected to the Internet. First probe takes a few minutes after boot, perhaps up to 5 minutes. Once it reports, we should be able to establish an ssh tunnel to it from the server.

bismark-active is tested by waiting for the data file on the measurement server. The first file should contain *all* of the above measurement tests; and should have sane values for them.

","",2011-07-14 08:09:08.574694,2
28,28,3,"h1. Linux Tips

The [[Dogfood Principle]] page covers the settings on the bufferbloat.net servers, which run Linux.

Some people note that in some bufferbloat experiments we set the transmit queue length (txqueuelen) to zero on Linux.

Note that this is *at best* a short term hack to reduce pain, and the wrong answer in general, and on some hardware will cause your system to go completely catatonic.  On others (notably some of the ""smartest"" which generally aren't but that's another story) it IS the right thing...

Please, please, don't just blindly go twisting knobs without understanding what you are doing... and we've mostly settled on fq_codel as being the best answer yet, see the [[cerowrt:Bloat-videos]] page for some details on that.

So the remainder of this web page is very old... and we haven't actually updated the main bufferbloat web servers to any huge extent lately, we're running the [[cerowrt:Yurtlab]] instead, (and we are doing several large scale test deployments...)


... so for historical reasons... read on...

There are many potential places where buffers may hide today. These include (at least):

# the Linux transmit queue (which txqueuelen controls)
# device drivers themselves may hide one or more packets (e.g. the Libertas driver) internally, which simplified its implementation
# Most current hardware has very large DMA ring buffers, often allowing for up to 4096 packets/queue in the hardware itself; in the drivers we've examined, the default size seems to be in the 200-300 packet range (also true on some Mac and Windows ethernet drivers we've played width).
# Sometimes the hardware itself may also have packet buffers buried in them. Again, from OLPC, the wireless module there has 4 packets of buffering hidden out in the device.
(?) encryption buffers.
# Old hardware often has very limited buffering in the drivers and hardware; this is part of the history as to how we got to where we are.

Some buffering is necessary for your network stack to work properly.  The only reason txqueuelen could be set to zero from 1000 was that that hardware was known to have additional 256 packets of buffering in the Intel wireless and ethernet drivers the tests were run on.  Normally, for classification to be able to work, we'd like to have the Linux transmit queue set to some reasonable (small value), so that we can play nice traffic games of various sorts.

Now the question is: how much buffering is ""enough""?

And the answer is, unfortunately, not simple. The buffering that should be present depends upon the bandwidth (which may vary by orders of magnitude) and the delay (which is anywhere from 10ms to a couple hundred if you are going around the world).  The rule of thumb has been the bandwidth delay product, where the delay has been presumed to be around 100ms. And it also depends on workload. The rub is that ethernet spans 3 orders of magnitude in bandwidth, and on wireless, it's even worse, where moving your laptop a few inches can change your performance by orders of magnitude.

What a server system's buffering needs on 1G or 10G networks is very different than what you will need on an 802.11g network (which at best runs about 20Mbps, and often runs much more slowly).  But right now, the knobs, for historical reasons, were often set to maximize bandwidth performance for such server systems without regard to latency under load on computers in most people's homes.

So whatever we set these knob(s) to, it is guaranteed to be wrong much of the time for some systems.  At best, until we have better tools at hand, we can mitigate our pain a bit by twisting the knobs to something that may make more sense for the environment where you are running most of the time, and some of our default values in our operating systems and device drivers may need tuning in the short term to the bandwidth. So some short term mitigation is possible by being slightly more clever.

The real long term solution, however, is AQM (active queue management) in the most general sense: the buffering at all layers of the system needs proper integration and management (not just router queues), and it needs to be very dynamic in nature: ergo the interest we have in eBDP, SFB, algorithms and we hope RED Light soon.  We need to signal the end points to slow down appropriately. And getting the operating systems to manage both their buffering in concert with the underlying device drivers and hardware is why this is going to be an interesting problem (as in the Chinese curse).

Loaded guns can hurt if you aim them at your foot and pull the trigger. So please do be careful, and think...

h2. Enable [[ECN]], [[SACK]], and [[DSACK]]

These sysctl settings can be stored in the main /etc/sysctl.conf file, or in a file in the /etc/sysctl.d directory.

@  net.ipv4.tcp_ecn=1
   net.ipv4.tcp_sack=1
   net.ipv4.tcp_dsack=1@

Note that there is still some broken ECN CPE (e.g. home router) equipment out there; if you have problems in some environments, please let us know.

h2. Set the size of the ring buffer for the network interface

NOTE: THIS HACK IS NO LONGER NEEDED on many ethernet drivers in Linux 3.3, which has Byte Queue Limits instead, which does a far better job.
 
In modern devices, the dma tx queue often defaults to settings suitable for transmission on a pure GigE (or faster) network. 

If your network has significant bottlenecks (such as a 3Mbit home gateway or wireless), this is the most important knob to twist to reduce your bufferbloat.

Once data hits the dma tx queue, it cannot be controlled or shaped. In many cases ethtool is not supported, however, if you can, reduce these buffers to the bare minimum for good performance. Few devices support going as low as this:

@  ethtool -G eth0 tx 4
   ethtool -G wlan0 tx 4@

But many can get to 20 or below. See also: [[Bloated Driver List|Known Bloated Drivers]] for more information and patches.

You can observe your existing settings with:

@  ethtool -g eth0
   ethtool -g wlan0@

h2. Reduce transmit queue length

NOTE: with [[codel:Wiki|codel]], this is no longer needed either.

This is a separate setting for each network interface.  Examples:

@  ifconfig wlan0 txqueuelen 16
   ifconfig eth0 txqueuelen 50@

(50 is the default transmit queue length on FreeBSD.)

Assuming your dma tx queue is under control, you can also [[Traffic Shaping|shape]] the traffic using an appropriate [[qdisc]], and have a larger txqueuelen. 

h2. More Adventures

Note: the debloat-testing kernel is not in use at present. We may resurrect it soon.

If you want to start running a recent Linux kernel with eBDP, SFB, and start more serious testing of such attacks on the problem, then you are a customer of the ""debloat-testing kernel tree"":http://git.infradead.org/debloat-testing.git maintained by John Linville.

This tree has a (possibly frequently changing) set of kernel patches that start to attack the bufferbloat problem in less naive ways.  We hope to get more automated builds for multiple distro's going soon (help gratefully appreciated!). In the very short term, if you don't mind dead puppies (like your laptop) you may find this ""Ubuntu 10.10 kernel (64 bit) useful"":http://mirrors.bufferbloat.net/Builds/).   Note that this kernel is also built preempt, as Dave likes to do music. Additionally, you might like something more graceful to set your wireless queue length to something more sensible for that kernel; a Debian /etc/networks/if-up.d [[wlan script]] for this is available.

h2. References

""Home Router Puzzle Piece One – Fun with your switch"":http://gettys.wordpress.com/2010/11/29/home-router-puzzle-piece-one-fun-with-your-switch/

","",2013-07-27 11:50:28.312055,17
45,45,3,"h1. Wireless Battle Mesh

Wireless Battle Mesh v4 - Call for papers (update)
=================================

The submission for papers is now open since 2 weeks, nonetheless quite some 
ideas have already surfaced. Below you will find the current list of submitted 
talks/panel discussions/workshops but you still can send in your idea - the 
call for paper still is open for another 3 weeks but time is quickly running 
out.


Technical Track:
===========

* Wireless Battle Mesh - The past, present and future
 (panel discussion - Marek Lindner & Xavier Carcelle)
* Recompiling AirOS with routing protocols
 (talk - Ninux)
* Forming mesh mobs - multicast optimizations for batman-adv
 (talk - Simon Wunderlich & Linus Luessing)
* Babel Z: routing accross multiple radio frequencies
 (talk -  Juliusz Chroboczek)
* Google summer of code - old projects and new ideas
 (talk - Freifunk, Funkfeuer & Ninux)
* OpenWRT - master your router (flashing/uci configuration/packages)
 (workshop - Nicolas Thill)
* Lightening talks


Application Track:
=============

* Wireless communities around the world
 (talk - guifi.net, Freifunk, Funkfeuer, Ninux & Ljubljana)
* VoIP over mesh made easy - the mesh potatoe 
 (talk - Elektra)


Open Questions:
============

The GSoC presentation is meant to show case the past Freifunk GSoC projects, 
preferably by the students itself and/or their mentors. Can each participating 
group (Freifunk, Funkfeuer & Ninux) provide a list of their projects / 
students / mentors and their travel plans.


If you have any question or suggestion, please let me know.

Regards,
Marek","",2011-02-08 07:18:09.818486,1
112,112,3,"h1. Bismark ""CAPETOWN"" RELEASE NOTES

Please see the [[Capetown FAQ]] and [[Capetown Installation Guide]] 

h2. Features

[[Bismark Router Tools]]

h2. Known bugs

Quite a few. See the [[Issues]] database.

h2. Unsupported Features

","",2011-05-18 10:24:41.274835,1
80,80,48,"h1. Wndr3700 testbed

(ghz is either 5 or 2)

DNS 130.207.17.21 130.207.17.22


|NAME|eth1 MAC|Ext IPv4|Ext IPv6|Int IPv4|Int IPv6|SSID|WPA Key|Channel|
|wn-1|C43DC78B6E29|143.215.131.240||192.168.43.1||WN1-Ghz|PLEASE SEE SRI OR BRIAN|160|
|wn-2|E091F5CE4CC0|143.215.131.241||192.168.44.1||WN2-Ghz|PLEASE SEE SRI OR BRIAN|158|
|wn-3|C43DC78B6DDB|143.215.131.242||192.168.45.1||WN3-Ghz|PLEASE SEE SRI OR BRIAN|154|
","",2011-04-07 09:54:29.614776,6
84,84,15,"h1. ToDo

The outline of topics we'd like to address more fully is below:

h2. Demonstration recipes for demonstrating/testing for bufferbloat

* Servers
* Home routers
* Wifi routers
* Wifi clients
* Ethernet
* Broadband gear
* Core internet
* 3G wireless

h2. Mitigations

* Set end-node transmit buffers to something sane
* Set QOS knobs on routers to keep broadband gear's buffer from filling.

h2. Full Solutions

* Fixes for routers involve AQM of some sort - Van's modified RED (or similar) is really necessary in wireless situations, as classic RED isn't easily dynamic, though one could kludge it, of course
* Proper solutions for end-nodes involve some intelligence in buffering; at a minimum control of transmit buffers and device rings.

h2. Testing tools

* ""The ICSI netalyzr"":http://netalyzr.icsi.berkeley.edu/
* ""Measurement Lab Tools"":http://www.measurementlab.net/measurement-lab-tools
* ""Speedtest.net"":http://www.speedtest.net/
* ""Pingtest.net"":http://www.pingtest.net/
* ""DSL Reports Smokeping Page"":http://www.dslreports.com/smokeping
* ""Smokeping"":http://oss.oetiker.ch/smokeping/
* ""httping"":http://www.vanheusden.com/httping/ - latest version has support for persistent connections, and therefore it is easy to test against any web server over TCP, to defuse the (overblown) issues around ICMP ping. Also available now in the Android marketplace.

h2. Needed tools

* a ""push here to make your network become loaded"" test, to drive this home to people
* a tool like ""pingplotter"":http://www.pingplotter.com/profile.html for Linux and Mac (at least), to help identify bloated links. This might be an elaboration of mtr:http://www.bitwizard.nl/mtr/ that works properly.  
* For super, duper extra bonus points, a tool that uses the techniques of ""reverse traceroute"":http://www.cs.washington.edu/research/networking/astronomy/reverse-traceroute.html to identify problems on the reverse path, since many/most paths in the Internet are asymmetric

h2. Papers

* ""Netalyzr: Illuminating Edge Network Neutrality, Security, and Performance, by Kreibich, Weaver, Nechaev, and Paxson"":http://www.icsi.berkeley.edu/cgi-bin/pubs/publication.pl?ID=002876
* ""Understanding broadband speed measurements, by Bauer, Clark and Lehr"":http://mitas.csail.mit.edu/papers/Bauer_Clark_Lehr_Broadband_Speed_Measurements.pdf
* ""RED in a Different Light, by V. Jacobson, K. Nichols, K. Poduri"":http://mirrors.bufferbloat.net/RelevantPapers/Red_in_a_different_light.pdf
* ""Cable Modem Buffer Management in DOCSIS Networks, by Martin, Westall, Shaw, White, Woundy, Finklestein, & Hart"":http://www.cs.clemson.edu/~jmarty/papers/PID1154937.pdf


h2. Datasets

* ""M-Labs datasets"":http://www.measurementlab.net/data

h2. Experiments

* ""Jim Gettys experiments"":http://people.freedesktop.org/~jg/Experiments/

h2. Presentations

* ""A Rant on Queues, Van Jacobson, 2006"":http://pollere.net/Pdfdocs/QrantJul06.pdf
* ""We have Met the Enemy and [S/]He is Us: A View of Internet Research and Analysis, Kathleen Nichols"":http://pollere.net/Pdfdocs/bcit_6.2001.pdf
* ""Bufferbloat - Dark Buffers in the Internet"":https://www.bufferbloat.net/documents/1 ""Mp3 audio"":http://mirrors.bufferbloat.net/Talks/BellLabs01192011/murray_hill01192011_Bufferbloat_Talk_Edited_For_brevity.mp3
* ""Bufferbloat FAQ"":http://gettys.wordpress.com/bufferbloat-faq/

h2. Historical data/papers of interest

* ""HTTP performance - 1997"":http://www.w3.org/Protocols/HTTP/Performance/
* ""TCP Performance problems caused by interaction between Nagle's Algorithm and Delayed ACK 2005"":http://www.stuartcheshire.org/papers/NagleDelayedAck/

h2. Test equipment

* ""Gigabit port mirroring switch"":http://www.dual-comm.com/gigabit_port-mirroring-LAN_switch.htm


h2. Dave Taht's to-do list:

* [[Myths]]
* [[Controversies]]
* [[Conferences]]
* [[Linux Traffic Shapers]]
* [[Device Driver Buffering]]
* [[Linux Patches]]
* [[Linux Tips]]
* [[Mac Tips]]
* [[Windows Tips]]
* [[Bloated Driver List]]
* [[IPv6]]
* [[Glossary]] [[Dark Buffers]]  [[Latency]] [[RTT]] [[TXQUEUELEN]] [[DMA_TX_QUEUE]] [[spiky latency]]
* [[Experiments]]
* [[Equations]]
* [[Qdiscs]]
* [[Papers]]
* [[Mitigations]]
* [[Dogfood Principle]]
* [[Good blog discussions]]
* [[What (bad) stuff happens on a congested network?]]
* [[Mesh Networks]]
* [[Talks]]
* [[Experts]]
* [[sandbox]]
* [[Quotes]]
* [[SACK hall of Fame]] [[SACK hall of Shame]]
* [[ECN Hall of Fame]] [[ECN hall of Shame]]
* [[dtaht tasks]]
* [[humor]]
* Gettys blogs reformatted
[[Mitigations and Solutions]] [[Mitigations and solutions for Broadband]] [[Mitigations and solutions for Wireless]] [[Mitigations and Solutions for Home Gateways]]
","",2011-04-11 09:08:56.349422,5
114,114,3,"h1. Cool things to do with a bismark router

h2. Network Diagnostics

h3. Additional Packages

h2. Web Proxying

h2. DNS

h2. Network Monitoring

h2. Enabling IPv6
","",2011-05-18 10:55:54.760818,1
125,125,3,"h1. Sandbox

{plugins}

{{fortune}}

 {{graphviz(
    digraph finite_state_machine {
        rankdir=LR;
        size=""8,5"" 
        node [shape = doublecircle]; LR_0 LR_3 LR_4 LR_8;Sandbox
        node [shape = circle];
        LR_0 -> LR_2 [ label = ""SS(B)"" ];
        LR_0 -> LR_1 [ label = ""SS(S)"" ];
        LR_1 -> LR_3 [ label = ""S($end)"" ];
        LR_2 -> LR_6 [ label = ""SS(b)"" ];
        LR_2 -> LR_5 [ label = ""SS(a)"" ];
        LR_2 -> LR_4 [ label = ""S(A)"" ];
        LR_5 -> LR_7 [ label = ""S(b)"" ];
        LR_5 -> LR_5 [ label = ""S(a)"" ];
        LR_6 -> LR_6 [ label = ""S(b)"" ];
        LR_6 -> LR_5 [ label = ""S(a)"" ];
        LR_7 -> LR_8 [ label = ""S(b)"" ];
        LR_7 -> LR_5 [ label = ""S(a)"" ];
        LR_8 -> LR_6 [ label = ""S(b)"" ];
        LR_8 -> LR_5 [ label = ""S(a)"" ];
    }
    )}}
","",2011-05-20 11:21:31.334623,4
121,121,3,"h1. Cool things to do with your Bismark router

{{include(uberwrt:Name Your Router)}}

{{include(uberwrt:Set the correct time)}}

{{include(uberwrt:Mount a hard disk or USB stick)}}

{{include(uberwrt:Customize your web server)}}

{{include(uberwrt:Configure a web proxy)}}

{{include(ubertwrt:Set up DNS better)}}

{{include(uberwrt:Establish permanent names for your computers)}}

{{include(uberwrt:QoS)}}

{{include(uberwrt:Internal QoS)}}

{{include(uberwrt:Use SFB)}}

{{include(uberwrt:Enable IpV6)}}
","",2011-05-19 16:47:18.64879,1
90,90,49,"h1. Bismark testers

The first generation of bismark is being tested by:

* Eric Raymond
* Dave Taht
* The ""GTNoise Lab"":http://gtnoise.net/ students and faculty at Georgia Tech","",2011-04-22 11:35:31.447388,2
93,93,3,"h1. Uberwrt build

NOTE: The build of uberwrt is TOO LARGE to fit in less than 8MB flash. Only the wndr3700v2 is supported.

Get it from: http://huchra.bufferbloat.net/~d/uberwrt

","",2011-04-16 09:03:03.66156,1
126,126,3,"h1. Experiment - BismarkECNDNSGOOGLE

h2. tests

single file wget 
googleabcde - a search with google interactive turned on
dns cache

http://gw.lab.bufferbloat.net/captures/series1

Some top level notes:

h2. DNS

The number of dns queries issued on google's interactive pages is extraordinary. And the level of dns caching,
shockingly bad. As one example:

;; ANSWER SECTION:
investing.businessweek.com. 60	IN	A	209.234.234.146

;; AUTHORITY SECTION:
investing.businessweek.com. 6266 IN	NS	gtm03.wallst.com.
investing.businessweek.com. 6266 IN	NS	gtm02.wallst.com.
investing.businessweek.com. 6266 IN	NS	gtm01.wallst.com.

;; ADDITIONAL SECTION:
gtm01.wallst.com.	191	IN	A	209.234.224.42
gtm02.wallst.com.	191	IN	A	209.234.234.42
gtm03.wallst.com.	191	IN	A	66.150.28.2

h2. http 1.1

h2. ECN

","",2011-05-21 14:40:11.123923,3
88,88,49,"h1. Configuring the WNDR 3700

You can configure the router via its Web interface or at the command line, via ssh.

*Get the box up on the internet.* If you are connecting to a cable modem or some other dynamic IP providing host, just connect the WAN port to the router, and reboot the router. This will do ""most"" of the right thing.  Some caveats:
** In the event that your Internet connection is static, you will need to supply the correct IP address, gateway, and DNS server information via the Web interface on the gateway. 
** If you just want to add it to your existing network (supplying dhcp or static) do so... but remember that the BISMark gateway will also NAT everything connected downstream from it.

*Enable the wifi interfaces.* Via the web interface, you need to go to the network->wireless tab, turn on the radios, assign SSIDs and channels, etc. WPA2 seems to be the best crypto setting. You should be able to connect wirelessly and do stuff at this point, like surf the web)

*Update the package database and install any additional needed packages.*  As we are doing our own build, the default location for packages is currently incorrect, and we point to repos we are not using.
You should update to the package builds for the BISMark project.  You can also do this via the web interface.  In the future, this process will be automated.
** Delete /etc/opkg/xWrt.conf
** Edit /etc/opkg.conf and change it to point to http://huchra.bufferbloat.net/wndr3700/packages
** Run the following commands
*** opkg update # should do the right thing
*** opkg list | less
*** opkg install whatever_else_you_want (tcpdump for example, is useful, and there are multiple other packages in the pipeline)

It may be a good idea to change the default 192.168.42.1 to be something not 1.1 or 42.1 if you are playing with multiple routers. Whatever you choose will become the default for DHCP assigned addresses on the main 4 ports of the router. Choose well. If you want to do vpns and stuff like that to other people, choose uniquely out of the 192.168.X range or from the 10.X.X range.


There are a few outstanding bugs you should look at:
http://www.bufferbloat.net/projects/bismark/issues
","",2011-04-22 11:52:46.672528,11
94,94,3,"h1. Iscwrt build

NOTE: The build of iscwrt is TOO LARGE to fit in less than 8MB flash. Only the wndr3700v2 is supported.

Get it from: http://huchra.bufferbloat.net/~each/iscwrt/ar71xx/

This build is a lot closer to the final [[Build Configuration]] than the others, at present.

(and consequently, more borken)

h2. Features

ISC bind9 with DNSSEC and dynamic dns support
ISC DHCP and DHCPv6 support
IPv6
NTP supplied via local server
Qos
Reduced TXQUEUELENs
An Open Radio SSID
A private radio SSID
Reverse DNS on the 2002: prefix
Lighttpd Web Server
Port forwarding for Phone and printer

h2. Left to do

2002 working
2001 policy routing

v4 and v6 ddns working correctly 
Renumbering the network for different ACLs
Secure NTP
SIP proxy
Rawstat parser
DMZ
Local (wireless) QoS support","",2011-04-30 23:25:04.312963,12
122,122,3,"h1. Wiki

The [[testlab]] is where the action is.

The lab uses [[pdsh]]. 

[[Experiment - QoS]]","",2011-05-28 11:49:42.679663,5
120,120,3,"h1. Dave Taht's todo list

[[Name Your Router]]

[[Set the correct time]]

[[Configure a web proxy]]

[[Set up DNS better]]

[[Establish permanent names for your computers]]

[[QoS]]

[[Internal QoS]]

[[SFB]]

[[Enable IpV6]]

[[Customize your web server]]

[[Mount a hard disk or USB stick]]

[[sandbox]]

[[openvpn on Linux]]

[[openvpn on Mac]]

[[openvpn on the router]]

[[Using oprofile]]

","",2011-06-04 05:19:48.315135,5
124,124,3,"h1. What's the naming scheme?

All the [[testlab]] machines orbit around the gateway box, [[Jupiter]]. ""Jupiter has 63 planets"":http://en.wikipedia.org/wiki/Moons_of_Jupiter (mostly captured asteriods), so I would hope that would be enough names to use.

Power management is provided via [[Sol]].

h2. Specialties

[[Io]] provides a subnet to the subnet


h2. Available names

h3. Main machines

Ganymede, Callisto, Io, and Europa

h3. Amalthea Group

Metis, Adrastea, Amalthea, and Thebe. 

h3. Irregular satellites

""Themisto"":http://en.wikipedia.org/wiki/Themisto_(moon)
""Carpo"":http://en.wikipedia.org/wiki/Carpo_(moon)

http://en.wikipedia.org/wiki/Himalia_group

h3. Retrograde satellites:

http://en.wikipedia.org/wiki/Carme_group
http://en.wikipedia.org/wiki/Ananke_group
http://en.wikipedia.org/wiki/Pasiphae_group

h3. Cool names unused

http://en.wikipedia.org/wiki/Megaclite_(moon)","",2011-05-20 10:18:41.112883,5
185,185,117,"h1. Last day

* First step
** Test Woodrow build (email pointing to it) on the routers that failed to have a wireless radio on the last build
** Assuming that the build works (and the radios work) - log in to router, restart firewall  and LOG errors in a bug report.
** Plug router in a real WAN port and see if it works

* Second step
** Test two wireless connections (2Ghz and 5Ghz)
** Enable both connections for crypto (WPA2)
** Laptop on 2Ghz can ping laptop on 5Ghz

* Third step
** Test DNS
** Make sure time is correct
** Does the webpage come up?

* Why did internal routing break? 
** Burn 2 more routers and see if they break

* Resurrect LAB 
** Burn 3 routers with the working code
** Scribble down the MAC addresses on the routers
** PDU - needs to have a map on the web-in:192.168.30.10 login:admin pass:1234 ","",2011-07-15 08:36:03.796511,2
22,22,3,"h1. Sandbox

Come on let me cache these!

Man this bugs me.


!/attachments/download/11/Attribution_ShareAlike.png!

Apache should cache this. Period. The only way I see how is to toss it into the images directory.

Grumble... OK, so I toss it right into the images dir, and it does the right thing. 

!/images/Attribution_ShareAlike.png!

!/images/jigsawfish2.png!

h1. TCP/ip related Equations

* Optimum buffering ""according to Kleinrock""://www.cs.ucla.edu/~lk/LK/Presentations/sigcomm1.pdf

{{mathjax( bandwidth \times delay \times \sqrt(flows))}}

* Buffering as actually implemented on modern devices

{{mathjax( bandwidth \times delay \times \sqrt(flows) + {(dark buffers) \over (luck * hacks)})}}

where luck is in the range 0..1 and rapidly approaching 0.

[[Scientific Orgs]]

http://www.cra.org/events/","",2012-06-10 18:26:35.00513,13
296,296,213,"h1. Everything you wanted to know about Link Layer Adaptation

_**This is a skeleton for the fully-expanded page**_

Linked from: http://www.bufferbloat.net/projects/cerowrt/wiki/Setting_up_AQM_for_CeroWrt_310

However, certain link types have smaller overheads, and if you can ascertain your link types (whether it’s LLC or VC-Mux based), you can use these smaller overheads: Try the [[Quick Test for Bufferbloat]] after making the change. 

*LLC-based Overheads:*
* PPPoA - 14 (PPP - 2, ATM - 12)
* PPPoE - 40+ (PPPoE - 8, ATM - 18, ethernet 14, possibly FCS - 4+padding)
* Bridged - 32 (ATM - 18, ethernet 14, possibly FCS - 4+padding)
* IPoA - 16 (ATM - 16)

*VC-Mux based Overheads:*
* PPPoA - 10 (PPP - 2, ATM - 8)
* PPPoE - 32+ (PPPoE - 8, ATM - 10, ethernet 14, possibly FCS - 4+padding)
* Bridged - 24+ (ATM - 10, ethernet 14, possibly FCS - 4+padding)
* IPoA - 8 (ATM - 8)

_Need to incorporate some discussion of VDSL?_

- Sebastian Moeller says in https://lists.bufferbloat.net/pipermail/cerowrt-devel/2014-January/001953.html
	- Not simple (response to original note) maybe use 44 bytes?
	- Discussion of names

- Sebastian Moeller at https://lists.bufferbloat.net/pipermail/cerowrt-devel/2014-January/001963.html
	- Details all the complexities of DSL links to the internet","",2014-01-11 08:43:18.728043,2
81,81,3,"h1. Atom and BISMark

You will need to download the latest ""images are here"":http://huchra.bufferbloat.net/atom

And then install.

These are the wndr instructions, this needs to be rewritten for the atom:

""Installation instructions"":http://wiki.openwrt.org/toh/netgear/wndr3700#oem.easy.installation
Specific [[Flashing instruction for Mac]].

If you need additional packages, you will need to remove /etc/opkg/*
then edit the /etc/opkg.conf file to point to either http://huchra.bufferbloat.net/atom instead of what it points to currently, then do a

@opkg update
  opkg list
  opkg install your_package@

There will be a special [[bismark feed]] at some point 

Please note that huchra will move to a saner name at some point in the near future, and we hope to make these defaults somehow.
","",2011-04-07 18:17:01.070637,1
86,86,15,"h1. Mission

!>/images/jigsawfish-small.png! The [[bloat:dark buffers]] that lead to [[bloat:Bufferbloat]] and the congestion/latency problems that currently plague the internet are _almost_ everywhere. The Bufferbloat project intends to address these problems by:

* Gathering together experts to tackle the queue management and system problem(s), particularly those that effect wireless networks
* Spreading the word to correct basic assumptions regarding ""goodput"":http://en.wikipedia.org/wiki/Goodput and good  buffering on the laptop, home gateway, core routers and servers.
* Producing tools to demonstrate and diagnose the problem
* Experiments in advanced congestion management
* Producing patches to popular operating systems at the device driver, queuing, and TCP/ip layers to fix the problems.

There are ""several mailing lists"":https://lists.bufferbloat.net, git repositories, and people here that are attempting to address the Bufferbloat issues at various levels.","",2011-04-11 09:06:20.376104,2
23,23,15,"h1. Tips for Contributors

This project is intended to help codes and other project contributors get oriented about our project tools and practices.

h2. The Bufferbloat Sites

The Bufferbloat sites are hosted on Redmine, a project-hosting engine that combines an issue tracker with a wiki and other useful features.

Redmine's wiki is not the best wiki in the world, but it's tolerable and the project group developing it is helpful and constantly improving it.

It also has good access control, and the ability to delegate administration and even project creation, so no single person has to be the center of the universe.

h2. Eating our own dogfood

We believe in [[Dogfood_Principle|earing our own dogfood]].  The bufferbloat servers are tuned and administered using the same bufferbloat-mitigation techniques we develop for others to use.

h2. IPv6

The Bufferbloat project servers are fully IPv6 enabled.  Dave Taht describes the recipe he used [[IPv6|here]].



","",2011-04-11 09:38:56.916442,7
91,91,213,"h1. Netgear WNDR3700 v2

Before purchasing a [[wndr3700]] look on the side of the outside of the box, which clearly specifies the version number. If there is no v2, it's a v1. In many cases v1 and v2 routers are mixed up on the shelf!

You REALLY want the v2. Trust us. It has twice the flash as the v1. The v1 is NOT supported at this point. 

h2. Other Netgear routers you may find...

* WNDR3800 router has twice as much RAM as the WNDR3700v2. The WNDR3800 *is* supported with CeroWrt, and is a good choice for being future-proof.
* WNDR3700 v3 router is *not* supported. (The v3 chipset has differences that will prevent it from working.)

!wndr3700v2-box.jpg!

To determine whether the NetGear [[wndr3700]] gateway you have purchased is a version 2, look on the bottom of the router.  The ""v2"" is clearly indicated next to the model number, as shown below.

!wndr3700v2.jpg!


","",2012-03-01 17:11:03.855277,17
92,92,3,"h1. Cerowrt build

See the [[cerowrt:wiki|Cerowrt Wiki]] for full details on installation and release notes.

h2. Build: NETGEAR WNDR3700v2 JFFS2 ONLY

Available at present from http://huchra.bufferbloat.net/~cerowrt/cerowrt-wndr3700

This is basically [[bismark:wiki|BISMark]] & half of [[iscwrt:wiki|ISCwrt]] without all the test tools.

","",2011-07-09 09:05:27.22946,4
101,101,3,"h1. IP address assignment

We are assigned the IPv6 address range: 2001:4f8:3:36:bl04::01 - 0F for virtual servers.

huchra is on 2001:4f8:3:36:bl04::01

the default gw for ipv6 traffic is on 2001:4f8:3:36::1.

","",2011-04-25 14:31:30.625916,3
66,66,3,"h1. Wisp6

This was ""Dave Täht's"":http://www.taht.net project for the last 4 years, 12, if you count the original ""Linux based wireless router"":http://the-edge.blogspot.com/2010/10/who-invented-embedded-linux-based.html (astounding success), the ""thirdbreak.org"":http://replay.waybackmachine.org/20030218111947/http://www.thirdbreak.org/ effort (failure), ""wiline.com"":http://www.wiline.com (qualified success), ""pocobelle"":http://the-edge.blogspot.com/search/label/pocobelle (partial success), OLPC and ""mesh potato"":http://www.villagetelco.org/about/mesh-potato/mesh-potato-faq/ (partial success) projects. 17 years, if you count a ""hybrid wireless/modem design"":http://waybackmachine.org/19990215000000*/http://directnet1.net/index.html , and ""mosquitonet."":http://www.qsl.net/n9zia/metricom/rico.html

There is a boatload of documentation on wisp6 that exists only in org-mode in emacs that I've been meaning to put up somewhere. 

I have issues in that there are two possible patents involved (defensive only, and assigned to a worthy organization, maybe OIN, or the IETF), and a boatload of software IP, and $XXXk of my own cash expended and living dirt cheap in the third world, all sunk into the effort, that are hard to just write off and not entirely up to me. There were many problems in the project, but ""bufferbloat was one of the biggest"":http://the-edge.blogspot.com/2011/03/beating-my-bloat.html certainly.

That said, I will document some of the differences here. After witnessing the collapse of OLPC, I'd given the Wisp6 project no publicity. After all the effort sunk into trying to make a [[perfect wireless router]] I kept my goals high and expectations low, while throwing out a lot of conventions that have become bad ""standards"", for example, the lack of an integral proxy component and continued wide-band 2.4 ghz usage.

If I succeeded I'd have done something good. If I failed, I'd just go ""surfing."":http://www.nicaraguasurfreport.com/reportlist.php?id_secc=25

h2. WISP6 Core differences from a conventional wireless router design

* Directional 5.X ghz radios (Nanostation M5) in a multi-channel mesh configuration

* Dual band CPE (dreamplug), also mesh capable, with bind9, proxy, and bittorrent support

* Greenfield 5.x Ghz 802.11n (for aggregation & higher speed multicast support)

* IPv6 based multicast routing protocol (babel, babelz)

* NTP secured by autokey, with accurate time supplied via GPS 

* NO BRIDGING, purely routing

* Core (backbone) routers had no ipv4 support at all

* IPsec used to secure traffic

* 4in6 encapsulation to the end nodes

* Increased MTU from 1500 to handle the changes in encapsulation

* bind9 support

* json based autoconfiguration

* Lifeline wireless support (get online at limited bandwidth with just a pre-configured radio, no monthly cost)

* VOIP support

* Proxy support

h2. Prototype deployment network map

I climbed a LOT of mountains to determine beam paths. See google earth map ""here"":http://www.teklibre.com/~d/b4barrios10.kml and zoom in below San Juan Del Sur, Nicaragua. At one point I had a contract to spread wireless internet across the entire Rivas department.

This partially deployed network was taken down in May, 2010, due to the arrival of the Survivor TV show. 

","",2011-03-20 13:39:35.864528,24
179,179,49,"h1. Tutorial Day 3

h3. Setting Up OpenWRT Toolchain and Building Your Own Packages From Scratch

* Grab git repositories to create a local version of the repository
** openwrt
** packages
** openflow
* Update feeds.conf to point to local repositories (use src-link to point to local file repositories)
* Update your feeds
** ./scripts/feeds update - updates feeds in the feeds directory using {svn, git, local filesystem, etc.}
* Install some feeds
** ./scripts/feeds install {openflow, bismark}
** ./scripts/feeds install -p custom ditg
* set up ""files"" for any files to be installed on the root filesystem
* make menuconfig
* make -j8

h3. Setting Up OpenWRT Toolchain on dp4.gtnoise.net

* Update feeds.conf to point to local repositories
* Update and Install feeds
* Symlink files to /data/users/bismark/



","",2011-07-13 10:17:20.24314,5
182,182,117,"h1. Uftp

h2. Description

""UFTP is an encrypted multicast file transfer program, designed to securely, reliably, and efficiently transfer files to multiple receivers simultaneously. This is useful for distributing large files to a large number of receivers, and is especially useful for data distribution over a satellite link (with two way communication), where the inherent delay makes any TCP based communication highly inefficient. The multicast encryption scheme is based on TLS with extensions to allow multiple receivers to share a common key. UFTP also has the capability to communicate over disjoint networks separated by one or more firewalls (NAT traversal) and without full end-to-end multicast capability (multicast tunneling) through the use of a UFTP proxy server. These proxies also provide scalability by aggregating responses from a group of receivers.

UFTP has been used in the production process of The Wall Street Journal to send WSJ pages over satellite to their remote printing plants, and other users have used it to send to over 1000 receivers.
h3. Protocol Summary

A UFTP session consists of 3 main phases: The Announce/Register phase, the File Transfer phase, and the Completion/Confirmation phase. The File Transfer phase additionally consists of the File Info phase and the Data Transfer phase for each file sent.

The Announce/Register phase sets up the multicast file transfer session and negotiates all encryption parameters. The server sends out an announcement over a public multicast address which the clients are expected to be listening on. All subsequent messages from the server go over a private multicast address specified in the announcement. Allowed clients send a registration to respond to the announcement. The server will then send either a confirmation message if encryption is disabled, or the encryption key for the session if encryption is enabled. If the client receives the encryption key, it sends an acknowledgment back to the server.

The File Transfer phase starts with the File Info phase for the first file to send. The server sends a message describing the file in question. Besides the name and size of the file, this message describes how the file will be broken down. A file is divided into a number of blocks, and these blocks are grouped into sections. A block is a piece of the file that is sent in a single packet. A section is a grouping of blocks that can be sent together before the server needs to request feedback from the clients. The total number of blocks and sections is included in this message.

Continuing the File Transfer phase is the Data Transfer phase for the first file. Data packets, each of which is a block, are sent by the server at a rate specified by the user. Because UDP does not guarantee that packets will arrive in order, each block is numbered so the client can properly reassemble the file. When the server finishes a section, it send a message to the clients requesting status. The clients then send back a status message containing the list of NAKs (negative acknowledgments) for the blocks in that section. Once all sections have been sent, if the server has received a non zero number of NAKs from any client, the server will begin a second pass of the data, this time only sending the packets that were NAKed. The server will continue with subsequent passes of the data until all clients have either received the file or have timed out while the server was waited for a status message. When a client has received the entire file, it sends a completion message in response to the next status request.

The File Info phase and the Data Transfer phase are then repeated for each file to be sent during the session

The Completion/Confirmation phase shuts down the session between the server and clients. It starts with a message from the server indicating the end of the session. The clients then respond with a completion message, and the server responds to each completion with a confirmation message.""[[http://www.tcnj.edu/~bush/uftp.html]] 

h2. How to test


Before running UFTP you have to make user that the routing table on your machine has has a static multi-cast route enabled.
On Linux: route add -net 224.0.0.0. netmask 240.0.0.0 dev _iface_


Run tests by exchanging files between a client (uftpd) and a server (uftp).

UFTP Server command example:
uftp -Y aes256 -h sha1 _FILE_ = server sends _FILE_ over tls encrypted with aes256 and sha1

UFTP Client command example:
uftpd -D _RECV-DIR_ -T _TEMP-DIR_ -L _LOG_= client daemon saves files received _RECV-DIR_ and temporary files (in case communication is interrupted) to _TEMP-DIR_ and logs to _LOG_




h3. Experiment design

Router > Router: In this setting we have the uftp package installed on two *adjacent* routers. One servers as a client, the other as the server.... IT WORKS!

Host > Router: The host is *directly connected* to the router

* Wired:
Host:
<pre> 
matt@wontseeme:~/src/bismark_week/uftp-3.5.1$ ./uftp -D -R 500 /home/matt/Dropbox/ebooks/R/02_corpus_frequency_data.slides.pdf
UFTP version 3.5.1  Copyright (C) 2001-2011  Dennis A. Bush
Starting at Thu Jul 14 12:37:08 2011
Transfer rate: 1000 Kbps (125 KB/s)
Wait between packets: 11718 us
Using private multicast address 230.5.5.220  Group ID: 549A4C1C
Initializing group
Sending ANNOUNCE 1
Sending ANNOUNCE 2
Received REGISTER from client gw.jc.lab.projectbismark.net
Sending REG_CONF 3.1
Sending ANNOUNCE 3
Received REGISTER from client gw.jc.lab.projectbismark.net
Sending REG_CONF 4.1
Sending ANNOUNCE 4
----- 500 -----
Error getting file status for 500: No such file or directory
----- 02_corpus_frequency_data.slides.pdf -----
File ID: 0001  Name: 02_corpus_frequency_data.slides.pdf
  sending as R/02_corpus_frequency_data.slides.pdf
Bytes: 6071756  Blocks: 4205  Sections: 1
Sending FILEINFO 1.1
Received INFO_ACK from client gw.jc.lab.projectbismark.net
Sending FILEINFO 2.1
Received INFO_ACK+ from client gw.jc.lab.projectbismark.net
Sending FILEINFO 3.1
Received INFO_ACK+ from client gw.jc.lab.projectbismark.net
Sending FILEINFO 4.1
Received INFO_ACK+ from client gw.jc.lab.projectbismark.net
Couldn't get INFO_ACK from gw.jc.lab.projectbismark.net
Maximum file transfer time: 142 seconds
Sending file...pass 1
Sending DONE 1.1
Got 20 NAKs for pass 1 section 1 from client gw.jc.lab.projectbismark.net
Average wait time = 11718.04 us
Received 20 distinct NAKs for pass 1
Sending file...pass 2
Sending DONE 1.1
Got COMPLETE from client gw.jc.lab.projectbismark.net
Average wait time = 11727.70 us
Received 0 distinct NAKs for pass 2
Transfer status:
Host: gw.jc.lab.projectbismark.net  Status: Completed   time:  52.364 seconds    NAKs: 20
Host: gw.jc.lab.projectbismark.net  Status: Lost connection
Total elapsed time: 52.364 seconds
Overall throughput: 113.24 KB/s
-----------------------------
Finishing group
Sending DONE 1.1
Got COMPLETE from client gw.jc.lab.projectbismark.net
Late completions:
Sending DONE_CONF 2.1
Group complete
uftp: Finishing at Thu Jul 14 12:38:28 2011
</pre>

Router:
<pre>
uftpd -D /tmp/recv_dir
</pre>


* Wireless:




Host > Host

Router > Multiple Hosts: DOES NOT WORK!

Host: 
/uftpd -D /home/matt/src/bismark_week/ -L works ; tail -f works

2011/07/14 11:30:28.195551: UFTP version 3.5.1  Copyright (C) 2001-2011  Dennis A. Bush
2011/07/14 11:30:28.196667: Loaded key with fingerprint 12:7F:6E:58:60:85:63:E4:64:71:25:FA:80:FC:53:F6:46:87:2E:B9

Router:
root@gw:~# uftp -D -L /tmp/1stlog /tmp/file.test 
Killed
root@gw:~# du /tmp/file.test 
12268	/tmp/file.test

Note: the 1stlog file is never created. 



h3. Experiment environment

Routers: Netgear WNDR3700V2 Running CeroWRT smoketest

Host A: Thinkpad X61s 
Linux wontseeme 2.6.38-7.dmz.1-liquorix-amd64 #1 ZEN SMP PREEMPT Sun May 22 23:53:16 CDT 2011 x86_64 x86_64 x86_64 GNU/Linux

Host B: Virtualized instance of Ubuntu 10.10 on Macbook Pro
Macbook: Processor 2 Ghz Intel Core 2 Duo, Memory 2 GB 1067 MHz DDR3 running Mac OS X version 10.6.8
VM: Linux jupiter 2.6.35-30-generic #54-Ubuntu SMP Tue Jun 7 18:40:23 UTC 2011 i686 GNU/Linux

h3. Preliminary Results

","",2011-08-01 11:57:23.649226,19
104,104,213,"h1. Wiki

ISCwrt is an attempt to get DNSSEC working on an edge router. 

The present [[build]] has many desirable [[features]], but requires much hand [[configuration]].

The first prototype is ""up and running in production"":http://www.sisotowbell.org, with a simple python cgi script to test the performance of the web server and CGI interface, available at ""potluck.cgi"":http://www.sisotowbell.org/potluck.cgi

This project was only recently broken out from the [[uberwrt:Wiki|Überwrt]] project and is part of the [[bloat:Wiki|Bufferbloat]] family of projects. Please go there for more wiki information.

Some basic [[bind9 on wndr3700v2 performance statistics]]

*Update - March 2012:* The [[Cerowrt:|CeroWrt]] project has taken on most of the development effort for this project.","",2012-03-17 10:10:52.299136,10
102,102,84,"h1. Equations

h2. Impacts of delay on TCP throughput

The throughput of a single TCP session is not only constrained by the available bandwidth, but also by delay and packet loss rate. Any layer 2 error correction method needs to find the right balance between adding delay and accepting packet loss. 

The Mathis formula gives an upper bound:
<pre>
Max DATA throughput rate < (MSS/RTT)*(1 / sqrt(p))
</pre>
* MSS: maximum segment size
* RTT: round trip time
* p: packet loss rate

RfC 3819, Section 8.5 gives a more accurate estimate:
<pre>
                                         MSS
           BW = --------------------------------------------------------
                RTT*sqrt(1.33*p) + RTO*p*[1+32*p^2]*min[1,3*sqrt(.75*p)]

   where

           BW   is the maximum TCP throughout achievable by an
                individual TCP flow
           MSS  is the TCP segment size being used by the connection
           RTT  is the end-to-end round trip time of the TCP connection
           RTO  is the packet timeout (based on RTT)
           p    is the packet loss rate for the path
                (i.e., .01 if there is 1% packet loss)
</pre>
",added TCP throughput estimation formulas,2011-04-26 04:11:32.460449,1
49,49,3,"h1. Bufferbloat and Freeswitch Conference Call SUMMARY 1PM EST March 9

""Freeswitch"":http://www.freeswitch.org is one of the top two open source VOIP telephony applications, widely deployed throughout the world as a conference bridge, PBX, and IVR host. 

The conference call was an attempt to have a meeting of the minds between the bufferbloat project's work ongoing and the voice applications deployed in the field. The call was recorded. If you would like to participate post-hoc the mp3 is available at: 

http://wiki.freeswitch.org/files/conf_call_2011-03-09.mp3

If anyone pulls a meaningful detail out of the recording (I know I missed a few things) please update this wiki page.

h2. Attendees

Bufferbloat-ers: Jim Gettys, Dave Täht, Dave Hart
Freeswitch-ers: Michael Collins, Anthony Minessale (principal freeswitch developers)  and 28-33 other participants listening in. 

This conference call usually runs 30 minutes. It ran for 2 hours as we discussed all aspects of VOIP as it relates to bufferbloat. (And still barely scratched the surface)

h2. Discussion

Beforehand, in addition to tweeting the time and sip/skype/gtalk ""methods of connecting to the conference call"":http://www.bufferbloat.net/news/8, I (Dave Täht) posted ""How I came to fear the bloat and join the project"":http://the-edge.blogspot.com/2011/03/beating-my-bloat.html on ""one of my blogs"":http://the-edge.blogspot.com/ - (basically this pieces remixes several JG's blog posts from Nov-Jan 10)

Since JG was in poor voice I tried out my ""Kleinrock has no buffers for TCP/IP, and buffers = distance and we're going over the moon"" rant (needs polish!), which JG then filled in with some more background from his ""Dark Buffers on the Internet"":http://mirrors.bufferbloat.net/Talks/BellLabs01192011/ presentation.
 
It's pretty obvious that we need to have an elevator pitch about what bufferbloat.net is about. I ended up talking way too much about bug [#33].

The comcast paper that established ""32 as an upper bound for unmanaged buffering on some home gateways"":needthelink in many circumstances was discussed. Both JG and I stressed it was the formula, not the number, that was important.

We talked about the ""Mesh Potato"":http://www.villagetelco.org/about/mesh-potato/ , the ""IP04"":http://www.rowetel.com/blog/?page_id=440 , and ""David Rowe's excellent blog on low power/cost applications"":http://www.rowetel.com/blog/

The ""new ultra-low delay CELT codec"":http://www.celt-codec.org/ was raved about... As codecs go, it really rocks.

I had a chance to talk a little bit about my (now on-hold) ""Wisp6"":http://nex-6.taht.net/wiki/wisp6/ project, including showing off the sites and beam widths on the ""Bandwidth for Barrios Google Earth Map"":http://www.teklibre.com/~d/b4barrios10.kml (zoom in below San Juan Del Sur, Nicaragua), the ""view"":http://www.teklibre.com/~d/casayanqui/masterbedoomviewbetter.jpg - the (lack of) legal and regulatory environment, the ""partner"":http://www.condor.com.ni I worked with, and of course, ""the surfing"":http://www.nicaraguasurfreport.com/reportlist.php?id_secc=25&amp;x_date=2011-03-05&amp;z_date=%3D%2C%27%2C%27

We talked a bit about the cellular service lacking ""Pityhaya festival"":http://www.earthshippitayafestival.com/ could perhaps leverage the ongoing ""open source BTS/GSM project"":http://openbts.sourceforge.net/ , and also talked about how we can get the larger BTS/GSM companies to pay attention to bufferbloat.

Somewhere in there we talked about all the features folded into the new kernel tree,  ""debloat-testing"":https://lists.bufferbloat.net/pipermail/bloat-devel/2011-February/000061.html at present.

There was a really good question asked about how ""eBDP"" vs ""RED in a different light"":http://mirrors.bufferbloat.net/RelevantPapers/Red_in_a_different_light.pdf were supposed to interact. We talked about how RED was inadaquate and a bit about other AQMs like SFB could work in the presence of VOIP.

It turned out that since freeswitch VOIP servers use RTP for voice and TCP for command and control functions, that several members of freeswitch were already using ""TCP Vegas"":http://en.wikipedia.org/wiki/TCP_Vegas because it was latency sensitive. 

The ""Freeswitch Ethernet tuning page"":http://wiki.freeswitch.org/wiki/Performance_testing_and_configurations#Ethernet_tuning_in_Linux had recommendations that were grossly incorrect for nearly any circumstance, which we corrected during the call.

We discussed the old wondershaper, and the lack of a good universal shaper in general and the lack of one that handles dual-stack IPv6/4 traffic in particular. Gained another volunteer to look into the shaping problem (""Frank Carmickle"":http://www.carmickle.com )

On my ongoing quest to find a ipv6 enabled VOIP conference server on the East coast, we gained two potential volunteers as well as a potential site in Europe.

And then the call turned to the effects of virtualization on timing constraints and buffering. It sounds as though - with a little work - several virtual server technologies on both Linux and Windows can be made to ""do the right thing"" when it comes to timing constraints. Many of the Freeswitch developers are running on very old kernels (2.6.28, 2.6.18) in virtual environments.

And then the conversation gradually petered out...","",2011-03-10 08:07:29.340832,4
47,47,64,"h1. Network Analysis Tools

https://launchpad.net/flowgrind

http://www.wireshark.org/

http://shlang.com/thrulay/",added link to thrulay,2011-03-24 14:24:06.48838,2
95,95,3,"h1. Experimental patches

<nbd> if you want to play with this, copy these two patches to
      package/mac80211/patches and rebuild the kernel:  [20:12]
<nbd> http://nbd.name/570-ath9k_aggr_cleanup.patch
      http://nbd.name/571-ath9k_limit_qlen.patch
<nbd> then you can go to /sys/kernel/debug/ieee80211/phy*/ath9k/
<nbd> and write queue length limits to qlen_aggr and qlen_single  [20:13]
<nbd> (default is 0: disabled)

 btw. here's my latency comparison (with one iperf TCP stream)
<nbd> http://pastebin.com/CQh9AjkN","",2011-04-17 07:57:26.03513,1
134,134,3,"h1. Repository structure

h2. Today

Presently, the repository structure on huchra is as follows:

src/openwrt - a checkout originally from cerowrt, now a checkout from openwrt

src/capetown-wndr3700 - a git repo that -references the openwrt repo but has a few things of it's own that need to become pushed up to openwrt or pushed back into cerowrt.

src/capetown-wndr3700/feeds/{xwrt,packages,bismark-packages,cerowrt}: various sub checkouts of stuff included in the final build

src/bismark-packages - the packages specific to bismark

src/bismark-chrome - the web site on the router itself

src/dashboarddb - the database sql and some of the web site

The above are all in git. There are a jillion other repos no longer in use, including the wndr one we started with, and (failed) attempts at building capetown for the buffalo and others.

Additionally, there is an svn repo

src/bismark

from which the bismark-active and bismark-mgmt packages are generated.

...

h2. Future

Making this mildly more sane would be useful.
","",2011-05-28 06:40:16.961349,3
139,139,3,"h1. Protocol usage with iptables

Idea stolen from: https://forum.openwrt.org/viewtopic.php?pid=20345#p20345

Regrettably this does not work well with the firewalling solution already in place.

<pre><code style=bash>
iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto bittorrent -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto bittorrent -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto ftp -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto ftp -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto ssh -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto ssh -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto pop3 -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto pop3 -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto smtp -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto smtp -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto imap -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto imap -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto directconnect -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto directconnect -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto http -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto http -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto rdp -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto rdp -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto smb -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto smb -j MARK --set-mark 3

iptables -t mangle -A POSTROUTING -o vlan1 -m layer7 --l7proto ventrilo -j MARK --set-mark 3
iptables -t mangle -A PREROUTING -i vlan1 -m layer7 --l7proto ventrilo -j MARK --set-mark 3

#All unmarked
iptables -t mangle -A POSTROUTING -o $WAN -m mark --mark 0 -j MARK --set-mark 100
iptables -t mangle -A PREROUTING -i $WAN -m mark --mark 0 -j MARK --set-mark 101

</code></pre>
","",2011-05-28 08:21:02.222571,1
141,141,3,"h1. Experiment - QoS

h2. Here is an example of QoS doing it's job, with a setting of 1Mbit
using pdsh to control the testbed in the [[testlab]]

(this is also a demonstration on how to use [[pdsh]] effectively)

pdsh -lroot -grouters 'iperf -w 1M -t 60 -c metis.noise.gatech.edu'

Aitne, in this case, is applying QoS to the other routers, and also participating in the test.

@aitne: [ ID] Interval       Transfer     Bandwidth
aitne: [  3]  0.0-60.0 sec   773 MBytes   108 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-60.2 sec  1.75 MBytes   244 Kbits/sec
elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-63.2 sec  1.88 MBytes   249 Kbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-64.2 sec  1.88 MBytes   245 Kbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-62.8 sec  1.75 MBytes   234 Kbits/sec@

h2. Let's disable QoS on Aitne, temporarily:

ssh -lroot aitne 'PATH=/usr/bin:/bin:/sbin:/usr/sbin /etc/init.d/qos stop'

And re-run the test, this time with a huge (220k) window...

@pdsh -lroot -grouters 'iperf -w 1M -t 60 -c metis.noise.gatech.edu'@

This hangs! And...

@root@metis:/home/dtaht# ip route
unreachable 172.16.22.1  proto babel  metric -1 onlink 
unreachable 192.168.115.186  proto babel  metric -1 onlink 
unreachable 172.16.23.1  proto babel  metric -1 onlink 
unreachable 192.168.115.171  proto babel  metric -1 onlink 
unreachable 143.215.131.240  proto babel  metric -1 onlink 
unreachable 192.168.34.1  proto babel  metric -1 onlink 
192.168.134.1 via 192.168.132.1 dev eth0  proto babel onlink 
unreachable 192.168.32.1  proto babel  metric -1 onlink 
192.168.133.1 via 192.168.132.1 dev eth0  proto babel onlink 
unreachable 130.207.97.22  proto babel  metric -1 onlink 
unreachable 192.168.33.1  proto babel  metric -1 onlink 
192.168.132.1 via 192.168.132.1 dev eth0  proto babel onlink 
unreachable 192.168.22.216  proto babel  metric -1 onlink 
unreachable 192.168.110.1  proto babel  metric -1 onlink 
unreachable 192.168.22.223  proto babel  metric -1 onlink 
unreachable 192.168.111.1  proto babel  metric -1 onlink 
unreachable 172.16.23.105  proto babel  metric -1 onlink 
unreachable 172.16.23.110  proto babel  metric -1 onlink 
unreachable 192.168.105.1  proto babel  metric -1 onlink 
unreachable 192.168.106.1  proto babel  metric -1 onlink 
unreachable 172.16.23.115  proto babel  metric -1 onlink 
unreachable 192.168.107.1  proto babel  metric -1 onlink 
unreachable 192.168.116.1  proto babel  metric -1 onlink 
unreachable 192.168.23.1  proto babel  metric -1 onlink 
unreachable 192.168.117.1  proto babel  metric -1 onlink 
unreachable 192.168.22.1  proto babel  metric -1 onlink 
unreachable 192.168.112.1  proto babel  metric -1 onlink 
unreachable 192.168.22.32  proto babel  metric -1 onlink 
unreachable 192.168.115.1  proto babel  metric -1 onlink 
unreachable 192.168.120.1  proto babel  metric -1 onlink 
unreachable 192.168.121.1  proto babel  metric -1 onlink 
unreachable 172.16.23.254  proto babel  metric -1 onlink 
unreachable 172.16.22.254  proto babel  metric -1 onlink 
unreachable 192.168.24.1  proto babel  metric -1 onlink 
unreachable 192.168.116.0/24  proto babel  metric -1 onlink 
unreachable 192.168.23.0/24  proto babel  metric -1 onlink 
unreachable 172.16.22.0/24  proto babel  metric -1 onlink 
unreachable 192.168.117.0/24  proto babel  metric -1 onlink 
unreachable 192.168.22.0/24  proto babel  metric -1 onlink 
unreachable 172.16.23.0/24  proto babel  metric -1 onlink 
unreachable 192.168.112.0/24  proto babel  metric -1 onlink 
130.207.97.0/24 dev eth1  proto kernel  scope link  src 130.207.97.23 
unreachable 192.168.115.0/24  proto babel  metric -1 onlink 
192.168.132.0/24 dev eth0  proto kernel  scope link  src 192.168.132.240 
unreachable 192.168.110.0/24  proto babel  metric -1 onlink 
unreachable 192.168.111.0/24  proto babel  metric -1 onlink 
unreachable 192.168.105.0/24  proto babel  metric -1 onlink 
unreachable 192.168.106.0/24  proto babel  metric -1 onlink 
unreachable 192.168.107.0/24  proto babel  metric -1 onlink 
unreachable 192.168.24.0/24  proto babel  metric -1 onlink 
default via 130.207.97.1 dev eth1 @

*Wow* what happened? The routing tables got blown up on metis.

Even on aitne, they vanished.

root@aitne:~# ip route
192.168.132.240 via 192.168.132.240 dev br-lan  proto 42 onlink 
130.207.97.23 via 192.168.132.240 dev br-lan  proto 42 onlink 
192.168.134.0/24 dev wlan4  proto kernel  scope link  src 192.168.134.1 
192.168.133.0/24 dev wlan1  proto kernel  scope link  src 192.168.133.1 
192.168.132.0/24 dev br-lan  proto kernel  scope link  src 192.168.132.1@

Obviously we induced a problem with the routing by flooding the network.

After a few minutes the network recovers...
@
172.16.22.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.115.186 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.115.171 via 192.168.132.1 dev eth0  proto babel onlink 
143.215.131.240 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.34.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.134.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.32.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.133.1 via 192.168.132.1 dev eth0  proto babel onlink 
130.207.97.22 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.33.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.132.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.22.216 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.110.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.22.223 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.111.1 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.105 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.110 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.105.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.106.1 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.115 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.107.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.116.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.23.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.117.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.22.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.112.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.22.32 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.115.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.120.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.121.1 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.254 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.22.254 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.24.1 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.116.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.23.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.22.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.117.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.22.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
172.16.23.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.112.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
130.207.97.0/24 dev eth1  proto kernel  scope link  src 130.207.97.23 
192.168.115.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.132.0/24 dev eth0  proto kernel  scope link  src 192.168.132.240 
192.168.110.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.111.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.105.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.106.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.107.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
192.168.24.0/24 via 192.168.132.1 dev eth0  proto babel onlink 
default via 130.207.97.1 dev eth1@

Let's do that again! This time... 

h2. Let's drop aitne out of the test here, leave QoS on, and just try the routers.

@pdsh -lroot -grouters -xaitne 'iperf -w 1M -t 60 -c metis.noise.gatech.edu'@

@elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec  1.75 MBytes   245 Kbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-61.1 sec  1.75 MBytes   240 Kbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-64.1 sec  1.75 MBytes   229 Kbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-62.7 sec  1.75 MBytes   234 Kbits/sec@

OK, let's disable QoS again on aitne and see what happens, making sure it's dead:

@root@aitne:~# /etc/init.d/qos stop
root@aitne:~# tc qdisc 
qdisc pfifo_fast 0: dev eth0 root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
qdisc pfifo_fast 0: dev eth1 root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1
qdisc mq 0: dev wlan0 root 
qdisc mq 0: dev wlan2 root 
qdisc mq 0: dev mon.wlan0 root 
qdisc mq 0: dev wlan1 root 
qdisc mq 0: dev wlan3 root 
qdisc mq 0: dev wlan5 root 
qdisc mq 0: dev mon.wlan3 root 
qdisc mq 0: dev wlan4 root 
qdisc pfifo_fast 0: dev ifb0 root refcnt 2 bands 3 priomap  1 2 2 2 1 2 0 0 1 1 1 1 1 1 1 1@

OK, lets watch it go boom... maybe... with a 10 second test. wow. thebe gets starved, and it takes forever to connect to leda.

@pdsh -lroot -grouters -xaitne 'iperf -w 1M -t 10 -c metis.noise.gatech.edu'@

@elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-10.0 sec  74.4 MBytes  62.4 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-10.0 sec  49.3 MBytes  41.3 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-13.4 sec   384 KBytes   234 Kbits/sec
leda: ------------------------------------------------------------
leda: Client connecting to metis.noise.gatech.edu, TCP port 5001
leda: TCP window size:  220 KByte (WARNING: requested 1.00 MByte)
leda: ------------------------------------------------------------
leda: [  3] local 192.168.115.1 port 39834 connected with 130.207.97.23 port 5001
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-10.0 sec   109 MBytes  90.9 Mbits/sec@

Let's rerun that for 60 seconds instead, while pinging... KABOOM!

@root@metis:/home/dtaht# ping jupiter
PING jupiter (192.168.22.1) 56(84) bytes of data.
From metis.local (192.168.132.240) icmp_seq=1 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=2 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=3 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=4 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=5 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=6 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=7 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=8 Destination Host Unreachable
From metis.local (192.168.132.240) icmp_seq=9 Destination Host Unreachable@

And the routes have disappeared again:

@root@metis:/home/dtaht# ip route
unreachable 172.16.22.1  proto babel  metric -1 onlink 
unreachable 192.168.115.186  proto babel  metric -1 onlink 
unreachable 172.16.23.1  proto babel  metric -1 onlink 
unreachable 192.168.115.171  proto babel  metric -1 onlink 
unreachable 143.215.131.240  proto babel  metric -1 onlink 
unreachable 192.168.34.1  proto babel  metric -1 onlink 
unreachable 192.168.134.1  proto babel  metric -1 onlink 
unreachable 192.168.32.1  proto babel  metric -1 onlink 
unreachable 192.168.133.1  proto babel  metric -1 onlink 
unreachable 130.207.97.22  proto babel  metric -1 onlink 
unreachable 192.168.33.1  proto babel  metric -1 onlink 
unreachable 192.168.132.1  proto babel  metric -1 onlink 
unreachable 192.168.22.216  proto babel  metric -1 onlink 
unreachable 192.168.110.1  proto babel  metric -1 onlink 
unreachable 192.168.22.223  proto babel  metric -1 onlink 
unreachable 192.168.111.1  proto babel  metric -1 onlink 
unreachable 172.16.23.105  proto babel  metric -1 onlink 
unreachable 172.16.23.110  proto babel  metric -1 onlink 
unreachable 192.168.105.1  proto babel  metric -1 onlink 
unreachable 192.168.106.1  proto babel  metric -1 onlink 
unreachable 172.16.23.115  proto babel  metric -1 onlink 
unreachable 192.168.107.1  proto babel  metric -1 onlink 
unreachable 192.168.116.1  proto babel  metric -1 onlink 
unreachable 192.168.23.1  proto babel  metric -1 onlink 
unreachable 192.168.117.1  proto babel  metric -1 onlink 
unreachable 192.168.22.1  proto babel  metric -1 onlink 
unreachable 192.168.112.1  proto babel  metric -1 onlink 
unreachable 192.168.22.32  proto babel  metric -1 onlink 
unreachable 192.168.115.1  proto babel  metric -1 onlink 
unreachable 192.168.120.1  proto babel  metric -1 onlink 
unreachable 192.168.121.1  proto babel  metric -1 onlink 
unreachable 172.16.23.254  proto babel  metric -1 onlink 
unreachable 172.16.22.254  proto babel  metric -1 onlink 
unreachable 192.168.24.1  proto babel  metric -1 onlink 
unreachable 192.168.116.0/24  proto babel  metric -1 onlink 
unreachable 192.168.23.0/24  proto babel  metric -1 onlink 
unreachable 172.16.22.0/24  proto babel  metric -1 onlink 
unreachable 192.168.117.0/24  proto babel  metric -1 onlink 
unreachable 192.168.22.0/24  proto babel  metric -1 onlink 
unreachable 172.16.23.0/24  proto babel  metric -1 onlink 
unreachable 192.168.112.0/24  proto babel  metric -1 onlink 
130.207.97.0/24 dev eth1  proto kernel  scope link  src 130.207.97.23 
unreachable 192.168.115.0/24  proto babel  metric -1 onlink 
192.168.132.0/24 dev eth0  proto kernel  scope link  src 192.168.132.240 
unreachable 192.168.110.0/24  proto babel  metric -1 onlink 
unreachable 192.168.111.0/24  proto babel  metric -1 onlink 
unreachable 192.168.105.0/24  proto babel  metric -1 onlink 
unreachable 192.168.106.0/24  proto babel  metric -1 onlink 
unreachable 192.168.107.0/24  proto babel  metric -1 onlink 
unreachable 192.168.24.0/24  proto babel  metric -1 onlink 
default via 130.207.97.1 dev eth1 @

Obviously, we have a problem here, that only happens under heavy load. It may be multicast packets being dropped or overly delayed, it may be excessive packet queuing in the switch, it may be anything... it may be bufferbloat, it may be a need for ECN...

Wait 2 minutes for the network to recover... still waiting... might need to reboot stuff... Finally get back on, iperf is hung on leda...

I can also conclude that some level of QoS is needed on the internal network.

h2. Let's blow this up ONE MORE TIME

Iperf was hung on leda, so let's make sure it's dead everywhere:

@pdsh -lroot -grouters 'killall iperf'@

And reduce txqueuelen on metis

@ifconfig eth0 txqueuelen 4@

A reference ping to jupiter:

64 bytes from jupiter (192.168.22.1): icmp_req=8 ttl=62 time=0.839 ms
64 bytes from jupiter (192.168.22.1): icmp_req=9 ttl=62 time=0.715 ms


And fire up the test

@pdsh -lroot -grouters -xaitne 'iperf -w 1M -t 10 -c metis.noise.gatech.edu'@


io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.9 sec  1.75 MBytes   241 Kbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-61.0 sec  1.75 MBytes   241 Kbits/sec
elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-64.1 sec  1.75 MBytes   229 Kbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-62.5 sec  1.88 MBytes   252 Kbits/sec


Wow, during the test, ping jitters all over the place and is enormous!


64 bytes from jupiter (192.168.22.1): icmp_req=15 ttl=62 time=124 ms
64 bytes from jupiter (192.168.22.1): icmp_req=16 ttl=62 time=109 ms
64 bytes from jupiter (192.168.22.1): icmp_req=17 ttl=62 time=110 ms
64 bytes from jupiter (192.168.22.1): icmp_req=19 ttl=62 time=137 ms
64 bytes from jupiter (192.168.22.1): icmp_req=20 ttl=62 time=174 ms
64 bytes from jupiter (192.168.22.1): icmp_req=21 ttl=62 time=103 ms
64 bytes from jupiter (192.168.22.1): icmp_req=24 ttl=62 time=99.1 ms
64 bytes from jupiter (192.168.22.1): icmp_req=25 ttl=62 time=149 ms
64 bytes from jupiter (192.168.22.1): icmp_req=26 ttl=62 time=119 ms
64 bytes from jupiter (192.168.22.1): icmp_req=27 ttl=62 time=170 ms
64 bytes from jupiter (192.168.22.1): icmp_req=29 ttl=62 time=115 ms
64 bytes from jupiter (192.168.22.1): icmp_req=30 ttl=62 time=165 ms
64 bytes from jupiter (192.168.22.1): icmp_req=31 ttl=62 time=108 ms
64 bytes from jupiter (192.168.22.1): icmp_req=32 ttl=62 time=172 ms
64 bytes from jupiter (192.168.22.1): icmp_req=33 ttl=62 time=142 ms
64 bytes from jupiter (192.168.22.1): icmp_req=34 ttl=62 time=112 ms
64 bytes from jupiter (192.168.22.1): icmp_req=35 ttl=62 time=135 ms
64 bytes from jupiter (192.168.22.1): icmp_req=37 ttl=62 time=176 ms
64 bytes from jupiter (192.168.22.1): icmp_req=38 ttl=62 time=146 ms

But it survives, and we have ping packet loss.

--- jupiter ping statistics ---
136 packets transmitted, 124 received, 8% packet loss, time 135142ms
rtt min/avg/max/mdev = 0.706/57.325/176.773/65.420 ms


So we have buffering either in metis's driver, or the switch, that is in EXCESS of 100ms, on a network
that should have gigE capability, but appears to be running only at 100Mbit, through the router.

h2. Two followups while running iperf

h3. Finding where the overbuffering is:

pinging from metis, through aitne, through leda, to io.

64 bytes from io (192.168.110.1): icmp_req=23 ttl=62 time=186 ms
64 bytes from io (192.168.110.1): icmp_req=24 ttl=62 time=116 ms
64 bytes from io (192.168.110.1): icmp_req=25 ttl=62 time=154 ms
64 bytes from io (192.168.110.1): icmp_req=26 ttl=62 time=150 ms
64 bytes from io (192.168.110.1): icmp_req=27 ttl=62 time=161 ms
^C
--- io ping statistics ---
27 packets transmitted, 24 received, 11% packet loss, time 26031ms
rtt min/avg/max/mdev = 0.702/95.733/186.610/64.807 ms

root@metis:/home/dtaht# traceroute io
traceroute to io (192.168.110.1), 30 hops max, 60 byte packets
 1  aitne (192.168.132.1)  0.192 ms  0.242 ms  0.273 ms
 2  leda (192.168.115.1)  137.086 ms  137.955 ms  138.789 ms
 3  io (192.168.110.1)  139.734 ms  140.623 ms  141.460 ms
root@metis:/home/dtaht# ping leda

64 bytes from leda (192.168.115.1): icmp_req=1 ttl=63 time=130 ms
64 bytes from leda (192.168.115.1): icmp_req=2 ttl=63 time=127 ms
64 bytes from leda (192.168.115.1): icmp_req=3 ttl=63 time=165 ms
^C
--- leda ping statistics ---
3 packets transmitted, 3 received, 0% packet loss, time 2001ms
rtt min/avg/max/mdev = 127.337/140.934/165.281/17.257 ms
root@metis:/home/dtaht# ping aitne
PING aitne (192.168.132.1) 56(84) bytes of data.
64 bytes from aitne (192.168.132.1): icmp_req=1 ttl=64 time=0.208 ms
64 bytes from aitne (192.168.132.1): icmp_req=2 ttl=64 time=0.206 ms
64 bytes from aitne (192.168.132.1): icmp_req=3 ttl=64 time=0.225 ms

h3. OK, so lets try aitne to io, through leda:

root@aitne:~# ping 192.168.110.1
PING 192.168.110.1 (192.168.110.1): 56 data bytes
64 bytes from 192.168.110.1: seq=0 ttl=63 time=141.142 ms
64 bytes from 192.168.110.1: seq=1 ttl=63 time=165.623 ms
64 bytes from 192.168.110.1: seq=2 ttl=63 time=109.392 ms
64 bytes from 192.168.110.1: seq=3 ttl=63 time=174.408 ms
64 bytes from 192.168.110.1: seq=5 ttl=63 time=155.456 ms
64 bytes from 192.168.110.1: seq=6 ttl=63 time=126.857 ms
64 bytes from 192.168.110.1: seq=7 ttl=63 time=124.508 ms


Wow. OK, so we have buffering going on at the sources of the tests (the two routers) that is insane.

Let's blow 'em up  again... Let's make sure qos is dead everywhere, and blow up the network again.

Make sure Qos is gone

@pdsh -lroot -grouters 'PATH=/usr/bin:/bin:/sbin:/usr/sbin tc qdisc'@

Start the test, as before...

It knocks aitne offline immediately!

root@aitne:~# ping 192.168.110.1

64 bytes from 192.168.110.1: seq=264 ttl=63 time=0.571 ms
64 bytes from 192.168.110.1: seq=265 ttl=63 time=0.555 ms
64 bytes from 192.168.110.1: seq=266 ttl=63 time=0.596 ms

Started the test here, before the next ping went out, aitne stopped working entirely.

Eventually the ssh session on aitne broke:

Write failed: Broken pipe

unreachable 192.168.106.0/24  proto babel  metric -1 onlink 
unreachable 192.168.107.0/24  proto babel  metric -1 onlink 
unreachable 192.168.24.0/24  proto babel  metric -1 onlink


I think this demonstrates any one or several possible problems.

# There is most likely truly excessive buffering in the switch (the driver was somewhat debloated)
# Some form of fair queuing above and beyond the pfifo_fast qdisc is needed (nagle, 89) on internal ethernet interfaces
# There may be problems with connection tracking or iptables - after a lockup, ssh drops, but it can be restarted
# Multicast packets fail under heavy load
# these routers may have a driver issue in general
# Some form of fair queuing seems desirable on the switch, too.
# Bufferbloat SUCKS

Testing with packet captures is needed.

See also:

http://metis.noise.gatech.edu/cacti/graph_view.php?action=preview&host_id=3&graph_template_id=0&filter=
login and password of guest

h2. Some background info

The routing interface is set to 5.

thebe: 
dtaht@metis:~$ pdsh -lroot -grouters '/sbin/ifconfig eth1' | grep txqueuelen
aitne:           collisions:0 txqueuelen:5 
io:           collisions:0 txqueuelen:5 
leda:           collisions:0 txqueuelen:5 
elara:           collisions:0 txqueuelen:5 
thebe:           collisions:0 txqueuelen:5 

no errors were reported, either.

The internal interfaces are set to 16

dtaht@metis:~$ pdsh -lroot -grouters '/sbin/ifconfig eth0' | grep txqueuelen
aitne:           collisions:0 txqueuelen:16 
elara:           collisions:0 txqueuelen:16 
thebe:           collisions:0 txqueuelen:16 
io:           collisions:0 txqueuelen:16 
leda:           collisions:0 txqueuelen:16 

a @pdsh -lroot -grouters '/sbin/logread | tail -20'@

was unrevealing, as was dmesg.

h2. Future directions

Repeat tests with a smaller MSS size
Repeat tests with a smaller window
Repeat tests with instrumentation
Repeat tests with latest build
Repeat tests with a larger txqueuelen
Repeat tests with wireless
Repeat tests with simplified QoS
Repeat tests without babel
Repeat tests without vlan - THIS WORKED - see last entry

h2. Repeat test with QoS on aitne set to 100Mbit or 90Mbit (crashes)
60Mbits works, with ping times in the 40 to 50 ms range

elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec   135 MBytes  18.9 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.0 sec   105 MBytes  14.7 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-60.0 sec  80.3 MBytes  11.2 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-60.1 sec  86.4 MBytes  12.1 Mbits/sec

h2. Repeat with 16k window size and no QoS

Works:

elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec   225 MBytes  31.4 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-60.0 sec  33.9 MBytes  4.73 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.0 sec   168 MBytes  23.5 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-61.0 sec   278 MBytes  38.3 Mbits/sec


We survive, but this is crazy

64 bytes from 192.168.22.1: seq=31 ttl=63 time=0.547 ms
64 bytes from 192.168.22.1: seq=32 ttl=63 time=155.124 ms
64 bytes from 192.168.22.1: seq=33 ttl=63 time=1.414 ms
64 bytes from 192.168.22.1: seq=34 ttl=63 time=3.404 ms
64 bytes from 192.168.22.1: seq=35 ttl=63 time=2.137 ms
64 bytes from 192.168.22.1: seq=36 ttl=63 time=150.703 ms
64 bytes from 192.168.22.1: seq=37 ttl=63 time=1.528 ms
64 bytes from 192.168.22.1: seq=38 ttl=63 time=0.667 ms
64 bytes from 192.168.22.1: seq=39 ttl=63 time=4.756 ms
64 bytes from 192.168.22.1: seq=40 ttl=63 time=0.636 ms
64 bytes from 192.168.22.1: seq=41 ttl=63 time=23.574 ms
64 bytes from 192.168.22.1: seq=42 ttl=63 time=4.236 ms
64 bytes from 192.168.22.1: seq=43 ttl=63 time=0.830 ms
64 bytes from 192.168.22.1: seq=44 ttl=63 time=0.595 ms
64 bytes from 192.168.22.1: seq=45 ttl=63 time=39.417 ms
64 bytes from 192.168.22.1: seq=46 ttl=63 time=1.269 ms
64 bytes from 192.168.22.1: seq=47 ttl=63 time=0.881 ms
64 bytes from 192.168.22.1: seq=48 ttl=63 time=3.035 ms
64 bytes from 192.168.22.1: seq=50 ttl=63 time=476.244 ms
64 bytes from 192.168.22.1: seq=51 ttl=63 time=6.557 ms
64 bytes from 192.168.22.1: seq=52 ttl=63 time=124.569 ms
64 bytes from 192.168.22.1: seq=53 ttl=63 time=0.665 ms
64 bytes from 192.168.22.1: seq=54 ttl=63 time=2.205 ms

h2. 64kb window size

elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.2 sec   221 MBytes  30.8 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.1 sec   173 MBytes  24.1 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-60.0 sec   288 MBytes  40.2 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-60.2 sec  30.3 MBytes  4.22 Mbits/sec


64 bytes from 192.168.22.1: seq=178 ttl=63 time=1.758 ms
64 bytes from 192.168.22.1: seq=179 ttl=63 time=3.140 ms
64 bytes from 192.168.22.1: seq=180 ttl=63 time=1.052 ms
64 bytes from 192.168.22.1: seq=181 ttl=63 time=1.021 ms
64 bytes from 192.168.22.1: seq=182 ttl=63 time=6.305 ms
64 bytes from 192.168.22.1: seq=183 ttl=63 time=0.737 ms
64 bytes from 192.168.22.1: seq=184 ttl=63 time=17.062 ms
64 bytes from 192.168.22.1: seq=185 ttl=63 time=11.222 ms
64 bytes from 192.168.22.1: seq=186 ttl=63 time=26.823 ms
64 bytes from 192.168.22.1: seq=187 ttl=63 time=1.043 ms
64 bytes from 192.168.22.1: seq=188 ttl=63 time=29.655 ms
64 bytes from 192.168.22.1: seq=189 ttl=63 time=8.440 ms
64 bytes from 192.168.22.1: seq=190 ttl=63 time=1.943 ms
64 bytes from 192.168.22.1: seq=191 ttl=63 time=0.565 ms
64 bytes from 192.168.22.1: seq=192 ttl=63 time=4.093 ms
64 bytes from 192.168.22.1: seq=193 ttl=63 time=3.671 ms
64 bytes from 192.168.22.1: seq=194 ttl=63 time=52.116 ms
64 bytes from 192.168.22.1: seq=195 ttl=63 time=5.638 ms

h3. greater than 64k window size

boom.

h2. Bridging disabled on the vlan interface (no wireless)

After fixing #186 ...

h3. Qos set to 60Mbit on aitne, 128k window size

pdsh -lroot -grouters -xaitne 'iperf -w128k -t 60 -c metis.noise.gatech.edu'


thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-60.0 sec  85.3 MBytes  11.9 Mbits/sec
elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec   131 MBytes  18.3 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.0 sec   103 MBytes  14.4 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-60.0 sec  96.1 MBytes  13.4 Mbits/sec


64 bytes from 192.168.22.1: seq=104 ttl=63 time=35.741 ms
64 bytes from 192.168.22.1: seq=105 ttl=63 time=38.569 ms
64 bytes from 192.168.22.1: seq=106 ttl=63 time=41.837 ms
64 bytes from 192.168.22.1: seq=107 ttl=63 time=45.428 ms
64 bytes from 192.168.22.1: seq=108 ttl=63 time=42.983 ms
64 bytes from 192.168.22.1: seq=109 ttl=63 time=25.225 ms
64 bytes from 192.168.22.1: seq=110 ttl=63 time=31.912 ms

h3. Vlan, Qos disabled, 128k window size

dtaht@metis:~$ pdsh -lroot -grouters -xaitne 'iperf -w64k -t 60 -c metis.noise.gatech.edu'
elara: ------------------------------------------------------------
elara: Client connecting to metis.noise.gatech.edu, TCP port 5001
elara: TCP window size:  128 KByte (WARNING: requested 64.0 KByte)
elara: ------------------------------------------------------------
elara: [  3] local 192.168.115.186 port 40091 connected with 130.207.97.23 port 5001
thebe: ------------------------------------------------------------
thebe: Client connecting to metis.noise.gatech.edu, TCP port 5001
thebe: TCP window size:  128 KByte (WARNING: requested 64.0 KByte)
thebe: ------------------------------------------------------------
io: ------------------------------------------------------------
io: Client connecting to metis.noise.gatech.edu, TCP port 5001
io: TCP window size:  128 KByte (WARNING: requested 64.0 KByte)
io: ------------------------------------------------------------
thebe: [  3] local 172.16.23.105 port 49502 connected with 130.207.97.23 port 5001
io: [  3] local 192.168.22.223 port 48909 connected with 130.207.97.23 port 5001
leda: ------------------------------------------------------------
leda: Client connecting to metis.noise.gatech.edu, TCP port 5001
leda: TCP window size:  128 KByte (WARNING: requested 64.0 KByte)
leda: ------------------------------------------------------------
leda: [  3] local 192.168.115.1 port 55528 connected with 130.207.97.23 port 5001
elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec   553 MBytes  77.3 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-60.0 sec   361 MBytes  50.5 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-62.5 sec   896 KBytes   117 Kbits/sec

leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-64.5 sec  60.1 MBytes  7.82 Mbits/sec


64 bytes from 192.168.22.1: seq=17 ttl=63 time=4.490 ms
64 bytes from 192.168.22.1: seq=18 ttl=63 time=5.133 ms
64 bytes from 192.168.22.1: seq=19 ttl=63 time=70.439 ms
64 bytes from 192.168.22.1: seq=20 ttl=63 time=41.900 ms
64 bytes from 192.168.22.1: seq=21 ttl=63 time=17.971 ms
64 bytes from 192.168.22.1: seq=22 ttl=63 time=32.655 ms
64 bytes from 192.168.22.1: seq=23 ttl=63 time=35.967 ms
64 bytes from 192.168.22.1: seq=24 ttl=63 time=21.027 ms
64 bytes from 192.168.22.1: seq=25 ttl=63 time=14.933 ms
64 bytes from 192.168.22.1: seq=26 ttl=63 time=11.854 ms
64 bytes from 192.168.22.1: seq=27 ttl=63 time=25.158 ms
64 bytes from 192.168.22.1: seq=28 ttl=63 time=3.590 ms
64 bytes from 192.168.22.1: seq=29 ttl=63 time=7.905 ms
64 bytes from 192.168.22.1: seq=30 ttl=63 time=1.676 ms
64 bytes from 192.168.22.1: seq=31 ttl=63 time=2.639 ms
64 bytes from 192.168.22.1: seq=32 ttl=63 time=23.146 ms
64 bytes from 192.168.22.1: seq=33 ttl=63 time=0.585 ms
64 bytes from 192.168.22.1: seq=34 ttl=63 time=4.390 ms
64 bytes from 192.168.22.1: seq=35 ttl=63 time=0.571 ms
64 bytes from 192.168.22.1: seq=36 ttl=63 time=0.574 ms

h3. vlan and bridge disabled, Qos disabled, 220k window size

dtaht@metis:~$ pdsh -lroot -grouters -xaitne 'iperf -w224k -t 60 -c metis.noise.gatech.edu'
elara: ------------------------------------------------------------
elara: Client connecting to metis.noise.gatech.edu, TCP port 5001
elara: TCP window size:  220 KByte (WARNING: requested  224 KByte)
elara: ------------------------------------------------------------
elara: [  3] local 192.168.115.186 port 45234 connected with 130.207.97.23 port 5001
thebe: ------------------------------------------------------------
thebe: Client connecting to metis.noise.gatech.edu, TCP port 5001
thebe: TCP window size:  220 KByte (WARNING: requested  224 KByte)
thebe: ------------------------------------------------------------
thebe: [  3] local 172.16.23.105 port 49315 connected with 130.207.97.23 port 5001
io: ------------------------------------------------------------
io: Client connecting to metis.noise.gatech.edu, TCP port 5001
io: TCP window size:  220 KByte (WARNING: requested  224 KByte)
io: ------------------------------------------------------------
io: [  3] local 192.168.22.223 port 58270 connected with 130.207.97.23 port 5001
leda: ------------------------------------------------------------
leda: Client connecting to metis.noise.gatech.edu, TCP port 5001
leda: TCP window size:  220 KByte (WARNING: requested  224 KByte)
leda: ------------------------------------------------------------
leda: [  3] local 192.168.115.1 port 45996 connected with 130.207.97.23 port 5001

elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-60.0 sec   526 MBytes  73.6 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-60.0 sec   233 MBytes  32.6 Mbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-64.5 sec   204 MBytes  26.5 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-82.0 sec   512 KBytes  51.2 Kbits/sec

64 bytes from 192.168.22.1: seq=165 ttl=63 time=1.418 ms
64 bytes from 192.168.22.1: seq=166 ttl=63 time=54.550 ms
64 bytes from 192.168.22.1: seq=167 ttl=63 time=86.666 ms
64 bytes from 192.168.22.1: seq=168 ttl=63 time=9.092 ms
64 bytes from 192.168.22.1: seq=169 ttl=63 time=54.473 ms
64 bytes from 192.168.22.1: seq=170 ttl=63 time=131.407 ms
64 bytes from 192.168.22.1: seq=171 ttl=63 time=8.612 ms
64 bytes from 192.168.22.1: seq=172 ttl=63 time=53.086 ms
64 bytes from 192.168.22.1: seq=173 ttl=63 time=1.622 ms
64 bytes from 192.168.22.1: seq=174 ttl=63 time=0.913 ms
64 bytes from 192.168.22.1: seq=175 ttl=63 time=69.206 ms
64 bytes from 192.168.22.1: seq=176 ttl=63 time=6.242 ms
64 bytes from 192.168.22.1: seq=177 ttl=63 time=13.658 ms
64 bytes from 192.168.22.1: seq=178 ttl=63 time=1.645 ms
64 bytes from 192.168.22.1: seq=179 ttl=63 time=19.966 ms
64 bytes from 192.168.22.1: seq=180 ttl=63 time=24.278 ms
64 bytes from 192.168.22.1: seq=181 ttl=63 time=5.844 ms
64 bytes from 192.168.22.1: seq=182 ttl=63 time=41.513 ms
64 bytes from 192.168.22.1: seq=183 ttl=63 time=10.450 ms
64 bytes from 192.168.22.1: seq=184 ttl=63 time=20.323 ms
64 bytes from 192.168.22.1: seq=185 ttl=63 time=179.199 ms
64 bytes from 192.168.22.1: seq=186 ttl=63 time=34.255 ms
64 bytes from 192.168.22.1: seq=187 ttl=63 time=11.795 ms
64 bytes from 192.168.22.1: seq=188 ttl=63 time=51.354 ms
64 bytes from 192.168.22.1: seq=189 ttl=63 time=4.369 ms

Why did thebe do so badly and take 83 seconds to complete?

h2. Run the same test for longer

dtaht@metis:~$ . /etc/profile.d/pdsh 
dtaht@metis:~$ pdsh -lroot -grouters -xaitne 'iperf -w220k -t 600 -c metis.noise.gatech.edu'
elara: ------------------------------------------------------------
elara: Client connecting to metis.noise.gatech.edu, TCP port 5001
elara: TCP window size:  220 KByte
elara: ------------------------------------------------------------
elara: [  3] local 192.168.115.186 port 41316 connected with 130.207.97.23 port 5001
io: ------------------------------------------------------------
io: Client connecting to metis.noise.gatech.edu, TCP port 5001
io: TCP window size:  220 KByte
io: ------------------------------------------------------------
thebe: ------------------------------------------------------------
thebe: Client connecting to metis.noise.gatech.edu, TCP port 5001
thebe: TCP window size:  220 KByte
thebe: ------------------------------------------------------------
leda: ------------------------------------------------------------
leda: Client connecting to metis.noise.gatech.edu, TCP port 5001
leda: TCP window size:  220 KByte
leda: ------------------------------------------------------------
leda: [  3] local 192.168.115.1 port 43984 connected with 130.207.97.23 port 5001
thebe: [  3] local 172.16.23.105 port 38976 connected with 130.207.97.23 port 5001
io: [  3] local 192.168.22.223 port 38365 connected with 130.207.97.23 port 5001

elara: [ ID] Interval       Transfer     Bandwidth
elara: [  3]  0.0-600.0 sec  5.14 GBytes  73.6 Mbits/sec
leda: [ ID] Interval       Transfer     Bandwidth
leda: [  3]  0.0-600.0 sec  3.73 GBytes  53.5 Mbits/sec
thebe: [ ID] Interval       Transfer     Bandwidth
thebe: [  3]  0.0-605.6 sec   384 KBytes  5.19 Kbits/sec
io: [ ID] Interval       Transfer     Bandwidth
io: [  3]  0.0-685.3 sec   476 MBytes  5.83 Mbits/sec

h2. Next up - recall the topology of the network

I am thinking, based on these results, that thebe and io are behind other routers, and being starved by the switches involved.
I'd meant to write a ip route to graphviz parser to do that sort of thing, I guess it's past time.

","",2011-05-29 09:20:08.645452,23
148,148,3,"h1. Wired oprofile with alignment trap

In doing testing of the wired driver, we are seeing unaligned instruction traps.
Losing 20% of cpu to an unaligned instruction is bad.

Regrettably, you can't see where they are being caused via oprofile...

Counted INSTRUCTIONS events (Instructions completed) with a unit mask of 0x00 (No unit mask) count 100000
samples  cum. samples  %        cum. %     app name                 symbol name
-------------------------------------------------------------------------------
2793     2793          15.9300  15.9300    vmlinux                  do_ade
  2793     2793          100.000  100.000    vmlinux                  do_ade [self]
-------------------------------------------------------------------------------
1750     4543           9.9812  25.9111    vmlinux                  csum_partial_copy_nocheck
  1750     1750          100.000  100.000    vmlinux                  csum_partial_copy_nocheck [self]
-------------------------------------------------------------------------------
1617     6160           9.2226  35.1337    ip_tables                /ip_tables
  1617     1617          100.000  100.000    ip_tables                /ip_tables [self]
-------------------------------------------------------------------------------
1594     7754           9.0914  44.2252    nf_conntrack             /nf_conntrack
  1594     1594          100.000  100.000    nf_conntrack             /nf_conntrack [self]
-------------------------------------------------------------------------------
606      8360           3.4563  47.6815    vmlinux                  tcp_v4_rcv
  606      606           100.000  100.000    vmlinux                  tcp_v4_rcv [self]
-------------------------------------------------------------------------------
565      8925           3.2225  50.9040    vmlinux                  csum_partial
  565      565           100.000  100.000    vmlinux                  csum_partial [self]
-------------------------------------------------------------------------------
544      9469           3.1027  54.0067    vmlinux                  handle_adel_int
  544      544           100.000  100.000    vmlinux                  handle_adel_int [self]
-------------------------------------------------------------------------------
435      9904           2.4810  56.4878    vmlinux                  ip_rcv
  435      435           100.000  100.000    vmlinux                  ip_rcv [self]
-------------------------------------------------------------------------------
433      10337          2.4696  58.9574    vmlinux                  __copy_user
  433      433           100.000  100.000    vmlinux                  __copy_user [self]
-------------------------------------------------------------------------------
","",2011-06-04 05:43:18.707282,1
300,300,213,"h1. CeroWrt and BCP38

CeroWrt 3.10.32-12 and later incorporate a module that implements the Best Common Practices 38 (BCP38) internet specification. This specification is discussed in detail at: http://www.bcp38.info/index.php/Main_Page

BCP38 prevents devices on the LAN side of the CeroWrt from spoofing source addresses. By default, CeroWrt filters out spoofed addresses on packets before they are sent into the Internet. 

The implementation goes to some lengths to detect the multiple-router case, so that you can have a primary and secondary router in your home. The image below shows the GUI in the CeroWrt web interface. Find it from the Network > Firewall > BCP38 tab.

!CeroWrtTorontoBCP38.png!","",2014-03-22 16:09:18.94369,5
19,19,549,"h1. Applying the Dogfood Principle

The current set of bufferbloat.net servers are configured according to the ""dogfood principle."":http://patternlanguagenetwork.myxwiki.org/xwiki/bin/view/Patterns/DogFoodPrinciple We're practicing what we preach, to what extent possible. Some of the knobs we are twisting are not well tested in the field, so we might as well test them somewhere! Admittedly a primary goal is to keep the service(s) running, so if we encounter problems, we will modify what is in place, and eventually move into the cloud. Until then, the dogfood principle applies. There will be a set of formal test servers and routers up at some point, too. 

[[ECN]] is turned on. Using ECN does little good unless one of the routers on the path actually uses it. Work is ongoing to see if it can be enabled in the general case. In the meantime feel free to try it.

[[SACK]] and [[DSACK]] are enabled. These do help.

It's very easy to enable these three options, under various forms of Linux. Into your /etc/sysctl.conf you can put
@  net.ipv4.tcp_ecn=1
   net.ipv4.tcp_sack=1
   net.ipv4.tcp_dsack=1@

[[IPv6]] is enabled in primary DNS and as part of the main website(s) themselves. IPv6 behavior is potentially worse, as IPv6 doesn't get anywhere near as much attention from developers, ISPs, or hardware vendors. It's potentially better in that less stuff (NAT, shapers) muck with it.

[[TXQUEUELEN]] is reduced to 64. This is (probably) the wrong thing for a server, but for one that is not doing traffic shaping (yet) and handling multiple flows, it makes sense as it does push more decision making back into the tcp portion of the buffer stack, where it belongs. 

[[Driver Buffers]] is currently unknown. These are older servers however, so we suspect they are non-bloated.

There is (currently) no outgoing traffic shaping in place, however [[Qdiscs#SFB|SFB]], [[Qdiscs#RED|RED]] are under consideration.

The apache servers are using ""Apache-mpm-event"":http://httpd.apache.org/docs/2.2/mod/event.html instead of the more common ""Apache-mpm-worker"":http://httpd.apache.org/docs/2.2/mod/worker.html - theoretically improving [[HTTP 1.1]] performance.

There is also a fix to MSIE recognition:

http://blogs.msdn.com/b/ieinternals/archive/2011/03/26/https-and-connection-close-is-your-apache-modssl-server-configuration-set-to-slow.aspx

All major bits of code (e.g. redmine) are running under a form of fastcgi (fcgid), which load balances and scales up and down well with minimal memory use. 

[[Experiment_-_TCP_cubic_vs_TCP_vegas|TCP Vegas]] is under consideration.

The (low-power) dedicated servers currently running are donated by ""ISC"":http://www.isc.org and ""Teklibre"":http://www.teklibre.com .

If you encounter problems, please send an email to support AT bufferbloat.net, detailing your configuration, and a traceroute.You can also take steps to [[Experiments|Diagnose your bufferbloat]].",fix missing space,2012-03-27 09:10:15.036186,18
127,127,3,"h1. Future directions

h2. History

When I (dave taht) started at this, my task was ""produce working routers"". Last week, it became ""make the database
work with postgres"", then ""make it work with django"", later on it became ""get the web site running"", and then ""make it possible to ask useful questions and get useful results"", and yesterday #171 ""create working defaults for QoS"", proceeding thus, rapidly, from possible to impossible in a matter of weeks, across several subfields (embedded, QA, web, and database) that are hard to multi-task across.

A breather, and design step, and a design document, and a plan that extends out at least a year... Are necessary.

My intent was to ""produce working routers"". You have a good version of openwrt, with almost all the related patches required for your specific project pushed into openwrt's head repository. You have a working build system on huchra, and innumerable other pieces of infrastructure on these wikis and server to support your further efforts. 

The routers seem to be working well.

The routers can be further tested, using standard QA processes #163, or experimented with, in a [[bismark-testbed:testlab]]. Given how late various packages landed, I'm rather unsatisfied with the testing thus far, any given router and distribution needs to run for several weeks, preferably months, or years. I'm glad, that *thus far*, we seem to avoided a recurrence of anything like #136 which cost me three days of testing and would have rendered routers unusable in the field inside of a day.

The month prior, I had trained three people to do packaging, they all evaporated to a large extent. I had expected those people to be available for testing, they were, barely. A new developer arrived, who did nothing. When I'd agreed to try and pull this off in under two weeks I did not anticipate resourcing problems this bad. Our bacon was saved by 3 volunteers from openwrt.

I now have no time left. On monday I intend to meet with netops and hopefully land the remainder of the DNS/server issues for networkdashboard.org. 

If I cannot, the [[bismark-testbed:testlab]] will be kind of hard to deal with, given the number of machines that need names and a coherent addressing scheme. I need to supply the passwords to someone, and I fully expect the system to become a mess rapidly without someone actively managing it.

The rest of the team needs to ""close their bugs"":http://www.bufferbloat.net/projects/bismark/issues?query_id=1, ""review the roadmap"":http://www.bufferbloat.net/projects/bismark/roadmap, and declare this a ""baked"" release or not.

That said, I have some feedback regarding the current structure and an outline of some future directions. 

h3. Database interface

The new backend database is almost completely untested. I do not know what else will break and have little confidence it can be made to work fully, even for development purposes, without my further involvement.

h3. Web interface

There is a huge impedance mismatch between the available web developer and the data collected thus far. Django is not up to the job,
and another toolkit and developer capable of working in it (or two) must be chosen. Dojo as a javascript toolkit is not bad, but all that handles is the actual presentation of the data, not interpretation. 

h3. Tunneling mechanism

A TCP based transport running these distances results in latencies often in the 10s of seconds. (as an example, I wrote the last three sentences while waiting for a character to come back from the tunnel) 

Using a udp based vpn such as strongswan or openvpn, would help enormously, and also improve security overall. There ARE edge cases where a vpn will not work, but I would hope, few of them.

h3. Test data & architecture

Most of the data appears to be overprocessed at the site(s). I've noted a few problems:

* timing the execution of something like ping is very different than actually getting ping time. 
* The same also applies to DNS. The original test was timing ""host"", which is a much larger binary than ""nslookup""
* I have not looked into the traceroute test, etc.
* XML is a terrible transport mechanism

h3. Test gear

Routers are not working too bad. I'm happy about that. We'll see how they survive a few weeks in the field. I expect problems.

h3. QoS

NOBODY has a good answer for QoS at the moment. It frustrates me too. It's an excellent avenue for research.

h1. Moving forward

At least in low bandwidth places such as South Africa, it seems possible to actually take packet dumps, rather than process the output
of tools like ping, etc, and ship them back to Georgia for more analysis, later.

h2. Using package captures rather than processed data

By using filtered things like:

@tcpdump -i eth1 -s1500 -wnoqos.cap host gw.lab.bufferbloat.net &@

Very small captures can be created, that in most cases can also be compressed, then shipped up to a central server where they can be processed more, both in a database and in conventional tools such as wireshark, xplot.org, etc.

Similar filters, measuring, for example, just DNS traffic, are also low overhead. 

Given that the up/dl bandwidth in the 3rd world is so low, using tcpdump, especially with a filter like the above, which does most of the processing near the hardware, does not appear to heisenbug the simpler tests. 

Bandwidth tests are feasible too (I'm using a USB stick on the lab to do so) At speeds approximately 2Mbit or so or above, dumping is not feasible.

For higher bandwidth sites or higher bandwidth tests, MIT has suggested using their measurement box, attached to a mirrored port. There is some support in the router's switch for this capability but I do not know if it works at present.

h2. Tools

There are a variety of good tools in this release, including httping, tcpdump, fping, bing.

There are a variety of good packages also available but not installed or tested, such as openvpn, and snmpd. 

There are innumerably other wonderful tools for managing routers. Nagios... RT... name it, it already exists.

h1. Network dashboard

The core idea is good - however there exist many off the shelf tools that you could just use, such as collectd, snmpd, big sister, etc, to achieve a goal of making a useful service for the edge, rather than re-inventing them.

h1. Other projects

As this project leveraged several of my own projects notably [[iscwrt:Wiki|iscwrt]] and [[uberwrt:Wiki|uberwrt]], I would hope that tools and techniques from those will feed back into this, and vice versa, in the classic open source manner.

Regrettably, I am out of time this summer to do much more than support the distribution and help get the database AS WRITTEN working, but it appears to be impossible to use django for it, and I'd like to rip out the hacks in place to support django whenever another toolkit is chosen.

If you acquire additional resources and can prioritize the movement of various bits located on bufferbloat.net to your own servers,
I will provide estimates as to what it will take to do so and provide in a SOW.

h2. Regrets

I should not have exceeded my SOW and attempted to fix #104 and #51, despite gaining permission to do so. I ended up spending over 4 days on it while slowly realizing that neither the mysql design nor the postgres port were going to work with django. I have problem in tossing the work, and not billing for it. I should have spent the time instead, working on the bugs in ""iscwrt"":http://www.bufferbloat.net/projects/iscwrt/issues that also affect you.
","",2011-05-22 07:58:24.327561,21
224,224,213,"h1. Installation Guide

!>flanders320fade.jpeg!
It is a good idea to print out these instructions before proceeding, especially if you're flashing the firmware in your sole router.  If your router has already been flashed with CeroWrt firmware, so you can proceed to Step 1 (""Configuring and Installing the Router"") below.

h2. Step 0. Flashing the router

Please see the [[CeroWrt flashing instructions]] for how to install the current CeroWrt build on your [[bismark:WNDR3700v2]] or WNDR3800 Router from your platform of choice (Windows, OS X, Linux).

h2. Step 1. Configuring and Installing the Router

# *Power on your router.*  The router should boot in under two minutes. It takes a lot longer the first time after flashing (sometimes six or seven minutes) as it has to fully check flash for errors. The router itself comes up on 172.30.42.1. The router serves IP addresses on 172.30.42.0/27 networks by default. (see [[Default_network_numbering#1723042X-range|why .42]]?)
# *Connect to your router.*  Plug in a laptop or computer to one of the 4 LAN ports on the router, and refresh your laptop/computer's DHCP IP address.  Alternatively, connect via wireless by setting your SSID to ""CEROwrt"" (no SSID password) or ""CEROwrt5"".  Your machine should get an IP address from the 172.30.42.0/27 subnet in the first case, other networks in the second and third.
# *Configure your router's default password.*  In your web browser, go to the router configuration screen at https://172.30.42.1:81 (see also [[FAQ#Why-port-81|why 81]]?). (You can ignore the warning generated by the self-signed certificate.) The default username is 'root', the password is 'Beatthebloat'.  Go to the System/Administration screen and enter in a new password for the router. *Write this password down somewhere.* The login will be ""root"", and the password that you set should be something difficult. Note you can also just go to gw.home.lan for most things, once DNS is up.
# *Secure your wireless interfaces*  Go to the _Network->Wireless_ configuration page, and change the SSIDs of the various interfaces to suit your liking. (See also [[FAQ]]) Enable WPA2 encryption on the LAN interfaces, and if you wish your guest interfaces to be secured, do the same there, too. Choose unique passwords for the LAN and guest interfaces.
# *Set your country.*   If you are not in the US, please set your country for both radios to the correct country in order to ensure regulatory compliance.
# *SAVE and APPLY.*  At the bottom part of the Web interface, _save_ and _apply_ the changes (these are two distinct steps).
# *Reboot the router.*  You will need to reboot the router for SSH and the Internet to come up. Reboot and connect the WAN interface to the Internet (i.e., to your DSL or Cable modem). Wait a few minutes, and refresh your laptop/computer's DHCP address. 

*Important Configuration Notes:* 

* The wireless interfaces default to the *United States regulatory wireless spectrum* by default. If you're outside the US, you should set your country immediately to stay within your local regulations.
* The wireless interfaces are also configured as *open* (no password) by default. Change the SSID and/or passwords from the web GUI, or see the [[Automated Configuration of CeroWrt]] page.
* If you are configuring an interior router rather than your primary router, the directions [[Setting up an interior gateway router]] will be helpful. CeroWrt comes with mesh networking capability using the Babel protocol.

h2. Step 2. Fine-tuning your SQM Settings 

By default, the CeroWrt Router is configured to work pretty well at virtually all WAN link speeds. You can do even better by [[Setting_up_SQM_for_CeroWrt_310|Setting up SQM]] in the router.

h2. Step 3. That's It! 

You should now be on the Internet using the latest and greatest code from the [[cerowrt:Wiki|CeroWrt]] Project, the [[bloat:Wiki|Bufferbloat]] project, and ""OpenWrt"":http://www.openwrt.org .

We hope that your experience will be exceptional. Please send us your feedback and comments by ""registering on the wiki"":http://www.bufferbloat.net/register and posting to the ""bloat-devel"":http://lists.bufferbloat.net/listinfo/bloat-devel mailing list. You can also file bugs and feature requests in our ""Bug Tracker"":http://www.bufferbloat.net/projects/cerowrt/issues

h2. Additional steps for configuring your CeroWrt router

If this is going to be a one-time installation of CeroWrt, using the Web GUI is not very difficult. However, if you're tracking the recent builds closely, you may have a list of settings that you wish to modify after updating the firmware. The [[Automated Configuration of CeroWrt]] page allows you to put your parameters into a file and perform them repeatably and all at once. The script lets you:

* Update the root password
* Set the time zone
* Enable SNMP for traffic monitoring and measurements
* Enable NetFlow export for traffic analysis
* Enable mDNS/ZeroConf on the ge00 (WAN) interface
* Change default IP addresses and subnets for interfaces
* Change default DNS names
* Change default wireless SSID names
* Change the wireless security credentials

Find the script on the [[Automated Configuration of CeroWrt]] page.

h2. A Note About Changing your Default IP Addresses

We really don't recommend you change the [[default network numbering]] unless you know what you are doing. Seriously. Don't mess with it. 

But: If you wish to use other default IP address ranges... we recommend against using 192.168.0.1 and 192.168.1.1 for historical reasons. (They're used by so many other vendors that you're likely to run into address conflicts.) 

Go to the _Network_ screen on the router and change to suit. By default, the secured interfaces come up on the 172.30.42.1/27, 172.30.42.65/27, 172.30.42.97/27 addresses, and the guest networks come up on 172.30.42.129/27 and 172.30.42.161/27 - the mesh network is disabled by default. You will also need to change the firewall rules, the /etc/xinetd.conf file and many files below /etc/chroot/named/etc/bind/

Instead of using the web GUI, it is FAR easier to change these by editing the relevant files directly on the router. As an alternative, since we have DNS, just use @gw.home.lan@ and don't worry about the IP addresses.... (have we scared you enough yet?) If you must change the addresses or DNS, the [[Automated Configuration of CeroWrt]] script simplifies the process.

_Important:_ If you change the default IP address, your router's web interface will change at this point to be whatever-you-chose:81 after doing a save and apply. You should probably reboot the router; you will also need to change the address in the url in your browser accordingly.

h2. CeroWrt Configuration Script

This is a script that lets you reconfigure your router in a repeatable manner. It has been moved to the [[Automated Configuration of CeroWrt]] page.","",2014-07-28 15:02:27.185327,21
222,222,3,"h1. READ THIS FIRST!

h2. How CeroWrt is different from OpenWrt

Our goal is to build a test tool for the internet edge rather than a home router. Although CeroWrt can be used as such, it is not our primary goal. We encourage you to install the software on a spare router before committing to using it day to day - and compare it against your existing router, first. Certainly we hope to be faster and more reliable that most stock firmware can be, one of our earlier releases stayed up for 266 days...

With the 3.3 builds, CeroWrt has incorporated the Linux 3.3 kernel which has many defenses against bufferbloat. Other major differences between OpenWrt and CeroWrt:

* all interfaces are routed, not bridged, 
* there is a full blown dns server, with mDNS/Bonjour enabled for ease of device/service discovery,
* the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] differ significantly from what you may be used to. 

The ""Onboard documentation"":http://jupiter.lab.bufferbloat.net/cerowrt/about.html has far more detail as to what's in the software.

h2. Core things you should know

h3. Default Password

The router has a default, rather than empty, password.

login: root
password: Beatthebloat

Do change it on installation, and even better, put your ssh key on it and disable password access entirely.

h3. IP addresses & DNS

CeroWrt is a test platform, and as such we wanted it to co-exist within existing networks as best as possible, without conflicting with an existing network, and to not require NAT in order to function inside that network. NAT skews some test results horribly.

Since there is no public IP address space left, 10 networks are being increasingly used as backbone networks, and 192.168.X is most likely a number you are already using on your existing network, we chose the 172.16.0.0/12 range to play in. The default address for the router is 172.30.42.1. Each of the interfaces has a /27 subnet from this range by default - this allows 30 addresses per interface, a sensible limit for home/edge routers. 

It is ironic that this is the last piece of 'free' IP address space left. See also [[bloat:BANA]].

If you find this IP hard to remember or type, dns is enabled by default for a virtual subdomain of 'home.lan. You should be able to get to it via gw.home.lan if you get dhcp from the router. Changing the default ip address ranges is difficult to do via the web interface and we suggest you stick with it for a while until you understand the reasoning, firewall, routing, and naming rules. (See DNS note below).

If you are running this inside your network, and not as your default gw, configure your default gw to statically assign an ip address, and route your subnet to the CeroWrt router, and turn off NAT.

See also the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] pages for more information.

h3. Device/Interface Naming

We use an unusual [[device naming scheme]] to manage multiple kinds of wireless devices. Instead of using eth0, eth1, wlan0, etc. the interfaces have names that more accurately reflect their actual use. Prefixes use Wireless vs. Ethernet and Secure, Guest/Gateway, or DMZ. As noted above, each of these interfaces has a /27 subnet assigned. Thus: 
* ge00 is the Gateway Ethernet; 
* se00 is the first Secure Ethernet (LAN) interface; 
* sw00 is the first Secure Wireless interface at 2.4GHz; 
* gw10 is a Guest Wireless interface at 5.x GHz;
* etc.

See also the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] pages for more information.

h3. QoS - Be sure to set it

QoS processing is turned *off* by default in CeroWrt. Your performance may be bad until you set the parameters as described in the first question of the [[FAQ]].

h3. IPv6 is enabled *BY DEFAULT*.

When connected to a real IPv6 address on a gateway, if CeroWrt doesn't 'just work', we want to know about it. 

h3. Security & DNS

The bind9 DNS installation is as hardened as possible, running in a chroot jail, respawning from xinetd. 

Multiple services are enabled 'in' by default, notably http, https, ssh, & rsync. DNS allows in the entire 2002 address range into the 'us' DNS view, this should be restricted to just your 2002/48 lan. 

From here, please move on to the [[installation guide]].","",2012-04-21 09:56:59.93769,5
259,259,3,"h1. Scientific Orgs

""Computing research association"":http://www.cra.org/events/

""Coalition for national science funding"":http://www.cnsfweb.org/

""Net Caucus"":http://www.netcaucus.org/conference/ - mid january every year

""top 200 Government CTOs"":http://googleinnovation-es1.eventbrite.com/?srnk=18 Meet the government transformers - June 12

""Non-profit 2.0"":http://nonprofit20conf-es1.eventbrite.com/?srnk=12 June 15","",2012-06-10 18:40:30.661054,5
100,100,49,"h1. Tools


* [[iperf]]
* [[netperf]]
* [[nttcp]]
* [[Sampling via curl]]
* [[http://tie.comics.unina.it/doku.php?id=start|Tie]]
* curl
* shaperprobe
","",2011-04-22 11:36:29.411858,1
48,48,84,"h1. Bufferbloat and VOIP

At the host, VOIP packets are usually emitted at a multiple of 10ms intervals. They are very small (usually less than 300 bytes), and very delay sensitive. If you delay more than 10ms, it makes sense to simply throw away the packet you have and send the next one, immediately.

There are those doing kernel development that think that 10-20ms jitter or 40ms latency is OK. It's not, for VOIP. 10-20ms jitter translates out (worst case) to throwing half of your packets away at the receiver, and interpolating the other half. It is far better to aim for below 10ms jitter, at which point voice quality is only dependent on packet loss.

Given that there is about a 4ms transmit window for wireless, I'd like to go for 4ms maximum delay and jitter across the entire transmit range of that technology. 

That's on the host, which we can control. After voip escapes the host, all sorts of delay and jitter can occur, but it usually evens out. The problem with accepting high delays is that above 250ms or so is that conversations flow badly; people step on each other.

The speed of light on fiber around the world is around half a second, so no matter what you do, you're in a losing situation. Artificially adding 40ms delay, randomly, is like adding the 3/4ths the width of the Continental USA to the conversation. 

Due to its continuous nature, every delay spike will add to the delay for the rest of the conversation. There are algorithms (eg WSOLA) that enable the receiver to drain a full buffer by ""talking faster"", but even if those algorithms were perfect, they would alter the meaning of a spoken phrase at some point. 

ITU T G.114 recommends a mouth-to-ear delay of under 150 ms. 

!m2e-delay.PNG!
(source ITU T G.114)

Admittedly the real point is different; there is no single right answer, and the right latency we have to strive for is of order 1 packet; but that will take AQM we don't have yet. We're always reluctant to argue against mitigation, when real solution still evades us.

However, plugging in the 4ms constraint into the network stack gives us numbers to work with and goals to aim for. 

","",2011-04-26 04:51:37.477724,8
128,128,3,"h1. Post Capetown Planning

As feedback comes in from the field, this is an attempt to capture the results in a requirements document.

h2. Objective

Build a scalable production release of the bismark router, bismark backends, and bismark management systems
sufficient to handle a load of 200 active routers, and additionally, 20 researchers. 

Begin to meet the goals set out for the Google SOW.

h2. Features

h3. Web interface

* ???

h3. Scripting

* ???

h3. DB Backend

* ???

h3. Router Software

* D-ITG
* [[VPN solutions under evaluation]]
* Improved web interface

h3. Router hardware

* Add support for Buffalo as a lower cost BOM

h2. Fixes

All bugs rated level 3 or higher fixed

h3. Web interface

#180 #181 #182 #178 #179

h3. Backend

h3. Routers

h2. Other
","",2011-05-27 16:42:49.502431,1
103,103,3,"h1. IPv6 enabled

Enabling basic 6to4 on this router is straightforward. Simply add to /etc/config/network

config interface v6
  option proto 6to4

And it will automagically figure out what interface is connected to the internet, establish a 6to4 tunnel, and advertise addresses to your internal network.



","",2011-04-27 09:12:53.986134,1
149,149,3,"h1. Architecture Notes

http://www.mips.com/media/files/MD00565-2B-MIPS32-QRC-01.01.pdf

[[OCEAN CITY FAQ]]

[[scratch]]

[[OCEAN CITY INSTALLATION GUIDE]]","",2011-06-24 13:31:46.879381,2
223,223,213,"h1. CeroWrt FAQ

h2. What about QoS/AQM?

Prior to the Modena build (February 2013), CeroWrt benefitted from setting QoS parameters. The defaults in Modena work pretty well, and using the procedure described on the [[Setting up AQM]] page works even better.

h2. Does Cerowrt ""phone home""?

A: No, it does not. Well, it does, sort of - There is an image on the onboard web pages that is maintained at bufferbloat.net. The cosmic background bufferbloat detector can (but doesn't always) connect to a ntp server in the bufferbloat pool.

CeroWrt does come with multiple tools, such as snmp, that make collecting statistics about its performance easier.

h2. Why so many Interfaces? [[#148]]

A: The characteristics of wired and wireless, as well as the [[uberwrt:guest]] and [[uberwrt:babel]] concepts, are sufficiently different to warrant making a clear distinction between them for [[uberwrt:internal QoS]] to work well. 

See the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] pages for more information.

h2. How is routing done in CeroWrt, since the interfaces are routed rather than bridged?

IPv4 is behind NAT by default and broken into 8 static /27 subnets to limit the horrendous impact of multicast/broadcast on wireless. Since a home router is the default gateway, no routing protocol is needed in that case. For other routers in the home, we mesh using babel.

IPv6 is autogenerated from 6to4 or 6in4, fed into radvd, and distributed from there. Help supporting 6rd and DHCPv6-PD is welcome (dibbler is available in RC6 for those who want to experiment).

Core routing protocol is babel for IPv6 and IPv4, radvd is on for older clients, and all of quagga (ospf, bgp etc) is also available.

h2. What about 6rd? (#273)

Please let us know in #273 if 6rd is MIA.

Comcast's 6rd trial was so lame as the only way to use it (as they only delegated a /64) was ahcp + babel, which hands out and routes /128s by default.

6to4 - being /48 - was easily subnettable and thus, usable with older routing mechanisms like radvd - so we went back to that, after a few weeks with 6rd and Comcast.  Comcast is not planning to go forward with 6rd but has deployed geographically dispersed production 6to4 relays which have worked well for us. Help testing 6rd on other ISP's would be a great help.

h2. Why so many SSIDs on the wireless interfaces?

A: 2.4 ghz spectrum tends to be polluted by many other wireless devices. If your client (laptop, whatever) supports 5Ghz operation, you really want to use that SSID (clearly delineated by a ""5"" postfix) to get higher performance operation. 

You can make all the SSIDs be the same if you like in the [[CeroWrt router configuration]] pages, but NANOG recommends training users ""to choose the one on 5"". 

h2. Why guest interfaces?

A: Wireless spectrum is intrinsically shared. It makes sense to share it when possible, and also keep your own network safe.

h2. Why port 81?

A: The router configuration screen is served on port 81. Actually we could have used nearly any other port besides 80 or 443. We wanted to move 'configuring the router' to its own interface and allow 'using the router' to include your own web pages and interfaces.

h2. Why 172.30.42.0/27 subnet?

A: Please refer to the [[Default_network_numbering|default network numbering]] page.

h2. What's this babel thing?

A: [[wisp6:Wiki|Wireless mesh networking]]. 

h2. How do I disable the guest/babel interfaces?

A: Firewalling is a complex problem. ""Guest"" networks are for visitors to your LAN, they do not have access to the wired or primary wireless LAN (unless unsecured), but do have access to the Internet. You can grant access to guest networks that does not extend to your primary network.

To secure (rather than disable entirely) your guest networks, the simplest method is merely to assign WPA2 keys to the guest networks that guests won't know. 

OR, you can remove the guest networks entirely. Removing the interfaces entirely (which is doable) also requires removing the firewall rules for the guest interfaces in order to work right, as well as a reboot, and recreating them will be difficult. 

h2. This is more complex than I'm used to!

A: This is a research project. We hope to make things simpler.

h2. This is cool! What else can this puppy do?

A: See: [[Cool things to do with a cerowrt router]]

h2. How to close default open firewall ports?

A: Several ports are open, but filtered, using various means. For example, rsync and ssh are enabled but the default settings in /etc/xinetd.conf prohibit access via any but your internal private IPs.

Telnet and ftp ports (not services) are enabled, but are there to trigger sensors to disable other services in the advent of an attack from inside or outside of your firewall.

You can close ports more fully to the outside world via the GUI, editing /etc/config/firewall and/or do finer grained access control via /etc/xinetd.conf and /etc/xinetd.d/

The web port (80) defaults to open, the web configuration port (81) does not. The intent here is to enable you to put up your own local web pages.
","",2013-03-27 18:02:09.476312,11
96,96,3,"h1. Ssh configured on port 222

Script kiddies hammer the standard ssh port (22) these days. To alleviate this, we have ssh on port 222, which will not stop directed attacks but eliminates the automated ones. 

Many things (shell access, git) depend on ssh being on a standard port, and while you can specify the port as part of the url or command line, there is an easier way that makes the port change transparent. Simply add to your ~/.ssh/config file:

@Host *.bufferbloat.net
    Port 222@

If you are not in a position to do that, ssh -p 222 the_site works, as does scp -P 222 the_site:whatever . 
(the -p vs -P issue is old cruft going back decades)

Similarly you can specify the port number as part of a git clone ssh://huchra.bufferbloat.net:222/home/whatever operation...

but it's easier to modify your .ssh/config as per the above!","",2011-04-19 05:52:02.580552,2
97,97,3,"h1. Openwrt Build Overlays

You can customize your build for your environment by overriding the default files by placing a 
files/ directory in your buildroot. 

Then you can override the default /etc/opkg.conf (for example) by placing your customized version under files/etc/ - this applies for ALL files in a build image, including binaries! 

Typically modified files include:

@etc/sysctl.conf
etc/defconfig/wndr3700v2/network
etc/rc.local
etc/opkg/whatever.conf # for alternate feeds@

","",2011-04-19 09:57:03.990103,2
62,62,3,"h1. Wiki

h2. Why Uberwrt?

Other name suggestions welcomed! The goal is to have a name that is wrt-like AND easily google-able.

From a ""death metal perspective"":http://en.wikipedia.org/wiki/Metal_umlaut ubërwrt looks better but what it sounds like or what it means....

At the moment the project is divided into 4 parts:

[[cerowrt:wiki|CeroWrt]] is the upcoming (July 30) release. (cero is Spanish for ""zero"". ""Zero Warts"") This is basically the base platform for debloat-testing, ipv6, bind9, and mesh networking, based on the wndr3700v2, kvm, and nanostation M5. Please go there for the most up to date information, and flashable images. A release candidate is available.

[[bismark:wiki|Bismark]] is the work we are doing with Georgia Tech to create a ""de-heisenbugged"" wireless router for their test project. That project is now fairly far along, and is where much of the ""bugs and features"":http://www.bufferbloat.net/projects/uberwrt/issues that should be documented on uberwrt, are at currently. They have very [[bismark:CAPETOWN|working builds]] already.

And there is also an obsolete [[ISCWRT:build|iSCWRT build]]- (dnsmasq replaced with ISC-bind9 and ISC-dhcp and DHCP6, lots of ipv6 stuff. Much of this is now folded into cerowort. Similarly, an obsolete [[wisp6:Wiki|wisp6]] build is out there...

This is not a very public project yet. In addition to naming and funding and political issues, it's technically slowed by #35 #36 #32 #29 #25 on the infrastructure ""roadmap"":http://www.bufferbloat.net/projects/sysadmin/versions/2"" as well as outstanding issues from the ""first buildout"":http://www.bufferbloat.net/projects/sysadmin/versions/1 - 

Right now we're in a burn-in and *prototyping* phase, do discuss your ideas on the bloat list!
There are some [[experimental patches]] under test, not checked in anywhere.

h2. Philosophy 

The goal is to produce something closer to a [[perfect wireless router]] - debloated, and [[IPv6 enabled]]. 

The goal is NOT to fork openwrt, but to be able to experiment with techniques and patches inside a branch that we hope to rapidly see emerge in openwrt itself and its related downstream projects.

We will be helping the openwrt project by adding our build server to their buildbot based server(s) as well as doing testing.

OBSOLETE URLS: The [[build configuration]]. Some useful [[openwrt tips]] Some [[ideas]] for useful tools

h2. Main target

We seem to be coalescing around the [[bismark:wndr3700v2|Netgear WNDR3700]] as [[good hardware]] for a primary target. The open source support for it is extensive, it has 16MB of flash and 64MB of ram and support for a USB flash stick, they are inexpensive ($ 139.00), AND at least 7 people on the bloat list have one already, with 80+ in the pipeline over at GATECH.

Related to that, we hope to distribute ath9k based mini-pci cards to developers so that we can continue to improve the wifi portion of a well understood device and propagate that out to other devices.

h2. Other targets

* Noxbox

* Nanostation M5 (normal and [[wisp6]] enabled)

* Guru/dreamplug (freedombox?)

* Other hardware platform suggestions are welcomed. We've discarded some options already as [[useless hardware]] in our [[hardware evaluation]].

[[dtaht]]","",2011-07-09 10:02:06.956991,37
110,110,3,"h1. Bismark ""Capetown"" Installation Guide

Capetown releases can be had (Currently) at http://huchra.bufferbloat.net/~bismark/capetown 

[[Capetown QA]] [[Capetown Issues]] [[Capetown Testing]] [[South Africa Locations]]

* Please remember that to configure the router, you will need to go to the address:81, at least at present. 

h2. [[WNDR3700v2]]

New (factory firmware) routers can be installed via the standard Netgear firmware upload web interface.

A full sysupgrade -n or tftp factory reflash is still required for new builds. Sorry. 

You can also flash the router via tftp - see the bismark installation instructions for details

http://www.bufferbloat.net/projects/bismark/wiki/Flashing_instruction_for_Mac

The router will come up on 192.168.42.1

h2. Buffalo

The router will come up on 192.168.62.1

h2. [[Nanostation M5]]

The router will come up on 192.168.52.1

h2. [[X86 KVM]]

h2. General Notes

* There is a great deal of polish needed but most of the core functionality and packages are in there now. I'm aware of a half dozen small bugs already, what I'm concerned about are big (crash) bugs. Please file the bugs in the Issues database!

* Anything other than the wndr3700v2 is mostly untested and is probably at least somewhat misconfigured. 

* If anyone already has the kvm virtual machine code installed and working on their main hardware, please see if you can get the kvm instance running and let us know how on the wiki.

* opkg.conf still points to the wrong place. Please see also the ""bug database"":http://www.bufferbloat.net/projects/bismark/issues","",2011-05-11 12:43:48.696022,3
82,82,3,"h1. Setting up an OpenWRT Toolchain (on huchra)

[[Repository structure]]

These instructions are for setting up a toolchain assuming you have an account on huchra.bufferbloat.net.
If you wish to do development on your laptop or another machine, here are instructions for [[setting up a wndr3700 toolchain at home]].

Go to wherever you want the toolchain (on huchra) and run the following commands:
<pre>
mkdir src
cd src/
git clone /home/bismark/src/wndr3700 wndr3700
cd wndr3700/
ln -s /home/bismark/dl/ .
cp /home/bismark/src/wndr3700/feeds.conf ./
less feeds.conf

/home/bismark/bin/install_std_packages

(this script basically installs the following, and may be more up to date)
# ./scripts/feeds install bash webif webif-theme-xwrt radvd polipo samba3 curl bing
# ./scripts/feeds install babeld qos-scripts fping tcpdump  tcptraceroute netperf
# ./scripts/feeds install ntpd-ssl ntpdate l7-protocols ddns-scripts iperf gnupg ipv6calc

cp /home/bismark/src/wndr3700/.config ./ # this makes sure your packages will be built
make menuconfig
echo make -j8 | batch
# wait for email to your account there, Or setup a .forward file to send elsewhere
</pre>

","",2011-05-28 06:39:07.245774,17
130,130,3,"h1. Callisto

Callisto.noise.gatech.edu will be configured as a name server, backup server, and certificate authority","",2011-05-27 17:53:13.770572,1
165,165,213,"h1. CeroWrt 'Ocean City' INSTALLATION GUIDE

!>flanders320fade.jpg!

h3. THIS DOCUMENT IS OBSOLETE

OCEAN CITY was a milestone release for late 2011. For more information about its goals, see the [[OCEAN CITY]] page.

It would be a good idea to print out these instructions before proceeding.  If your router has already been flashed with Cerowrt firmware, so you can proceed to Step 1 (""Configuring and Installing the Router"") below.

h2. Step 0. Flashing the router

Please see the [[Cerowrt flashing instructions]] for how to install the current CeroWrt build on your [[bismark:Wndr3700v2]] Router from your platform of choice (windows, osx, linux).

h2. Step 1. Configuring and Installing the Router

# *Power on your router.*  The router should boot in under two minutes. It takes a lot longer the first time as it has to fully check flash for errors. The router itself comes up on 172.30.42.1. (*NOTE* RC6 and prior releases come up on .33!) The router serves IP addresses on 172.30.42.0/27 networks by default. (see [[bismark:why .42]]?)
# *Connect to your router.*  Plug in a laptop or computer to one of the 4 LAN ports on the router, and refresh your laptop/computer's DHCP IP address.  Alternatively, connect via wireless by setting your SSID to ""CEROwrt"" (no SSID password) or ""CEROwrt5"".  Your machine should get an IP address from the 172.30.42.0/27 subnet in the first case, other networks in the second and third.
# *Configure your router's default password.*  In your web browser, go to the router configuration screen at http://172.30.42.1:81 (see also [[bismark:why 81]]?). The default password is 'Beatthebloat'.  Go to the System/Administration screen and enter in a new password for the router. *Write this password down somewhere.* The login will be ""root"", and the password that you set should be something difficult. Note you can also just go to gw.home.lan for most things, once DNS is up.
# *Secure your wireless interfaces*  Go to the _Network->Wireless_ configuration page, and change the SSIDs of the various interfaces to suit your liking. (See also [[OCEAN_CITY_FAQ|FAQ]]) Enable WPA2 encryption on the LAN interfaces, and if you wish your guest interfaces to be secured, do the same there, too. Choose unique passwords for the lan and guest interfaces.
# *Set your country.*   If you are not in the US, please set your country for both radios to the correct country in order to ensure regulatory compliance.
# *SAVE and APPLY.*  At the bottom part of the Web interface, _save_ and _apply_ the changes (these are two distinct steps).
# *Reboot the router.*  You will need to reboot the router for SSH and the Internet to come up. Reboot and connect the WAN interface to the Internet (i.e., to your DSL or Cable modem). Wait a few minutes, and refresh your laptop/computer's DHCP address. 

Hopefully at this point you are on the Internet.

Important Configuration Notes: 
* The wireless interfaces are configured as *open* (no password) by default.  They are also set to the *United States regulatory wireless spectrum* by default. You should address these issues before connecting the router to the Internet.
* [[QoS]] is turned *OFF* by default.(see [[OCEAN_CITY_FAQ|FAQ]]). You should address this issue after connecting to the internet.

h2. Step 2. Fine-tuning your QoS Settings

By default, the Ocean City release CeroWrt Router is configured for slow Internet connections. See the [[OCEAN CITY FAQ|FAQ]] for how to set it appropriately for your network connection. This is a very important step!

h2. Changing your default IP addresses

We really don't recommend you change the [[default network numbering]] unless you know what you are doing. Seriously. Don't mess with it. 

But: If you wish to use other default IP addresses... we recommend against using 192.168.0.1 and 192.168.1.1 for historical reasons. It would be cool if you would co-ordinate with us on a [[172.16.0.0/12 allocation|Bloat-net]] to make vpns easier to play with...

Go to the _Network_ screen on the router and change to suit. By default the secured interfaces come up on the 172.30.42.32/27 (33), 172.30.42.64/27 (65), 172.30.42.96/27 (97). addresses, and the guest networks come up on 172.30.42.129 and 160 - the mesh network is disabled by default.You will also need to change the firewall rules, the /etc/xinetd.conf file and many files below /etc/chroot/named/etc/bind/

It is FAR easier to change these via editing the relevant files directly on the router, or [[Changing_your_cerowrt_ip_addresses|with a sed script]], or, as we have DNS, just use that and don't worry about the numbers.... (have we scared you enough yet? There will be a better web interface for renumbering at some point. If you must change the addresses or dns, here is a [[Changing_your_cerowrt_ip_addresses|link to how to comprehensively change your ips on the command line]].

_Important:_ If you change the default IP address, your Web interface will change at this point to be whatever-you-chose:81 after doing a save and apply, and you will need to change the url in your browser accordingly.

h2. Thanks!

You should now be on the Internet using the latest and greatest code from the [[cerowrt:Wiki|Cerowrt]] Project, the [[bloat:Wiki|Bufferbloat uberwrt]] project, and ""OpenWrt"":http://www.openwrt.org .

We hope that your experience will be exceptional. Please send us your feedback and comments by ""registering on the wiki"":http://www.bufferbloat.net/register and posting to the ""bloat-devel"":http://lists.bufferbloat.net/listinfo/bloat-devel mailing list. You can also file bugs and feature requests in our ""Bug Tracker"":http://www.bufferbloat.net/projects/cerowrt/issues

See also the [[OCEAN CITY FAQ|FAQ]], the [[OCEAN CITY RELEASE NOTES]] and [[Cool things to do with your Cerowrt router]].

_NB:_ The rc6 build also supported a connection to http://gw.home.lan - the bql-smoketests builds do not have a working bind module, so this has been disabled in the newer versions.
","",2012-06-20 05:49:32.693855,18
186,186,124,"h1. Parallel device flashing from factory firmware

h3. Brainstorming:

* Use 48 port Pronto switch with unique VLANs for each interface
* Connect linux box (VM) to the Pronto trunk/uplink port
* Create virtual interfaces for each VLAN and statically number each interface from a separate /24 out of 172.16 or something
* Statically configure IP routing table for each separate /24 as given above??
* Use iptables MANGLE to rewrite source and destination addresses to be compatible with Netgear??
* Run 48 processes (one per interface/IP address) that ping the device to check if it is up and then perform the upgrade/configuration/test

h3. Upgrade/configuration/test

* the firmware upgrade/flash (using a scripted HTTP agent that logs into the Netgear admin interface and upgrades the device)
* device-specific configuration (SSH keys, unique password, identifiers, etc.)
* post-flash testing","",2011-07-15 14:41:05.160668,5
137,137,49,"h1. Flashing Instructions for Linux

# Get the image file - *pay attention to the version number*. (It's on the back of the router, after WNDR3700. If no v#, then v1)
# Image file for North-America is *-NA* - see http://www.networkdashboard.org/downloads/capetown/capetown-wndr3700v2/ for the files (remember that you need a different image for the two different models. If you are doing a sysupgrade you will need the sysupgrade version, if you want to wipe out everything, use the ""factory"" version) (and if you are overseas, don't use the NA version) 
# Configure an ethernet port on your machine to 192.168.1.2.
# Connect port 1 on the router to the ethernet port (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
# Hold down the ""factory reset"" button on the bottom of the router.
# Turn on the router. Light 1 will light up green; the connection light will light up yellow, flash yellow, turn green, then flash green. This takes over a minute.
# Release reset button
# Open terminal on your Linux box and type the following commands to flash the router
** atftp 192.168.1.1
** put <image-file>
A successful tftp will simply return no message, a failed one will eventually time out and tell you so.  *Waiting at least 5 minutes is KEY*; The router needs to rewrite a lot of flash which is very slow... If impatient, go for a walk, have some coffee... or do another router (after the tftp succeeds you can disconnect your laptop's network cable with no issues, so this will speed your life up if you are doing multiple routers) Depending on background radiation, the router may or may not reset - you will see the light go solid green in this case...
# Configure an Ethernet port on your machine to 192.168.42.2
# Point your Web browser at http://192.168.42.1:81 .  It will ask you to create a new password.  If that doesn't work, power cycle the router and try again.  If that doesn't work, proceed to step 2.  The router will ask you to create a new password.  After you set the password, telnet is disabled. You can ssh in as root with password or continue using the web interface
# Connect the WAN port on the router to your ISP uplink and reboot the router.
# See [[Further Configuration for wndr3700]] for the next steps","",2011-07-18 15:06:42.605635,4
194,194,3,"h1. Jupiter

Jupiter is a Cerowrt router configured to act as a gateway to the [[testlab]].

It has a real internet connection, has ipv6 support, provides a subnet to 3 other routers, and has a USB stick mounted that serves  as a local cache of the release images and package database. The USB stick can also be used to store long-running measurements of traffic.

QoS is disabled at present. It is also the default gw of the [[client routers]]

Yes, it has a visible to the world webserver, which will one day be used to document how to use the testlab.

http://jupiter.lab.bufferbloat.net.","",2011-08-11 15:25:26.217241,1
140,140,3,"h1. Using the testlab

h2. Cluster control

h2. Experiment - thrash the network hard

Here's a simple way to get all the routers sending lots of data at the same time.

On [[metis]], run

@iperf -s@

On [[metis]], run

@pdsh -lroot -grouters 'iperf -t 60 -c metis.noise.gatech.edu'@

Boom, all the routers will start running iperf simultaneously. You can, after [[setting your routing]], 
set up various tests of [[QoS]], or [[different TCP/ip stacks]], or [[changing your window size]], 
slam the whole system while doing other things, and capture the results with tshark or wireshark.

For example this will test a larger cwin:

@pdsh -lroot -grouters 'iperf -w 1M -t 60 -c metis.noise.gatech.edu'@

which was the subject of [[Experiment - QoS]], which has many more examples

","",2011-05-28 11:50:40.700059,5
297,297,3,"h1. Previous Dedications of CeroWrt

h2. Present release

The present release of CeroWrt is dedicated to the memory of Dion L. Johnson III, the ""Czar of Free Stuff"", who introduced me to the concept of a ""Skunkworks"" with ""Skunkware"":http://en.wikipedia.org/wiki/SCO_Skunkware and ended up helping me get my first job in the Unix industry. The ""skunkware team"":ftp://ftp2.sco.com/skunkware/tmp/credits.html kept the company relevant, and nobody cared, except for ""Ezekiel Kludge"":http://www.youtube.com/watch?v=QECNF-GxbDQ . I am grateful for everything Dion taught me, that I've passed down, in building the bufferbloat effort and the CeroWrt team. 

I only wish we had a hot tub still, to hang out in.

h2. CeroWrt 3.7.5 and prior were dedicated to the memories of:

""John H Dubois"":http://www.spcecdt.com , who spread email and netnews through Santa Cruz, Ca, and ""The Armory"":http://www.armory.com geekhouse , spent many lonely years building an entire OS all by himself, and to his ""Liquid nitrogen ice cream"":http://www.armory.com/~spcecdt/cooking/recipes/chocolateIceCream.html that he brought to Burning man every year.

""Richard Pitt"":http://digital-rag.com , who helped bring the Internet to western Canada , wrote the ""Digital Rag"":http://digital-rag.com/article.php/Buffer-Bloat-Packet-Lossand and put ""webcams in eagles nests"":http://www.hancockwildlife.org/article.php/RichardPittFund .

And:

""Ronald Täht"":http://ronsravings.blogspot.com , who taught me more than he ever understood.


-- Dave Täht","",2014-01-12 18:20:43.254939,12
50,50,49,"h1. Wiki

The BISMark project is deploying programmable gateways in home networks to perform a combination of passive and active network measurements.  We are currently working on an extension of the study highlighted at the recent AIMS workshop at CAIDA.  ""Slides"":http://www.caida.org/workshops/isma/1102/slides/aims1102_ssundaresan.pdf  The work is also highlighted in this ""more recent talk"":http://projectbismark.net/static/talks/bismark-google2011.ppt at Google in May 2011.

*Hardware* The primary hardware target is the ""NetGear WNDR3700v2"":http://www.amazon.com/Netgear-Wireless-Gigabit-Router-WNDR3700/dp/B002HWRJY4.  We are planning possible support for several other gateways, such as the [[atom]], across more [[bismark testers]] and cable modem types.

*Release schedule* The first release, codenamed [[capetown]], was released to a small South African deployment in late May and early June, 2011.  The firmware from that deployment is available at ""the BISMark project Web site"":http://projectbismark.net/.  The next release, codenamed [[Atlanta]], is due for release in mid-August 2011.

*More information* For more information, including about the state of the firmware, shipping plans and release dates, please send email to bismark-core@projectbismark.net.

h2. Getting Started

# Acquire a [[wndr3700v2]] (""link to the NetGear purchase site"":http://netgear.com/home/products/wirelessrouters/high-performance/WNDR3700.aspx) 
# Flash the device with the BISMark OpenWRT build.  The current images are available ""here"":http://mirrors.projectbismark.net/downloads/beta/ .
** Flashing from an existing firmware installation
** Flashing from scratch (generally, this is fail-safe, particularly if you have ""bricked"" your router)
*** [[Flashing_instruction_for_Mac|Mac]] 
*** [[Flashing_instruction_for_Linux|Linux]]
*** ""Generic Instructions from the OpenWRT site"":http://wiki.openwrt.org/toh/netgear/wndr3700#oem.easy.installation 
# [[Further_Configuration_for_wndr3700|Configure your NetGear Router (enable and configure WiFi, etc.)]]

h2. How to Get Involved


h3. Contributing to BISMark

*Development*
* Register on github to help develop the BISMark software: http://github.com/bismark-devel
* ""Review the open issues,submit bug reports, fix bugs"":http://www.bufferbloat.net/projects/bismark/issues with the current BISMark build. (Useful, since the image is being frequently updated.)

*Hosting Measurement Servers*
* [[Setting up a Measurement Server|Set up or host a BISMark measurement server]]

h3. OpenWRT/BISMark Development

* Setting up an OpenWRT Toolchain
** [[Setting up a wndr3700 Toolchain at home|On your own server]]
** [[Setting up an OpenWRT Toolchain|On huchra.bufferbloat.net]]
** Learn more about ""building openwrt"":http://wiki.openwrt.org/doc/howto/build
* Here's a [[huchra openwrt build procedure|simple procedure that works for those building on huchra.bufferbloat.net]]

h2. Mailing Lists and IRC

Mailing lists 
* ""Users"":http://lists.projectbismark.net/listinfo/bismark-users/
* ""Devel"":https://lists.bufferbloat.net/listinfo/bismark-devel/
* ""Commit"":https://lists.bufferbloat.net/listinfo/bismark-commits/

IRC Chat Channel: ""#bismark"":irc://chat.freenode.net/#bismark

h2. Development Paths

* Evaluating [[tools]] for inclusion in the BISMark test suite.
* Developing a Web front-end for BISMark
* There are two codenamed builds:
** [[Capetown]] is now up and released. Please help test.  ([[Post Capetown Planning]])
** [[Atlanta]] is in development, and is due for release in mid-August.


h2. Other Resources

* In July 2011, Georgia Tech hosted a [[summer-camp-2011|Bismark Summer Camp]].  The notes provide some hints as to the next steps for the project, as well as some rough notes on setting up your own builds.


h2. Deployment

* [[Parallel device flashing from factory firmware]]
* [[Deployment stickers]]","",2011-07-18 18:22:34.188326,90
163,163,213,"h1. OCEAN CITY FAQ

h3. THIS DOCUMENT IS OBSOLETE

See the [[OCEAN CITY]] page.

h2. How can I improve latency problems with a Cerowrt router?

A: The router is configured with [[QoS]] (Quality of service) *OFF*, and the defaults more suitable for US cable than elsewhere. You should go to the Network->Qos screen on the [[cerowrt router configuration]] page, turn off [[QoS]], run a suitable ""bandwidth performance test"":http://speedtest.net and then re-enable QoS with more suitable up/download values a few percentage points less than what the bandwidth test shows you. This is ""bandwidth"" shaping the connection, to attempt to limit the filling of queues in the broadband equipment.  Unfortunately, it also means defeating features such as Comcast's PowerBoost, and it cannot take into account other dynamic changes in availability of bandwidth caused by your neighbors or even the temperature.

We note that SPEEDTEST reports misleading results on broad band service which provides temporary bandwidth boosts such as Comcast's Poerboost, and we are working on a better test. 

Enabling QoS (with sane values) will make it more possible for you and your family to do more work simultaneously - doing uploads while your son is downloading and your daughter is making phone calls and your spouse is playing games, with fewer complaints from everyone.

Disabling QoS will make single stream downloads run nearly as fast as possible at the expense of other activities. Sometimes. See: [[bloat:Daddy why is my Internet Slow Today]]?

QoS set to good values is best. Getting good values is hard. We're working on it.

h2. QoS doesn't seem to do any good! I can't do a big upload/download and make a phone call!

Decrease your up and download speeds somewhat until you can do both, in 256kb increments (or by a binary search between 60% and 100% of your provisioned bandwidth).

h2. Does Cerowrt ""phone home""?

A: No, it does not. Well, it does, sort of - There is an image on the onboard web pages that is maintained at bufferbloat.net. The cosmic background bufferbloat detector can (but doesn't always) connect to a ntp server in the bufferbloat pool.

Cerowrt does come with multiple tools, such as snmp, that make collecting statistics about it's performance easier.

h2. Why so many Interfaces? [[#148]]

A: The characteristics of wired and wireless, as well as the [[uberwrt:guest]] and [[uberwrt:babel]] concepts, are sufficiently different to warrant making a clear distinction between them for [[uberwrt:internal QoS]] to work well. 

See also [[device naming scheme]] for more details.

h2. How is routing done in CeroWrt, since the interfaces are routed rather than bridged?

IPv4 is behind NAT by default and broken into 8 static /27 subnets to limit the horrendous impact of multicast/broadcast on wireless. Since a home router is the default gateway, no routing protocol is needed in that case. For other routers in the home, we mesh using babel.

IPv6 is autogenerated from 6to4 or 6in4, fed into radvd, and distributed from there. Help supporting 6rd and DHCPv6-PD is welcome (dibbler is available in RC6 for those who want to experiment).

Core routing protocol is babel for IPv6 and IPv4, radvd is on for older clients, and all of quagga (ospf, bgp etc) is also available.

h2. What about 6rd? (#273)

At one point we had 6rd in CeroWrt, but may not have included the patches in the latest releases. We'll put it into RC7 if it is MIA.  Please let us know in #273 if 6rd is MIA.

Comcast's 6rd trial was so lame as the only way to use it (as they only delegated a /64) was ahcp + babel, which hands out and routes /128s by default.

6to4 - being /48 - was easily subnettable and thus, usable with older routing mechanisms like radvd - so we went back to that, after a few weeks with 6rd and Comcast.  Comcast is not planning to go forward with 6rd but has deployed geographically dispersed production 6to4 relays which have worked well for us. Help testing 6rd on other ISP's would be a great help.

h2. Why so many SSIDs on the wireless interfaces?

A: 2.4 ghz spectrum tends to be polluted by many other wireless devices. If your client (laptop, whatever) supports 5Ghz operation, you really want to use that SSID (clearly delineated by a ""5"" postfix) to get higher performance operation. 

You can make all the SSIDs be the same if you like in the [[Cerowrt router configuration]] pages, but nanog recomends training users ""to choose the one on 5"". 

h2. Why guest interfaces?

A: Wireless spectrum is intrinsically shared. It makes sense to share it when possible, and also keep your own network safe.

h2. What's this babel thing?

A: [[wisp6:Wiki|Wireless mesh networking]]. 

h2. How do I disable the guest/babel interfaces?

A: Firewalling is a complex problem. ""Guest"" networks are for visitors to your lan, they do not have access to the wired or primary wireless lan (unless unsecured), but do have access to the Internet. You can grant access to guest networks that does not extend to your primary network.

To secure (rather than disable entirely) your guest networks, the simplest method is merely to assign WPA2 keys to the guest networks that guests won't know. 

OR, you can remove the guest networks entirely. Removing the interfaces entirely (which is doable) also requires removing the firewall rules for the guest interfaces in order to work right, as well as a reboot, and recreating them will be difficult. 

h2. This is more complex than I'm used to!

A: This is a research project. We hope to make things simpler.

h2. This is cool! What else can this puppy do?

A: See: [[Cool things to do with a cerowrt router]]
","",2012-01-28 17:59:31.905799,12
267,267,3,"h1. Build cluster machine donations wanted

Got any spare multicore xeon or better boxes with tons of ram and disk?

When the build for openwrt breaks, everyone suffers. Development for openwrt and subsidiary projects such as cerowrt, dd-wrt, gargoyle, buffalo, etc - comes to a screeching halt. Worse when builds break it tends to be a period of high volume of commits. Breakage can sometimes take days to resolve, as individual builds can take as long as 20 hours to build serially on non-optimized hardware (the record on top of the line stuff is about 10 hours). During the breakage, dozens of developers twiddle their thumbs and have to improvise around the problems in order to get their individual tasks done.

So although the openwrt organization maintains ""a buildbot cluster"":http://buildbot.openwrt.org/tgrid, it is sorely under-sized, and always in need of expansion and love. 

""ISC"":http://www.isc.org has set aside a portion of rack space for us, but we lack machines to fill it. ISC has also loaned 3 machines to the effort and  Dave Taht (after being crippled one too many times by build breakage) donated his top end 12 core desktop to the effort, too. Even with these donations in play, much better results could be obtained by 10 or more high end machines in the cluster, reducing cycle time from 3 or more days to under a day. Presently there are about 4 other machines loaned by individuals from their homes, in the cluster, too.

* Hardware Requirements

Doing software builds is a very compute and disk intensive task. The ROI on doing compute on an EC2 instance is much worse than doing it on a string of dedicated nearly-top-of-the-line boxes. 

If you have a decent machine you can loan, even part time to the effort, please contact travis kemen (thepeople on irc, and thepeople _AT_ openwrt.org). However a celeron won't cut it!

An ideal box has at least 4 cores, 16GB of ram, and 2TB of disk. An SSD is highly desirable, and with more ram, the bulk of a build can be done in memory. Also, as the end result is over a gb of files that need to be uploaded, reasonable upload bandwith is useful.

If we did sane cost accounting for electricity and rack space, a single 64GB box with 12 cores is far more cost effective than 3 boxes with 16GB ram and 4 cores each, but we don't, and it's the up-front capital expense here, not the ongoing expense, that is making this part hard. (we've been trying to find a suitable donor for hardware for over a year)

(We're not allergic to donated compute time on a cluster instance, either, it's just not cost-effective from our perspective to actually buy any ourselves.)","",2012-08-13 09:15:48.236466,4
113,113,3,"h1. Capetown FAQ

h2. Why is my to-the-internet connection slow with a Bismark router?

A: The router is configured with [[QoS]] (Quality of service) *ON*, and set to a default more suitable for South Africa than elsewhere. You should go to the Network->Qos screen on the [[capetown router configuration]] page, turn off [[QoS]], run a suitable ""bandwidth performance test"":http://speedtest.net and then re-enable QoS with more suitable up/download values a few percentage points less than what the bandwidth test shows you. 

Enabling QoS (with sane values) will make it more possible for you and your family to do more work simultaneously - doing uploads while your son is downloading and your daughter is making phone calls and your spouse is playing games, with fewer complaints from everyone.

Disabling QoS will make single stream downloads run nearly as fast as possible at the expense of other activities. Sometimes. See: [[bloat:Daddy why is my Internet Slow Today]]?

QoS set to good values is best.

h2. Does capetown ""phone home""?

A: Yes, it does. If you do not wish to participate in the bismark study, DO remove the bismark packages from your installation, or install [[uberwrt:Wiki|cerowrt]] instead. If, instead, you wish to help the bismark project identify more problems on the edge of the internet, please register your router and information at the ""Network Dashboard"":http://networkdashboard.org

h2. Why so many Interfaces? [[#148]]

A: The characteristics of wired and wireless, as well as the [[uberwrt:guest]] and [[uberwrt:babel]] concepts, are sufficiently different to warrant making a clear distinction between them for [[uberwrt:internal QoS]] to work well. 

h2. Why so many SSIDs on the wireless interfaces?

A: 2.4 ghz spectrum tends to be polluted by many other wireless devices. If your client (laptop, whatever) supports 5Ghz operation, you might want to use that SSID (clearly delineated by a ""5"" postfix) to get higher performance operation.

You can make all the SSIDs be the same if you like in the [[capetown router configuration]] pages, but it helps to know which one is on ""5"". 

h2. Why guest interfaces?

A: Wireless spectrum is intrinsically shared. It makes sense to share it when possible, and also keep your own network safe.

h2. What's this babel thing?

A: [[wisp6:Wiki|Wireless mesh networking]]. It doesn't work (yet) in this release.

h2. How do I disable the guest/babel interfaces? [[#148]]

A: Firewalling is a complex problem not adequately handled by the web interface. ""Guest"" networks are for visitors to your lan, they do not have access to the wired or primary wireless lan (unless unsecured), but do have access to the Internet. You can grant access to guest networks that does not extend to your primary network.

To secure (rather than disable entirely) your guest networks, the simplest method is merely to assign WPA2 keys to the guest networks that guests won't know. 

OR, you can remove the guest networks entirely. Removing the interfaces entirely (which is doable) also requires removing the firewall rules for the guest interfaces in order to work right, as well as a reboot, and recreating them will be difficult.

Some things are easier to do by ssh-ing into the router. This is one of them.

h2. This is more complex than I'm used to!

A: This is a research project. We hope to make things simpler through use of a universal ""Network Dashboard"":http://networkdashboard.org

h2. This is cool! What else can this puppy do?

A: See: [[Cool things to do with a bismark router]]
","",2011-05-18 12:02:13.940251,15
132,132,3,"h1. Metis

metis.noise.gatech.edu is a measurement/monitoring console. Configured with a dual core, and raid1 drives,
it can do just about anything.

","",2011-05-27 17:55:13.190965,1
131,131,3,"h1. Jupiter

Jupiter is an early stage bismark capetown release router configured to act as a gateway to the [[testlab]].

It has a real internet connection, has ipv6 support, provides a subnet to 3 other routers, and has a USB stick mounted that serves 
as a local cache of the capetown images and package database. The USB stick can also be used to store long-running measurements of
traffic.

It's QoS is set to south african standards and bandwidth, at present. It is also the default gw of the [[client routers]]

Yes, it has a visible to the world webserver, which will one day be used to document how to use the testlab. Or that function may move to dp4 or metis, and it kept to more test-y roles

http://jupiter.noise.gatech.edu.","",2011-05-27 18:02:08.188831,3
143,143,3,"h1. Aitne

Aitne is presently unconfigured as a bridge, doing pure routing and QoS between [[metis]] and the [[testlab]].

The openwrt bridge code was assigning a mac address to the first wireless
interface that was the same as the ethernet interface, thus messing up normal routing.

This problem prevents the device from working properly in unbridged mode.

So a semi-random MAC has been assigned. The wireless has been entirely disabled...

It is possible there IS no official mac assigned to the ethernet interface

Even with a semi-random mac, 

unreachable 192.168.24.0/24  proto babel  metric -1 onlink 
default via 130.207.97.1 dev eth1 
dtaht@metis:~$ 
dtaht@metis:~$ ping 192.168.130.1
connect: Network is unreachable

dtaht@metis:~$ ip route
192.168.130.0/24 dev eth0  proto kernel  scope link  src 192.168.130.2 
130.207.97.0/24 dev eth1  proto kernel  scope link  src 130.207.97.23 
default via 130.207.97.1 dev eth1 
dtaht@metis:~$ arp -a
-bash: arp: command not found
dtaht@metis:~$ /sbin/!!
/sbin/arp -a
-bash: /sbin/arp: No such file or directory
dtaht@metis:~$ /usr/sbin/arp -a
^C


eth0      Link encap:Ethernet  HWaddr C4:3D:C7:B0:AE:36  
          inet addr:192.168.130.1  Bcast:192.168.130.255  Mask:255.255.255.0
          inet6 addr: fe80::c63d:c7ff:feb0:ae36/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
          RX packets:62 errors:0 dropped:53 overruns:0 frame:0
          TX packets:6 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:16 
          RX bytes:6110 (5.9 KiB)  TX bytes:1521 (1.4 KiB)
          Interrupt:4 



","",2011-05-28 23:07:53.682712,2
210,210,3,"h1. Configuring network manager

Images

!>http://huchra.bufferbloat.net/~cerowrt/images/networkmanager1.png!

!>http://huchra.bufferbloat.net/~cerowrt/images/networkmanager2.png!

images","",2011-09-15 16:13:17.995266,2
318,318,3,"h1. Bobbie

This is a placeholder. Dave Täht writes this brief intro to Bobbie in http://www.bufferbloat.net/projects/cerowrt/wiki/Wondershaper_Must_Die

<pre>
 ## I have come to understand that we can, actually make better policers now, 
 ## and that inbound shaping is not the answer to all things. I call the core idea ""bobbie"" 
 ## as that's what the unarmed police in England are called, and as it uses ideas from fq_codel that
 ## will make the actual rate ""bob"" up and down, in a kinder, gentler fashion, hopefully
 ## lighter weight than shaping, and support ECN - so it doesn't need to shoot packets, just tap them.
 ## That said, I despair of even writing it, given that where it needs to deploy is in places
 ## that linux does not currently touch.
</pre>

To try and explain the (as yet unimplemented) idea better: Codel uses control theory principles - measure, do something, wait, measure, do something else against the observed delay in the flow(s).

Bobbie would also use control theory but instead of aiming for a target delay, aim for a target rate. A rate, unfortunately, is two values- data/interval, and we would probably have to use two estimators for the appropriate interval (one slow - say 200ms - one fast - say 20ms) to  get a smoothed rate, and furthermore account for all data sent in excess of the setpoint in order to ""bob"" below the setpoint long enough to clear the backlog in a shaper or policer upstream.

The principal problem that has to be solved is that when you are trying to hold inbound rate limits below what the upstream shaper is limited to, that a burst can overwhelm the aqm algorithms, leading to buffers accumulating, still, in the upstream shaper, that are delivered at the base rate. The differential between the upstream rate and the locally shaped rate (say, 10%) is not enough to get the upstream buffers to drain, RTTs grow, and the aqm is never able to reduce the rate to it's set rate. The local policer or shaper has to ""bob"" down below it's set rate for long enough to fully account for all the accumulated data in the burst upstream, and no policer, shaper or aqm (that I know of!?) presently does that.

Most policers today are brick wall filters and just drop everything above the set rate. These do very poorly in short RTT situations in particular.

Another idea in bobbie is to use FQ-like techniques to shoot at multiple flows - gently! to get a more drastic rate reduction, faster, while impacting them minimally.

so we would start hashing the 5 tuple when the rate is exceeded, and shoot at/mark no more than one packet per flow as a starting point, and measure, then shoot again on a changed interval against more or less or different packets. The hard part in bobbie would be to find a stable algorithm that did all this, and we don't have one. However something that was still quite brick wall, but shot at multiple flows gently, would be a significant improvement on what we have today in the linux policing system, and adding mark capability would be a boon...

A third idea for all this is to measure the ""smoothness"" of the delivered flow from the upstream shaper. When it goes smooth, it indicates it has found it's set rate and is buffering. Doing this well requires relative insensitivity to the native burstyness of the underlying mac layer.

Technically it would be much simpler for the upstream devices (cmtses and dslams, etc) to adopt a better shaping/fq/aqm technique in the first place!
","",2015-05-19 12:31:51.335389,4
196,196,3,"h1. Machines

h1. Machines

h2. Main machines

{{include(jupiter)}}
{{include(metis)}}
{{include(callisto)}}

h2. Client machines

{{include(aitne)}}","",2011-08-11 15:28:44.598018,1
164,164,3,"h1. Scratch page for testing

[[example]]

[[3.3.8-11 tests]]

[[Experiments]]

really want diagrams to work

[[bind9 chroot jail and xinetd]]

[[xinetd]]

[[enabling dnssec]]

[[configuring network manager]]

[[dealing with smoketests]]

[[Optimizing for 802.11n]]

[[CeroWrt 1.0 rc8]]

[[Sharing Windows Files from wired to wireless]]

[[Cerowrt 3.3 Build]]

[[Release Strategy]]

[[Getting time from gpsd]]

[[Pre-3.3 Releases]]

[[Pure IPv6 based networking]] 

[[Oprofiling]]

[[IPv6 Tunnel]]

[[Using the Networking Test Tools]]

[[Bismark Tools]]

[[Experimental Features]]

[[CeroWall]]

[[Early Test Results]]

[[Tuning Cerowrt]]

[[Fq_Codel on Wireless]]

[[Minstrel Wireless Rate Selection]]

[[Build cluster machines wanted]]

[[Donate]]

[[Why 42]]

[[Previous Dedications]]

[[CeroWrt and BCP38]]

[[Setting up an interior gateway router]]

[[Cerowrt and OpenWrt Barrier Breaker Interoperation]]","",2014-12-09 21:28:10.489253,35
154,154,3,"h2. Radical Diffserv improvements

This last portion of the proposal is rather radical in scope. 

<pre><code>[!] -m dscp_table [--src | --dst ] --transform-via tablename
[!] -m dscp_table [--src | --dst ] --lowest tablename
[!] -m dscp_table [--src | --dst ] --highest tablename
[!] -m dscp_table [--src | --dst ] --best tablename
[!] -m dscp_table [--src | --dst ] --worst tablename
</code></pre>

Comprehensive port based (re) classification can be accomplished by loading one or several large (132k) tables into the kernel at run time, referenced via the standard load_firmware mechanisms in the kernel, mapping the entire available port space into a bimodal classification mechanism. 

Regardless of the actual size of the table, it would actually remain cache hot in the majority of cases, as the most used ports lie below port 1024. 

The default match would be against both src and dst ports, the match logic for --best or --worst is kind of undefined. It makes sense for promoting AFxx catagory traffic...

h3. Questions

A) Why not a 48k table?

Quite a few protocols are bimodal, where they come in on two different priorities based on the actual usage.

The canonical example of this is SSH, which sets the interactive bit for interactive sessions, and sets bulk for SCP. 

It would be my hope that other protocols that are bi-modal would do the same, or at least, could.

Also in analyzing the traffic generated by the top 100 web sites, they generate either CS1 (background) or BE traffic on port 80. [4] If a given website wants to claim it's sending bulk data, let them.

So allowing for bimodal capabilities covers more traffic possibilities than a single match.

B) So... why not a 96k table?

Coping with 6 bit values is mildly hairy.

C) So why 128k?

The undefined 4 bits could be used for a variety or purposes. 

One potential mapping would include port blocking based on port number and/or direction, thus combining basic firewalling and traffic classification into one rule.

D) But you specified 132k!!??

The first 4k is a header, for future use. Tables could be signed and contracts enforced between providers agreeing to carry traffic of different levels. 

Similarly a market for home and business usage could arrive for programming by exception. An example of this is, the author listens to several internet radio stations and likes very much to have reserved enough bandwidth (128k-220k) usually to let music flow while other work is going on. IF there existed (crowdsourced) database(es) out there of ip addresses and port numbers with their usual traffic on them classified, usage can be daily/hourly optimized to match a normal traffic pattern for each site's specific requirements, starting with a custom table of port mappings to prioritizations, and programming via exception the additional traffic types via (for example) an ipset-like mechanism.

5: http://www.oidview.com/mibs/0/DIFFSERV-DSCP-TC.html
6: I would never have known most web traffic came in as BK rather than BE.

EXAMPLES:

The classic wondershaper contains ACK prioritization for SSH interactive traffic, because the authors cared a lot about ssh. irc, jabber, and other interactive protocols are left to hang in the wind. 
","",2011-06-19 18:52:41.403143,6
319,319,213,"h1. What t

Redirect to http://www.bufferbloat.net/projects/cerowrt/wiki/What_to_do_about_Bufferbloat","",2015-05-20 22:40:42.49566,1
153,153,3,"h2. More advanced Diffserv support in Linux

This part of the proposal becomes mildly more controversial in scope.

h3. Keeping good DSCP statistics

<pre><code>-j DSCP --dscp-stats name</code></pre>

Getting a comprehensive view of traffic types can be done with a sequence of 64 iptables rules, which is very inefficient. You can save cpu and gain insight at a statistical level, for example, by having a jump target for statistics collection of, say, every 100 packets, but, still... It is very interesting and informative to have these statistics available. 

What is proposed with a --dscp-stats jump target is to have a table generated much like how the existing match target functions, incrementing 64 bit counters for each of the 64 traffic types and presenting it in an easily parse-able format somewhere in /proc.

A problem is that the ipv6 and ipv4 namespaces are presently disjoint in iptables, and dscp is basically an ip level match.

Perhaps it would be better to not do it at the iptables level but within the kernel, enabled by a sysctl, as a per-device standard, so,
for example, snmp could read it out of /{proc,sys}/net/device/something to implement the diffserv-dscp-tc mib.

A problem introduced here is the (slight) added overhead of incrementing one additional per-device offset counter all the time, and that usually you are mangling incoming packets inside of iptables anyway, so the place to do it is on output rather than input.

An alternative is to do it via tc, which is more hairy.

h3. Better classification into 8021.d and 802.11e QoS catagories

Once comprehensive classification is available, it is possible to map distinct classes into their relevant 8 802.1d or 4 802.11e catagories. In fact, it's nearly a direct match between 802.1d and 802.11e, so classification into 802.1d could suffice to match
802.11e. That leaves 3 bits worth of classification required per traffic class, regardless of hardware QoS, and 

Given the enhancements already discussed in this document, hardware classification could be handled by a mere 7 matching rules for 8021.d and 5 for 802.11e. 

h4. Example for 802.11e

<pre><code>iptables -A P80211e -m dscp --dscp-classes EF,CS6 -j CLASSIFY --set-class 0:106
iptables -A P80211e -m dscp --dscp-classes AF43,AF33,AF23,AF13,CS1 -j CLASSIFY --set-class 0:101
iptables -A P80211e -m dscp --dscp-classes CS3,MICE -j CLASSIFY --set-class 0:104
iptables -A P80211e -m dscp ! --dscp-classes CS3,MICE,AF43,AF23,AF13,AF33,EF,CS6 -j CLASSIFY --set-class 0:103

iptables -A OUTPUT -o wlan+ -j P80211e</pre></code>

h4. Better solution...

Would be to compress this into 3 bits per dscp value, for a lookup table of 192 bits in length. 

I don't have a suggested syntax for this, perhaps:

iptables -A OUTPUT -o wlan+ j CLASSIFY --from-dscp CS3,MICE,AF43,AF23,AF13,AF33,EF,CS6 --to-priority  4,4,1,etc,etc

I don't really expect humans to enter these rules, as the command lines are getting kind of long.

h3. Coping with multicast

Multicast on wireless can be especially devastating to the overall health of the network. Even on wired, a significant amount of unfiltered multicast can turn a GigE switch into a GigE hub. The overall effect of bridging wired multicast to wireless is the equivalent of a self inflicted DoS attack, at present. multicast IPTv requires special handling, and there are no feedback mechanisms anywhere in the stack that account for the monstrous difference in transmission rate for example between 802.11n (up to 600Mbit) and multicast (2Mbit).

As for solutions... the solution is too long to fit in the corner of this web site.


","",2011-06-20 05:06:27.41726,10
155,155,3,"h1. Diffserv RFC

{{include(Diffserv Linux Improvement Overview)}}
# {{include(Basic Diffserv Improvements to Linux)}}
# {{include(More advanced Diffserv support in Linux)}}
# {{include(Radical Diffserv improvements)}}
# {{include(Save the Mice)}}","",2011-06-20 12:13:15.937966,4
195,195,3,"h1. Using the testlab

h2. Cluster control

h2. Experiment - thrash the network hard

Here's a simple way to get all the routers sending lots of data at the same time.

On [[io]], run

@iperf -s@

On [[io]], run

@pdsh -lroot -grouters 'iperf -t 60 -c io.lab.bufferbloat.net'@

Boom, all the routers will start running iperf simultaneously. You can, after [[setting your routing]], 
set up various tests of [[QoS]], or [[different TCP/ip stacks]], or [[changing your window size]], 
slam the whole system while doing other things, and capture the results with tshark or wireshark.

For example this will test a larger cwin:

@pdsh -lroot -grouters 'iperf -w 1M -t 60 -c metis.lab.bufferbloat.net'@

which was the subject of [[Experiment - QoS]], which has many more examples


[[Machines]]","",2011-09-13 14:15:47.295314,4
177,177,49,"h1. Tutorial Day 2

h3. Package Overview

* Operating systems in the room: Ubuntu 10.04, 10.10, 11.04, Debian Squeeze
* Packages in the source tree
** bismark-packages (on github)
** Dave's repositories (welcome to clone, but don't call it cerowrt if you tweak it beyond recognition)
*** cerowrt (Dave Taht maintains; read-only is available, read-write available on proving yourself): derived from OpenWRT
*** cerofiles
** luci (written in lua)
** openwrt: core OS (things needed to boot)
** packages: part of the openwrt project

h3. Differences between OpenWRT and CeroWRT

* overview of git show and recent changes to OpenWRT (currently, 8 patches differences)
** support for reno, bic, cubic, DRR, choke, SFB, etc.
** publish the top-most commit of what version you use, and people will be able to duplicate your results
* recommendation: track changes to OpenWRT
* in openwrt logs: nbd/felix is one of the main openwrt developers
* to read the logs, cd into each directory and ""git log"" to see the changes

h3. Pulling Updates and Merging

* git configuration file: .git/config
**  what to fetch, and URL to fetch from.  can name different branches (e.g., openwrt, cerowrt, etc.)
** defines a new remote repository ""openwrt""
** ""git pull openwrt master"" into the cerowrt directory pulls the openwrt patches into the cerowrt directory. (pulls from master branch)
* Presenting example of how to pull openflow into the source tree
** feeds.conf sets up pointers to other feeds
*** e.g., src-git openflow git://gitosis.stanford.edu/openflow-openwrt
** ./scripts/feeds update pulls all of the packages from things in feeds.conf
* the ""env/files"" directory: default configuration files into this directory
** lib/wifi/mac80211.sh"" (script that brings up wireless by default)
** etc/opkg.conf  points to Dave's package repository.  when doing your own build, will have to change this.
** ./scripts/env is a useful script for managing different environments for the files directory
* make defconfig 
* make menuconfig (menu-based configuration)
* vi .config
** CONFIG_PACKAGE_bismark-active=m  (install as module, not as part of the build)
* feed overview (how to get this list?)
** bird routing daemon (worth trying out): has BGP, other routing protocols
** collectd (system statistics monitoring)
** busybox: most UNIX utilities bundled into a single executable file (10s of MB of utilities into about 600k).  can always pull from coreutils if you absolutely need it
** freeswitch (SIP server)
** VPNs: stongswan, etc.
* ./scripts/feeds install openflow (still has bug)  [or some other package]
* fire off the build
** make -j8 V=99

[[Lab Users]]
","",2011-07-12 09:32:44.319843,10
169,169,3,"h1. BANA - Bufferbloat Assigned Numbers Authority

This is the rough equivalent of the 1975 hosts.txt file. If you wish to do vpn testing with the rest of us, or closely collaborate with other researchers in the general case, please assign yourself a /24 network number in the 172.16.0.0/12 subnet range, and also get ipv6 up and running.

h2. Network address assignments

Personal

|IPv4|IPv6|Assignee|
|172.30.42.X|6in4|default network for cerowrt routers|
|172.30.46.X|6in4|fl.taht.net|
|172.30.48.X|6in4|thegettys.net|
|172.30.49.X|6in4|vpn.thegettys.net|

h2. BLOATLABs

|IPv4|IPv6|Assignee|
|172.29.0.X - 172.29.31.X||lab.bufferbloat.net|
|172.28.32.X - 172.28.47.X||princetonlab.bufferbloat.net|
|172.28.48.X - 172.28.63.X||stanfordlab.bufferbloat.net|
|172.28.64.X - 172.28.91.X||mitlab.bufferbloat.net|
|172.31.0.X - 172.31.32.X||lab.noise.gatech.edu|

","",2012-03-09 16:26:27.072981,6
269,269,3,"h1. AHCP

ahcp is the ""ad-hoc configuration protocol"":http://www.pps.univ-paris-diderot.fr/~jch/software/ahcp/ created by ""Juliusz Chroboczek"":http://www.pps.univ-paris-diderot.fr/~jch/ .

It uses link-local ipv6 multicast to distribute ipv4 and ipv6 addresses, ntp and name server information. It differs from dhcp and dhcpv6 in that it:

Uses one packet to distribute ipv4 and ipv6 information (dhcp and dhcpv6 require separate and more packets each)
Distributes point to point addresses (/32 ipv4 and /128 ipv6) 
Lacks the backward compatability cruft in dhcp and dhcpv6

For more information, including the current specification and rfc, please see the ""ahcp web site"":http://www.pps.univ-paris-diderot.fr/~jch/software/ahcp/ .","",2012-08-17 14:20:22.448762,1
136,136,213,"h1. CEROWRT 'OCEAN CITY' RELEASE REQUIREMENTS

h2. THIS DOCUMENT IS OBSOLETE

See the [[OCEAN CITY]] page.

Objective: Provide a viable substrate for future releases of [[bismark:wiki|Bismark]], [[iscwrt:wiki|ISCWRT]], and [[wisp6:Wiki|WISP6]].


h2. Core Requirements

Support more [[targets]], notably those with 8MB of flash: wndr3700v1, nanostation M5.

h2. New features

h3. Infrastructural pulls

# Merge up with openwrt head (now current)
# Working mesh support (as available)
# IPv6 as landing from wisp6 (as available)

h3. Bug fixes

# Fix for dhcp bug

h3. Additional Patches

# Netem, possibly with TCN http://tcn.hypert.net/ #169 (delay and packet loss)
# Improvements to the switch (link detection, AQM, port mirroring) 
# Additional packet schedulers
# Actual packet loss out of the wireless device

h3. Additional packages

# Incorporate ppoe support in the build DONE
# optional vpn support DONE Both openvpn and strongswan are available 
# Bismark built and available optionally

h2. Experimental features

# KVM version could use 2.6.39 and/or debloat-testing
# Polipo enabled in DHCP
# Lighttpd used instead of uhttpd

h2. Target release date

TBD

h2. Resources required

TBD","",2012-01-28 17:58:17.275262,13
188,188,49,"h1. Bismark Next Steps

*Agenda*

* DNS-based redirection / Geolocation / BIND+GeoIP
** Requirements: Easy to use
* KVM
* Router flashing
** [[Parallel device flashing from factory firmware]]
* TIE/passive measurement packaging
* Level3 Deployment
* Data format/Protobuf
* TIE + OpenFlow
* TCP connection splitting w/Polipo 
** Browser add-on to detect Polipo and set automatically
* Web 10G Kernel Patch into OpenWRT
* Wireless measurement: kismet (preferable to airodump-ng)

*Logistics*

* DNS-based redirection / Geolocation / BIND+GeoIP
** Requirements: Easy to use
** Is anyone actually maintaining DONAR now? (Jacopo will ask)
* KVM (or virtual machines)
** http://huchra.bufferbloat.net/~cerowrt/cerowrt-kvm/
** http://www.linux-kvm.org/page/Main_Page
* TIE/passive measurement packaging: http://tie.comics.unina.it/
* Router flashing
** Need steady supply of WNDR 3700v2 routers for the lifetime of the project (18-24 m?)
** Free routers?
** What routers are coming down the pipe.  Broadcom stuff contains binary blobs in wifi driver.  Will the next version be open?
** We love the 3700v2.  What’s the direct successor to that?
** Can Dave drop in as well?
* Data format/Protobuf
* Database
* Archival
* TIE + OpenFlow

* When, where, and how many to ship routers?
** 50 initial shipments, as that works, start shipping out more
** First shipment: August 7 target, September 1 release date
** US near MLab servers/cities, Amsterdam, Paris, Italy, Australia
** First publication deadline: Mid-November


*Research on Bismark*

* Level3 Deployment

* TCP connection splitting w/Polipo
** Browser add-on to detect Polipo and set automatically
** http://www.pps.jussieu.fr/~jch/software/polipo/
* Turn connection splitting on and off to see performance difference
** Web 10G Kernel Patch into OpenWRT
** http://www.web10g.org/index.php?option=com_content&view=article&id=46&Itemid=67
** Wireless measurement: kismet (preferable to airodump-ng)
** http://www.dd-wrt.com/wiki/index.php/Kismet_Server/Drone#Server_or_Drone
** http://www.kismetwireless.net/documentation.shtml
** What is different from earlier work in the 90s?
*** Asymmetric access link
*** Home network wireless
*** Multiple radios on the home
** Initial experiment: 
*** Host web server
*** wget from home(s) to nearby server 
*** objects of different sizes
*** explore effects of turning splitting on and off, in terms of page download time
*** start with the experiment in a lab (i.e., here)
*** explore the effects of different TCP variants in a wireless setting

* Idea for project: Home network lab in the lab.  Simulate Comcast, AT&T, WiMax, other effects (powerboost, distance from central office, etc.)
** Emulating/modeling the home network based on traces gathered in the field from Bismark
** Use some of Keith’s consumer devices to run inside this type of environment

* Explore different TCP variants on the router itself (Westwood+, Bic, Cubic)
* Experimenting with different QoS systems
** Simulate a family with two teenagers (and all of the activity associated with that)
** Coexistence of VoIP, BitTorrent, NetFlix, Facebook photo upload
** Investigate LEDBAT: http://tools.ietf.org/html/draft-ietf-ledbat-congestion-05

*Other bismark features*
* rsynch of /etc directory - http://kitenet.net/~joey/code/etckeeper/
* web toolkit ?","",2011-07-15 16:13:31.997478,10
159,159,3,"h2. Analysis of existing firewall and shaper scripts

TBD: I have examples of many of these types of shapers that I plan to go into more detail with shortly. 

h3. Openwrt firewall + QoS rules

Openwrt ties it's firewalling and QoS code closely together, using a combination of 'qos-scripts' and firewall rules in a somewhat easy to read format in /etc/config/qos and /etc/config/firewall, generating complex rules as a result. It also defaults to TCP Westwood+ which has interesting interactions with other TCP traffic when a proxy is used.

h3. Gargoyle

Gargoyle (A fork of openwrt) 

h3. ufw

h3. Wondershaper

Wondershaper's big claim to fame was it's simplicity. It pioneered [[ACK prioritization]] for ssh traffic, and did its work in only 4 TC rules. 

h3. Nanog

h3. Airmax

Used by ubiquity in their line of high performance wireless routers, this consists of a lot of very hard to parse tc rules that work magic for fairness across a wireless network

h3. Adsl-Shaper

h3. Shorewall

h3. Linux voip server example

h3. Linux servers

h3. Linux desktops

","",2011-06-20 05:28:52.283278,1
167,167,3,"h1. Irc clients

* Linux: pidgin or empathy work well, as does xchat
* Mac: pidgin or audium
* Windows: pidgin

Libotr is recomended, too.

The developers hang out primarily on the #bufferbloat and #openwrt channels on chat.freenode.net


","",2011-07-08 12:41:58.484617,1
158,158,3,"h1. Diffserv statistics

h2. Dave Taht's Network

In this example - 10% of the ipv4 packets are network radio, ~88% are BE, and less than 2% can be classified into other classes.

This is 24 hours of data, obviously somewhat skewed by the network not being in use half that time...

After I improve performance of the diffserv classifier I will move towards analyzing one of todays typical home network,
over an hourly period.

$ iptables -v -t mangle -L W80211e
<pre>
Chain W80211e (2 references)Chain W80211e (2 references)
 pkts bytes target     prot opt in     out     source               destination         
1589K  975M CLASSIFY   all  --  any    any     anywhere             anywhere            /* All pkts */ CLASSIFY set 0:100 
 1455  712K CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x08/* Background (BK)(BK) */ CLASSIFY set 0:102 
  731 55437 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x2e/*  Voice (VO)(EF) */ CLASSIFY set 0:107 
    3  1311 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x30/* Critical (VI) */ CLASSIFY set 0:106 
    0     0 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x18/* Video (VI) */ CLASSIFY set 0:104 
 1507  254K CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x2a/* Mice(VO) */ CLASSIFY set 0:104 
    0     0 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x28/* Stuff (BK) */ CLASSIFY set 0:101 
 451K   95M CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x22/* Net Radio(VI) */ CLASSIFY set 0:104 
 2312 1308K CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x04/* Typing (VI) */ CLASSIFY set 0:104 
    0     0 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x09/* P2P (BK) */ CLASSIFY set 0:101 
    0     0 CLASSIFY   all  --  any    any     anywhere             anywhere            DSCP match 0x10/* Background (BK) */ CLASSIFY set 0:102 
</pre>

But for ipv6, the ratios and volume are MUCH different. ~99% of the traffic is control traffic (mostly babel in this case).
While the total amount of traffic may be low compared to ipv4, the amount of traffic relative to the mice category of ipv4 
is much higher, in fact, by volume, the ipv6 control packets are the third largest class of packet.

$ ip6tables -v -t mangle -L W80211e

<pre>
Chain W80211e (2 references)
 pkts bytes target     prot opt in     out     source               destination         
91694   23M CLASSIFY   all      any    any     anywhere             anywhere            /* All pkts */ CLASSIFY set 0:100 
   38  3190 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x08/* Background (BK)(BK) */ CLASSIFY set 0:102 
   25  2400 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x2e/*  Voice (VO)(EF) */ CLASSIFY set 0:107       DSCP match 0x30/* Critical (VI) */ CLASSIFY set 0:106 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere      
87684   22M CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x30/* Critical (VI) */ CLASSIFY set 0:106 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x18/* Video (VI) */ CLASSIFY set 0:104 
 3162  249K CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x2a/* Mice(VO) */ CLASSIFY set 0:104 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x28/* Stuff (BK) */ CLASSIFY set 0:101 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x22/* Net Radio(VI) */ CLASSIFY set 0:104 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x04/* Typing (VI) */ CLASSIFY set 0:104 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x09/* P2P (BK) */ CLASSIFY set 0:101 
    0     0 CLASSIFY   all      any    any     anywhere             anywhere            DSCP match 0x10/* Background (BK) */ CLASSIFY set 0:102 

</pre>

h2. Your results (please identify the period, and number of users)","",2011-06-20 05:53:34.763032,15
171,171,3,"h1. Further Configuration for wndr3700v2

You can configure the router via its Web interface or at the command line, via ssh.

*Get the box up on the internet.* If you are connecting to a cable modem or some other dynamic IP providing host, just connect the WAN port to the router, and reboot the router. This will do ""most"" of the right thing.  Some caveats:
** In the event that your Internet connection is static, you will need to supply the correct IP address, gateway, and DNS server information via the Web interface on the gateway. 
** If you just want to add it to your existing network (supplying dhcp or static) do so... but remember that the CeroWrt gateway will also NAT everything connected downstream from it, unless you setup a static route to it and explicitly turn NAT off.
** DNSSEC will not work properly if the router cannot get the correct time. It will disable itself until it can.
**Enable the wifi interfaces.* Via the web interface, you need to go to the network->wireless tab, turn on the radios, assign SSIDs and channels, etc. WPA2 seems to be the best crypto setting. You should be able to connect wirelessly and do stuff at this point, like surf the web)

h2. Update the package database and install any additional needed packages.* 

Run the following commands
# opkg update # should do the right thing
# opkg list | less
# opkg install whatever_else_you_want (netperf and iperf for example, are useful, and there are multiple other packages in the pipeline)

There are a few outstanding bugs you should look at: http://www.bufferbloat.net/projects/uberwrt/issues
","",2011-07-09 09:37:15.764715,3
178,178,49,"h1. Network Assignments


|_.Name|_.Email|_.Network Name|_.IP Address|_.6net|
|Srikanth Sundaresan|srikanth@gatech.edu|sri.lab.projectbismark.net|172.31.1.x||
|Hyojoon Kim|joonk@gatech.edu|joon|172.31.2.x||
|Nazanin Magharei|nazanin@cc.gatech.edu|nm|172.31.3.x||
|Yiannis Yiakoumis|yiannisy@stanford.edu|yy|172.31.4.x||
|Kyriakos Zarifis|kyr.zarifis@gmail.com|kz|172.31.5.x||
|Jacopo Cesareo|jcesareo@CS.Princeton.EDU|jc|172.31.6.x||
|Walter de Donato|walter.dedonato@unina.it|wd|172.31.7.x||
|Stephen Woodrow|woodrow@csail.mit.edu|sw|172.31.8.x||
|Dave Taht|d@taht.net|dave|172.31.9.x||
|Ken Calvert|calvert@netlab.uky.edu|kc|172.31.10.x||
|Alex Snoeren|snoeren@cs.ucsd.edu|as|172.31.11.x||
|Steve Fox|stevedude@bellsouth.net|sf|172.31.12.x||
|matt|ur.matt@gmail.com|matt|172.31.13.x||
|Xuzi Zhou|xuzizhou@netlab.uky.edu|xz|172.31.14.x||

h1. Teams

* netperf
** Stephen
** Kyriakos
* uFTP
** Dave
** Matt 
** Jacopo
** Youngsung
* bismark stuff
** Srikanth
** Walter
** Xuzi
** Nazanin
* Passive measurements
** Walter
** Nick
* OpenFlow stuff
** Yiannis
** Joon","",2011-07-12 13:17:46.271761,7
175,175,213,"h1. Default network numbering

h2. 172.30.42.X range

CeroWrt is a test platform, and as such we wanted it to co-exist within existing networks as best as possible, without conflicting with an existing network, and to not require NAT in order to function inside that network. NAT skews some test results horribly.

Since there is no public IP address space left, 10.X.X.X networks are being increasingly used as backbone networks, and 192.168.X is most likely a number you are already using on your existing network, we chose the 172.16.0.0/12 range to play in. The default address for the router is 172.30.42.1. 

It is ironic that this is the last piece of 'free' IP address space left. See also [[bloat:BANA]].

If you find this IP hard to remember or type, DNS is enabled by default for a virtual subdomain of _home.lan_. You should be able to get to it via _gw.home.lan_ if you get dhcp from the router and you can, of course, change this to a REAL subdomain of your own otherwise vanity web site name, if you want! 

Changing the default ip address ranges is difficult to do via the web interface and we suggest you stick with it for a while until you understand the reasoning, firewall, routing, and naming rules. If you really must, read [[Changing_your_cerowrt_ip_addresses]].

If you are running CeroWrt inside your network, and not as your default gw, configure your default gw to statically assign an ip address, and route your subnet to the CeroWrt router, and turn off NAT.

h2. /27 subnet

The 'standard of 192.168.0.1' with a /24 netmask of 255.255.255.0 for a home network is obsolete. EVERY piece of gear comes up on that. Yes, it's simple, but:

# bridging together GigE (1000Mbit) with wireless (1Mbit for multicast) - doesn't work. One wired user can wipe out the entire wireless network with traffic. Once you concede this point... multiple networks are the only choice.
# Nobody has 255 machines on one network.
# CIDR has been a standard since 1992.
# We wanted to add more flexibility and security into a home or small business LAN
# A practical upper limit for wireless is about 30 devices per radio.

So we chose a different approach. Since /27 (255.255.255.224) netmasks result in 30 usable IP addresses, we broke the network into 8 equivalent pieces, laid out as follows:

|=.*IPv4 address*|=.*Interface*|=.*Description*|
|=.Public IP|=.ge00|Gateway Ethernet to Internet|
|=.1-30|=.se00|Secure Ethernet for wired devices|
|=.33-62||No interface|
|=.65-94|=.sw00|Secure Wireless (2.4 Ghz)|
|=.97-126|=.sw10|Secure Wireless (5.x Ghz)|
|=.129-158|=.gw00|Guest Wireless (2.4 Ghz)|
|=.161-190|=.gw10|Guest Wireless (5.x Ghz)|
|=.193-222|=.|Mesh|
|=.225-254|=.|DMZ|

In practice you will hardly notice this setup on a new LAN, in fact, we expect overall performance to be 'smoother', especially if you migrate your newer devices to 5.x GHz and leave the 2.4GHz to legacy stuff like bluetooth and microwave ovens. 

Integrating it with an existing LAN is a bit more difficult. Multicast (dns, service discovery, Windows filesharing, etc) is an issue - however it can be solved with regular DNS, a multicast responder, and a Samba WINS server. These are installed by default.

We want to make the integration problems easier to solve, out of the box, over time, and we hope you will see enormous performance benefits by leaving things split apart.

In the meantime, we'd love to know what current services don't work when split across multiple subnetworks like this.

h3. See also

[[Device naming scheme|Default naming scheme]]
[[Changing_your_cerowrt_ip_addresses|Changing IP, DNS, and SSID]]
[[Automated Configuration of CeroWrt]]","",2013-03-16 11:19:33.241842,17
226,226,213,"h1. BQL series release notes

the 'BQL series' is a topic branch of cerowrt attempting to prove out various
new bufferbloat technologies, notably 'Byte Queue Limits' (BQL), and SFQRED.

When this stabilizes we will move back into a real development cycle again.

h2. CeroWrt 3.3 Builds

Virtually all the work being done in the BQL series of builds has been incorporated into the Linux 3.3 kernel. We have dropped further development of the BQL series in favor of pushing on with development on a more mainline core. For more information, see the 

h2. BQL smoketest-42 (No Longer Planned)

-kernel 3.3-rc4
-bind 9.9 final
-decently working aqm with adsl support
-alternate tcp algorithm support-

h2. BQL smoketest-40 (14Feb2012)

http://huchra.bufferbloat.net/~cero1/bql-smoketests/bql-40/

changes in this release:

kernel 3.3-rc3
bind 9.9rc2
ntpd + dnssec removed (too buggy)
snmpd installed by default (for SNMP monitoring)
fprobe installed by default (for NetFlow monitoring)
avahi installed by default (for mdns/Bonjour device naming and discovery across subnets)

sort of better working 'aqm' shaper installed
** when configured uses hfsc + sfqred
** still has trouble with ipv6, diffserv, and tcp elephants
** no adsl overhead support


h2. BQL smoketest-27 (30Jan2012)

http://huchra.bufferbloat.net/~cero1/bql-smoketests/bql-27/

BQL-27 is the third public release of a BQL enabled kernel build for cerowrt.

The primary purpose of the bql series is to evaluate and test the new BQL, improved SFQ, RED, and SFQRED subsystems, while we grope towards a final product definition.

It should be possible now to thoroughly debloat ethernet behavior, as well as vastly improve to-upstream dsl/ethernet behavior. 

Wireless-n remains a major problem, and is likely to remain one until a thorough redesign takes place of the aggregation and AP
layers in Linux. (in other words, we don't expect to make any real progress on wireless until august at the earliest). That said, the new algorithms do hold wireless latency 'tighter', under load.

A great deal of additional stuff is included by default, of varying quality. Due to the size of this build, no jffs2 version will be available, only the squashfs version works for wndr3700v2 and wndr3800.

I note that the wndr3700v3 has hit the stores and IS NOT compatible with the v2. Get a 3800 if you want to be future proofed.

The standard [[Installation Guide]] otherwise applies.

h3. Features:

* Kernel 3.2.2 + 3.3 backport of the new BQL and new AQM technologies
* + Everything that's ever been in cerowrt before! (ipv6,mesh networking,bind9,etc)
* +
* BQL (Byte Queue Limits) - thx Tom Herbert
* RED fixed, adaptive RED implemented, SFQ vastly expanded in capability, and SFQRED added (thx Eric Dumazet)
* TX rings can be increased (thx to BQL) for faster networking performance
* debloat script uses sfq instead of txqueuelen
* Samba 3.6.1 #314
* Strongswan 4.5.3 See #318
* Working ahcp See #252 #322
* Working isc-bind9 with dnssec See #316
* Working isc-ntp See #316 #280
* iperf installed by default (because netperf is so new)
* netperf upgraded to svn head
  This breaks backward compatibility with older versions of netperf. To use netperf, you will have to install a new version from svn. 
  The principal reason for this upgrade was to gain remote TOS/diffserv setting, as well as alternate tcp algorithm support.
* and much much more.

bql-27 meets the original base feature set intended for rc7. 

Some core features may be added, others dropped, as being discussed on the mailing list. 

h3. Stability

Several hundred GB have been sent through the router with no crashes. Performance is good. SFQ does wonders under load for things like voip, short connections, and dns.

h3. Known Bugs

* QFQ does not work (hangs under load)
* The old openwrt AQM shaper is lame. See #331
* SFQ is underconfigured on all interfaces. See #305 and #332
* Dibbler segvios and does not configure ipv6 interfaces. See #274
* PIM based multicast does not work (uftpd fails)
* SFQ on an AP is not the best thing for packet aggregation
* SFQ may now be 'over-optimized' for low latency. See #332

You'll note that none of these issues are essential for normal operation, and several have easy fixes already in the pipeline.
Normal operation is pretty fine, actually.

h3. Dave's Goals

1) After evaluating the performance of the current openwrt-based AQM system, a 
substitute will be implemented. #306 Regrettably the primary prototype of that
was QFQ based. #312  The SFQRED implementation will be used instead, which should
work well, except with bittorrent. Unless I figure out how to do the same 
thing with DRR, or get QFQ working.

2) A gui for creating the AQMs and measuring bandwidth will be added
#306

3) Hopefully the wins related bugs with XP vs Vista will be resolved
by somebody.  #314 I still lack hardware to test that. I do not intend to 
actually ship samba pre-installed at this point, but can be persuaded 
otherwise if something can be made to 'just work'.

4) Working ds-lite support (dibbler? wide? what?) #274

h3. Dave's wish list

Please give this one a shot. It's the first build to show significant differences in performance since 
august. Actually, most bottlenecks have moved to my laptop(s) and servers! I suggest running BQL enabled
kernels on your desktops/laptops with the 'debloat' script in order to see best results.

the debloat repository is being maintained separately from cerowrt:

 https://github.com/dtaht/deBloat

see src/debloat.

A lot of glue is required as yet to make the various pieces function smoothly,
but I do hope you notice a difference in overall performance in normal use. With a new external AQM we'll do
better, but I'd like people to be exercising that code, suggesting features, etc, before I commit 
to starting up a more formal release cycle, and product definition.

I am still toying with the idea of moving forward directly into Linux 3.3, rather than continuing
to backport to 3.2.

That said, I won't be hurt if you delay until after I get the newest AQM installed and working by default.

My hope would be mid-feburary for that. ","",2012-03-01 18:19:59.037882,27
170,170,6,"h1. CeroWrt flashing instructions from a Linux, Mac, or Windows 7 based host

This is how you get CeroWrt running on top of the factory firmware on a WNDR3800 (or WNDR3700v2, if you can find one. Note - ONLY the WNDR3700*v2* is supported of the 3700 series. Do not attempt to use the WNDR3700 v1, v3, or v4: they will not work.) The WNDR3800 is still sold (July 2014), although it seems that mostly refurb units are available

NOTE: The fastest way to flash a router is to upload the factory cerowrt image via the default netgear web interface. You can reflash an already flashed-router using CeroWrt or OpenWrt via the gui interface and the ""sysupgrade"" image, but we *strongly* encourage unchecking the ""preserve settings"" box when doing so. The syntax of the configuration databases changes regularly.

You should take a backup before reflashing - the simplest way is to do a @scp -r root@the.router.ip.addess:/overlay@ which will copy all the changed files so you can inspect them for differences from a clean flash. Alternatively, use the config-cerowrt.sh script from ""CeroWrtScripts"":https://github.com/richb-hanover/CeroWrtScripts#config-cerowrtsh to re-configure your router repeatedly to a known good configuration each time you flash it.

If you have trouble reflashing from the gui: The tftp method documented below *always* works...

h2. What image to use?

Although the CeroWrt build process creates two firmware images, the truly supported firmware upgrade process is using *TFTP* to load the *factory* image with *squashfs*. Examples of suitable images for WNDR3800 and WNDR3700v2 are:

* openwrt-ar71xx-generic-wndr3800-squashfs-factory.img
* openwrt-ar71xx-generic-wndr3700v2-squashfs-factory.img

h2. Flashing instruction for Linux

# Install a tftp client. 'atftp"" seems to work well. _apt-get install atftp_
# Download the ""firmware"":http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr from the current release candidate. Get the ""factory"" image with squashfs.
# Temporarily remove your Ethernet port from Network Manager's control.  To do this:
** Right-click the Network Manager icon on your toolbar
** Select ""Edit Connections""
** In the combo box, select your Ethernet port (usually eth0)
** Uncheck the ""Connect Automatically"" box
** Click the Apply button (and feed your root password to the popup dialog).
# Configure an ethernet port on your machine to 192.168.1.2. (command is usually _ifconfig eth0 192.168.1.2/24_); _note that if you have an USB ethernet device, the device name may not be eth0, but something else entirely._
# Connect port 1 on the router to the ethernet port of your computer (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
# Power on the router and force into tftp mode using the following sequence:
## Turn over the router and press the ""Restore Factory Settings"" button with a thin object like a paper clip until this sequence is complete.
## Turn on the power.
## The light for the port 1, or the port you are plugged into, will light up.
## The ""connection"" light will light up yellow, then flash yellow, then turn green and then flash green. This will take a minute or more.
## The router is now in ""tftp mode"" and you can release the ""Restore Factory Settings"" button.
# Open terminal on your Linux box and type the following commands to flash the router
** atftp 192.168.1.1
** put <image-file>
A successful tftp will simply return no message, a failed one will eventually time out and tell you so.  
# If you see ""source port mismatch, check bypassedtimeout: retrying..."", this probably means that Network Manager has messed with your Ethernet port behind your back. Disable it, manually set the Ethernet port as before, and try again.
# After you have successfully downloaded the image *waiting at least 5 minutes is KEY*; The router needs to rewrite a lot of flash which is very slow... If impatient, go for a walk, have some coffee... or do another router. After the tftp succeeds you can disconnect your laptop's network cable with no issues, so this will speed your life up if you are doing multiple routers. Depending on quantum fluctuations, the router may or may not reset - you will see the light go solid green in this case...
# A good indicator of completion is a steady green or yellow light for the port you cabled to, together with a steady green power light and steady green or blue wireless lights.
# When you have successfully downloaded the image, hand the port back to Network Manager by repeating the steps give above for reaching the ""Connect automatically"" checkbox; check it, and apply the change.
# To test the router's function, Use Network Manager to attempt to make a wired connection via your Ethernet port. To do this:
** Left-click on your Network Manager icon
** Disconnect from your wireless network
** Select Auto eth0
You should quickly get a notification ""Auto eth0: Connection established"".  This indicates that you have successfully acquired a DHCP address from the router you just flashed, and it is functioning normally.
Note: In this state, you probably have no Internet; you will want to reconnect to your wireless network in order to get it back.
# (re)Enable dhcp on your machine, get a new address.  (it should be in the 172.30.42.2-31 range). Or manually assign 172.30.42.11/27 It may take a while to get a DHCP address, and you may temporarily see a link-local (e.g. 169.254.x.x) address.
# Continue reading the [[Cerowrt_flashing_instructions#Final-Setup-Steps|Final Setup Steps]] (below).

h2. Flashing Instructions for Mac

# Get a tftp client. There's one on most macs already. Make sure you have it first.
# Download the ""firmware"":http://snapon.lab.bufferbloat.net/~cero2/ from the current release candidate. Get the ""factory"" image with squashfs.
# Configure an ethernet port on your machine to 192.168.1.2. 
# Connect port 1 on the router to the ethernet port of your computer (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
# Power on the router and force into tftp mode using the following sequence:
## Turn over the router and press the ""Restore Factory Settings"" button with a thin object like a paper clip until this sequence is complete.
## Turn on the power.
## The light for the port 1, or the port you are plugged into, will light up.
## The ""connection"" light will light up yellow, then flash yellow, then turn green and then flash green. This will take a minute or more.
## The router is now in ""tftp mode"" and you can release the ""Restore Factory Settings"" button.
# Open terminal on mac and type the following commands to flash the router
** tftp 192.168.1.1
** binary
** put <image-file>
A successful tftp will usually tell how many bytes were transferred and quit. A failed one will eventually time out and tell you so.  
# After you have successfully downloaded the image *waiting at least 5 minutes is KEY*; The router needs to rewrite a lot of flash which is very slow... If you're impatient, go for a walk, have some coffee... or do another router. After the tftp succeeds you can disconnect your laptop's network cable with no issues, so this will speed your life up if you are doing multiple routers. Depending on quantum fluctuations, the router may or may not reset - you will see the light go solid green in this case...
# A good indicator of completion is a steady green or yellow light for the port you cabled to, together with a steady green power light and steady green or blue wireless lights.
# (re)Enable dhcp on your machine, get a new address - it should be in the 172.30.42.2-31 range. Or manually assign 172.30.42.11/27 It may take a while to get a DHCP address, and you may temporarily see a link-local (e.g. 169.254.x.x) address.
# Continue reading the [[Cerowrt_flashing_instructions#Final-Setup-Steps|Final Setup Steps]] (below)


h2. Flashing Instructions for Windows 7

# Install a tftp client. Windows 7 includes a basic tftp client, but it is not installed by default. To do this:
## Open the Windows Control Panel.
## Select ""Programs""
## Select ""Turn Windows features on or off"" under the heading ""Programs and Features""
## Check the ""TFTP Client"" feature and click on ""Ok"". A window will appear for some time saying ""Please wait while Windows makes changes to features. This might take several minutes."" No reboot is necessary.
# Download the ""firmware"":http://snapon.lab.bufferbloat.net/~cero2/ from the current release candidate. Get the ""factory"" image with squashfs.
# Connect port 1 on the router to the ethernet port of your computer (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
## To be safe, you probably don't want your PC plugged into anything else, or on a wireless network, especially one that will conflict with the networks that the router may be configured with.
*** 192.168.1.0 - The default network that the factory firmware defaults to.
*** 172.30.42.0 - The default network that the Cerowrt firmware defaults to.
# Open a cmd.exe window and navigate to the directory with the downloaded firmware.
# Prepare a command for running the tftp client with the correct parameters. Substitute the IP address and filename in the following example appropriately.
** tftp -i 192.168.1.1 put openwrt-ar71xx-generic-wndr3700v2-squashfs-factory.img
# Power on the router and force into tftp mode using the following sequence:
## Turn over the router and press the ""Restore Factory Settings"" button with a thin object like a paper clip until this sequence is complete.
## Turn on the power.
## The light for the port 1, or the port you are plugged into, will light up.
## The ""connection"" light will light up yellow, then flash yellow, then turn green and then flash green. This will take a minute or more.
## The router is now in ""tftp mode"" and you can release the ""Restore Factory Settings"" button.
# Configure the ethernet port on your PC to a static IP address of 192.168.1.2. To do this:
## Open the Windows start menu using the ""Windows"" key on your keyboard or with the mouse.
## Type ""network connections"" into the ""Search program and files"" field.
## Select ""View network connections"" in the search results.
## Right-click on ""Local Area Connection"" to bring up the context menu and select ""Properties"". If your ethernet port is something different, then bring up the properties for that device.
## On the ""Network"" tab that should appear as the default, select ""Internet Protocol Version 4 (TCP/IPv4)"" in the list labeled ""This connection uses the following items:"" and then click on the ""Properties"" button.
## Under the ""General"" tab that should have appeared in the ""Internet Protocol Version 4 (TCP/IPv4) Properties"" dialog, select the radio button ""Use the following IP address:"" and set the following:
*** IP address: 192.168.1.2
*** Subnet mask: 255.255.255.0
*** Default gateway: 192.168.1.1
## Click on the ""Ok"" button.
## Leave the property dialog for ""Local Area Connection"" open to make it easier to restore the interface to the original configuration.
## You are now ready to upload the firmware to the router
# Switch to the pre-configure command line in the ""cmd.exe"" window and run the tftp command. It should only take a couple of seconds to complete.
# After you have successfully downloaded the image *waiting at least 5 minutes is KEY*; The router needs to rewrite a lot of flash which is very slow... If you're impatient, go for a walk, have some coffee... or do another router. After the tftp succeeds you can disconnect your laptop's network cable with no issues, so this will speed your life up if you are doing multiple routers. Depending on quantum fluctuations, the router may or may not reset - you will see the light go solid green in this case...
# A good indicator of completion is a steady green or yellow light for the port you cabled to, together with a steady green power light and steady green or blue wireless lights.
# Restore the PC network connection to use DHCP.
## Switch to the property dialog for the ""Local Area Connection""
## On the ""Network"" tab that should appear as the default, select ""Internet Protocol Version 4 (TCP/IPv4)"" in the list labeled ""This connection uses the following items:"" and then click on the ""Properties"" button.
## Under the ""General"" tab that should have appeared in the ""Internet Protocol Version 4 (TCP/IPv4) Properties"" dialog, select the radio button ""Obtain and IP address automatically"" and click on the ""Ok"" button.
# If everything went well, your PC should receive a lease from the DHCP server on the router. (It should be in the 172.30.42.2-31 range). Or manually assign 172.30.42.11/27 . It may take a while to get a DHCP address, and you may temporarily see a link-local (e.g. 169.254.x.x) address.
# Continue reading the [[Cerowrt_flashing_instructions#Final-Setup-Steps|Final Setup Steps]] (below)

h2. Final Setup Steps

# Point your Web browser at http://gw.home.lan  If that doesn't work, try http://172.30.42.1:81 
** Note: It can take six or seven minutes for the router to complete its flash procedure. Don't worry.
** Note: You may need to do a shift-refresh (to defeat the browser's resolver caching) in order to make the front page come up properly. 
# Click on the 'Administer' Tab. You can safely ignore any SSL Errors from your browser: CeroWrt uses a self-signed SSL certificate. Proceed to login: the default username is 'root', the default password is 'Beatthebloat'. You can also ssh in as root with that password, or continue using the web interface. If ssh is being refused, or the web interface doesn't come up, it's generally still rewriting flash. Be patient...
# But if none of this works, power cycle the router and try again. If that doesn't work, proceed to step 3 of the procedure for your computer to re-flash the router.  
# Connect the WAN port on the router to your ISP uplink and reboot the router.
# Return to the [[Installation Guide]] for the next steps.

h2. Flashing Instructions ""from the router""

The following instructions will be helpful if you want to avoid the tftp install method. It assumes that you can ssh to the router and the sysupgrade utility is also installed in your router.

# Get the image file from http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr Choose a candidate version number, then download openwrt-ar71xx-generic-wndr3800-jffs2-factory.img (or the 3700v2 version).
# If you have an existing openwrt firmware in your router, you will need the sysupgrade version from http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr (choose a candidate) openwrt-ar71xx-generic-wndr3700v2-squashfs-sysupgrade.bin, but right now you want to wipe out everything, so use the ""factory"" version, above). [[sysupgrade]] instructions are elsewhere.
# Configure your wired interface to DHCP
# Connect port 1 on the router to the ethernet port (make sure you are connecting to the router's ethernet port 1, not its WAN port!)
# Copy the firmware image to the router's tmp folder. Make sure that you copy in the tmp folder, otherwise you'll run out of memory : scp openwrt-blah-blah.bin root:/tmp/
# Login to the router using ssh.
# Go to /tmp/ and upgrade your firmware
# sysupgrade -n name-of-your-firmware.bin
# Wait for the links to blink. After 2-3 minutes your router will install. First boot will take a bit (~5 minutes), and there you go.
# Make sure you don't unplug the router's power during the upgrade process!
# Point your Web browser at http://gw.home.lan . Click on the 'Administer' Tab. If that doesn't work, try http://172.30.42.1:81 . The default password is 'Beatthebloat'. You can also ssh in as root with that, or continue using the web interface. If ssh is being refused, or the web interface doesn't come up, it's generally still rewriting flash. Be patient...
# But if none of this works, power cycle the router and try again.  If that doesn't work, proceed to step 2.  
# Connect the WAN port on the router to your ISP uplink and reboot the router.
# Return to the [[Installation Guide]] for the next steps.","",2014-10-01 10:49:37.736853,39
135,135,213,"h1. Overview of the CeroWrt Project

!>http://huchra.bufferbloat.net/~d/images/a9.jpg!

Bufferbloat is the undesirable latency that comes from a router or other network equipment buffering too much data. It is a huge drag on Internet performance created, ironically, by previous attempts to make it work better. Eric Raymond wrote this one-sentence summary of the problem: ""Bloated buffers lead to network-crippling latency spikes."" You can read more about this problem at the main [[bloat:Introduction|Bufferbloat]] site.

CeroWrt was a project built upon the ""OpenWrt firmware"":http://openwrt.org to resolve these endemic problems in home networking today, and to push the state of the art of edge networks and routers forward. Projects include proper IPv6 support, tighter integration with DNSSEC, and most importantly, reducing bufferbloat in both the wired and wireless components of the stack.

The code was 100% open source, top to bottom. No binary blobs whatsoever. Every aspect of the code and hardware can be inspected and/or modified. As a project, most of the results have been pushed up into mainline linux, OpenWrt ""Chaos Calmer"" and ""Barrier Breaker"" releases, many firewall and router distributions and it is beginning to appear in commercial firmware. Active research (due to lack of funding, and succeeding in the primary goals) has ceased, with the exception of ongoing work into standardization efforts, and into something even better than fq_codel, called [[codel:cake]], which is not ready for prime time yet.

Is your internet connection bloated? You can find out right now using the [[Quick_Test_for_Bufferbloat|Quick Test for Bufferbloat.]] - or see the ""dslreports new speedtest"":http://dslreports.com/speedtest .

h2. News

""*CeroWrt 3.10.50-1 Works!*"":http://www.bufferbloat.net/news/53 This build has been very stable since it was released on 28 July 2014. We strongly recommend replacing all earlier builds with this build. Read the ""News"":http://www.bufferbloat.net/news/53 item for the update. See the [[CeroWrt 310 Release Notes|CeroWrt 3.10 Release Notes]] and the ""mailing list"":https://lists.bufferbloat.net/listinfo/cerowrt-devel for more details. 

_Note:_ All the important features of the CeroWrt software are now available in mainline ""OpenWrt"":http://openwrt.org Barrier Breaker and Chaos Calmer builds. You may be better served by installing one of those supported builds that are available on a much wider range of router hardware. 

h2. Roadmap

Our plan has always been to produce a stable build that can be used as both a production router, and as a platform for further research into algorithms for solving state of the art problems in networking. The CeroWrt 3.10 series of builds include the following features and capabilities

* Linux 3.10 kernel. Most of the fixes for bufferbloat are being implemented in this 3.10  kernel, so we are tracking these developments carefully. http://kernel.org
* We have included a version of the ""CoDel"":http://www.bufferbloat.net/projects/codel/wiki algorithm from Kathie Nicols and Van Jacobson, along with Eric Dumazet's ""flow queueing"":https://tools.ietf.org/html/draft-hoeiland-joergensen-aqm-fq-codel-00 fq_codel. These in turn rely on the Byte Queue Limits for line rate networks and on htb for the [[SQM]] QoS system. These replace earlier Active Queue Management fixes for bufferbloat including: Stochastic Fair Queueing-Random Early Drop (SFQRED), and other queue disciplines.  
* There are also two [[newer versions of fq_codel]] under test, as well as an implementation of the current ns2 model of codel itself.
* IPv6 support. Another major goal of CeroWrt is to make IPv6 networking in the home as simple as IPv4.
* Babel mesh routing protocol with [[source sensitive routing]]. RA, bgp, rip, ripng, and ospf are also supported via the Quagga optional package.
* DNSSEC - Secure extensions to the DNS system.
* OpenWrt features. Because we track the OpenWrt code base carefully, we incorporate most of the capabilities of that distribution. We actively push our changes/enhancements back toward the OpenWrt trunk. http://openwrt.org
* An attractive web GUI for configuration - LuCI

h2. Sources of Information about the Bufferbloat Project

Glossary for Bufferbloat Topics: [[bloat:Glossary]]
General Bufferbloat list: https://lists.bufferbloat.net/listinfo/bloat
CeroWrt-devel list: https://lists.bufferbloat.net/listinfo/cerowrt-devel
CeroWrt-Commits list: https://lists.bufferbloat.net/pipermail/cerowrt-commits/
IRC: Find us on ""IRC on chat.freenode.net"":irc://chat.freenode.net:6667/bufferbloat, #bufferbloat channel
[[bloat-videos|Assorted Bufferbloat Videos]]

h2. Try the Software

The current build is solid. We believe it solves virtually all the bufferbloat problem, and deserves wider use. Lots of people are using it as their production router.  Download the current CeroWrt 3.10.50-1 build: 

* ""CeroWrt 3.10.50-1 for WNDR3700v2"":http://www.bufferbloat.net/attachments/download/226/openwrt-ar71xx-generic-wndr3700v2-squashfs-factory3.10.50-1.img
* ""CeroWrt 3.10.50-1 for WNDR3800"":http://www.bufferbloat.net/attachments/download/227/openwrt-ar71xx-generic-wndr3800-squashfs-factory3.10.50-1.img
* ""All CeroWrt Builds"":http://snapon.cs.kau.se./~cero2/cerowrt/wndr/ (mirrored on""snapon"":http://snapon.lab.bufferbloat.net/~cero2/cerowrt/wndr/)

h2. Hardware Requirements

To minimize the effects of hardware dependencies, we have chosen the Netgear WNDR3700v2 and WNDR3800 as the sole hardware for the experiments. *Note:* The WNDR3700v3 and v4 models do _not_ work with CeroWrt; purchase the WNDR3800 if you want to be future-proof. 

The open source support for these two models is extensive, they have a capable processor with 16MB of flash and 64MB of RAM, they support a USB flash stick, they are inexpensive (around $100). The WNDR3800 has more RAM (128MB instead of 64), but either of these models will be fine for these experiments. As of October 2015, both the target router models have become scarce. You can search for ""WNDR3800"" on amazon.com, frys.com, ebay.com, etc. but might be better served by looking at the ""OpenWrt"":http://openwrt.org software which is available for a wide variety of common routers.

There are ubnt builds available as well, but specialized for a specific deployment scenario. Ask if you want them.

As noted above, OpenWrt and DD-WRT support fq_codel now in their QoS systems, so you can adopt one of the 150+ platforms supported there and see what happens.... YMMV, but please report here: [[Hardware_Reports_on_FQ_CODEL]]

h2. Documents

* [[Installation Guide]]
* [[CeroWrt_flashing_instructions|Flashing Instructions]]
* [[Automated Configuration of CeroWrt]]
* [[FAQ|Frequently Asked Questions]]
* [[How is CeroWrt different from OpenWrt?]]

h2. Tech Notes for CeroWrt

The following give detailed descriptions of CeroWrt's operation.

* [[Setting_up_SQM_for_CeroWrt_310|Setting up SQM]]
* [[device_naming_scheme|Default interface naming scheme]]
* [[Default_network_numbering|Default network numbering scheme]]
* [[Changing_your_cerowrt_ip_addresses|Changing IP, DNS, and SSID]]
* [[Monitoring CeroWrt|Monitoring CeroWrt with SNMP and NetFlow]]
* [[Using Bonjour, mDNS, or ZeroConf with CeroWrt]]
* [[IPv6 Tunnel|Getting an IPv6 address via Hurricane Electric Tunnelbroker.net]]
* [[CeroWrtScripts|Useful scripts to use with CeroWrt]]

h2. Older Information

The documents below describe the older Linux 3.7 and earlier builds.

* [[CeroWrt_37_Release_Notes|CeroWrt 3.7 Release Notes]]
* [[Building_Cerowrt_on_your_own_machine|Building CeroWrt on your own machine]] (tested for CeroWrt 3.3, not with CeroWrt 3.7)
* [[Setting QoS If You Can't Use CoDel]]

The [[Historical Documents]] page links to many documents that describe the history and earlier releases of the project.","",2015-11-29 16:41:10.38175,139
197,197,3,"h1. The Bloat-Lab concept

In our quest for getting duplicatable results, we've created a lab environment that can be easily replicated, inexpensively.

It consists of 9 routers, doubly connected to the Internet, a x86 based test and measurement box, a PDU, and a programmable switch.

They can be reconfigured in a variety of configurations.","",2011-08-11 15:30:30.201908,1
212,212,3,"h1. Dealing with smoketests, release candidates and the final release

The cerowrt development process is broken up into three phases - smoketests, release candidates, and eventual release.

h2. Smoketests

The smoketests will one day be daily automated builds. At present they are tests against fixed bugs, mostly.
YMMV. Do NOT work against a smoketest for anything serious.

A principal problem with smoketests is that they are totally unsupported and the package database
points at the rc catagory they will be. To get the additional packages you will need to point /etc/opkg.conf to the correct
the smoketest build directory.

h2. Release candidates

Release candidates are the more polished, fully tested versions of cerowrt as we march down towards a release.

h2. When will we get Cerowrt 1.0?

When all priority 1 and 2 bugs are fixed on the roadmap. Our hope was september 15, but we've missed that date considerably.

Oct 15 would be a good date to aim for.


","",2011-09-15 17:06:20.050183,1
160,160,3,"h1. ACK prioritization

In today's asymmetric internet environment up and download ratios can be as poor as 1 to 11. While this works well for situations where downloads predominate, it can cause terrible side effects on an otherwise healthy network when an upload saturates the connection, starving the downloads of needed ACK packets. 

Ratios worse than 11 to 1 appear to touch closely to the theoretical limit of ~23 to 1 that TCP/IP invokes in it's control stream.
This is why, in part, worse ratios haven't appeared in vendor offerings, as downloads are effectively throttled by upload bandwidth.

Since ack packets are very small (less than 72 bytes in ipv4 and less than 140 bytes in IPv6, depending on encapsulation), shaping methods that depend more on packets than bytes tend to suffer. 23 (ipv4) ack packets can fit into the same amount of buffer space as a single upload packet.

It is helpful from a policing perspective to look more at bytes than packets, for uploads in an asymmetric network, to determine what packets to best 'shoot'. Even then, the side effects of shooting an upload packet instead of 23 ack packets tend to be more beneficial than often realized. 

Lastly, no shaping system takes into account the up/download ratio in its decision making particularly well. 

Several tries exist - notably, wondershaper, which pioneered the concept of doing ACK prioritization for interactive ssh traffic back in 2002.  

* Note also that IPv6 changes the ack equation markedly - an encapsulated IPv6 6in4 ack packet can be as large as 140 (reference needed)","",2011-06-20 05:43:32.124975,2
198,198,3,"h1. Mesh Networking

The mesh networking component in CeroWrt has two components - AHCP, which hands out IP addresses, and babel - which manages determining the best routes available. A full blown mesh node can easily switch between multiple wired and wireless interfaces without losing long term tcp connections (notably ssh), and remain accessible via all interfaces via basically a fixed IP adddress.

By default, in order to co-exist with existing IP address distribution schemes, full mesh capability is not available, however, even partially implemented, it's useful.

The examples below assume that you are on the default IP addresses supplied by the router. Secondary nodes should have their entire subnets be different than the other nodes.

Mesh networking in cerowrt is not limited to babel and ahcp. Other mesh networking protocols are available as options, notably batman and olsr. In fact many other routing protocols are supported too, all the way up to and including BGP. The main rationale for babel and ahcp is that they are (unlike batman) layer 3 routing protocols and it is much easier to understand what is going on with those than layer 2 protocols. Some things are easier with layer 2 protocols, some are harder, ""all are interesting"":http://wirelesssummit.org ....

h2. Configuring mesh routing on the router(s)

The CeroWrt routers are configured as server mesh nodes by default. This may change in a future release. 

You will need to set at least one router up as an [[AHCP]] server in order for clients to obtain an ip address on the [[babel SSID]].  If they are connected via other means (wired, or wireless STA mode) the routers should have unique IP address ranges, and NAT disabled.

h3. On the server machine: 

Change /etc/config/ahcpd to have:

<pre>
        option 'mode' 'server'
        list 'prefix' '172.30.42.225/27
        # list 'prefix' 'fde6:20f5:c9ac:358::1/64'
        # Usually when I have a /48 to deal with, I set aside something like
        # the:fourtyeight:prefix:bab5::1/64 for ahcp 
        ## You can also setup a real or 6to4 ipv6 address prefix
        ## and/or use site-local ipv6
        ## list 'name_server' 'fde6:20f5:c9ac:358::1'
        list 'name_server' '172.30.42.224'
        ## list 'ntp_server' '192.168.4.2'
</pre>

You can have ahcp just distribute ipv6 addresses if you so desire. (this is useful when you only have a /64 to deal with, and in that case you have to disable radvd entirely and all ipv6 nodes have to run ahcp and babel to see each other)

Change /etc/config/network to look like this (or just let ahcp assing these with proto ""ahcp"", which is the default.

<pre>
config 'interface' 'gw11'   
        option 'proto' 'static'     
        option 'ipaddr' '172.30.42.224' 
        option 'netmask' '255.255.255.255'
                     
config 'interface' 'gw01'   
        option 'proto' 'static'
        option 'ipaddr' '172.30.42.224'
        option 'netmask' '255.255.255.255'
</pre>

If you are using babeld: If you are not using the default IP address ranges, you will need to modify /etc/babeld.conf to propagate the routes to those IP address ranges too.

If you are using quagga: the default gw to the internet needs ""redistribute kernel"" and ""redistribute static"" lines added to /etc/quagga/babeld.conf. In the case of 6to4, you may need to add a ipv6 default route to zebra. 

Restart networking and ahcpd. In the ahcp configuration file, you created a lease address range, starting one above the base number, In /etc/config/network, you will note that the IP address masks in are /32 masks, and the ip addresses assigned are that *same* base number. The babel protocol figures out where to send data based on ip/interface tuples in this case.

h3. On the client routers (or a server router, actually)

* YOU WILL HAVE TO RENUMBER. Choose a unique subnet number per router.

<pre>
cd /etc/config
sed -i s#172.30.42#172.30.SOME_UNIQUE_NUMBER#g * ../babeld.conf /etc/chroot/*/etc/named/*/*
sed -i s#42.30.172#SOME_UNIQUE_NUMBER.30.172#g /etc/chroot/*/etc/named/*/*
</pre>

Note: the above script is also useful for renumbering a server router.

You will definately need to reboot after running that script. 

Change the configuration to be client on /etc/config/ahcp (comment out everything else)

The client routers will automatically pick up an address from AHCP assuming at least one interface is on the same wireless channel as a server, 
and then route via the best route to the other routers. Also, get ntp and name service from the right place. 

Note that you can just configure all your routers as servers on unique ranges, serve up ahcp from all of them, and still have routes distributed via babel.

Client machines can then just wander from node to node.

h2. Using babel routing without ahcp

There is no strict need to use AHCP to distribute IPs so long as your address ranges are disjoint and babel is told what of the routers addresses to distribute. You can, in that case, dynamically assign addresses via dhcp - but make sure client routers have disabled NAT.

h2. Distributing an ipv6 default route via the main server via quagga

In quagga, there is an ongoing bug (#406) a workaround is to add lines like this to /etc/quagga/zebra.conf

<pre>
interface 6to4-ge01  ! the name of the 6to4 interface in this case
ipv6 route ::/0 2002:c058:6301:: ! the 6to4 default gw
</pre>

Other ipv6 mechanisms are similar, but you have to set the default gw and device correctly!

h2. Using ad-hoc mode under wireless on a linux laptop (simplest possible config)

iwconfig the_interface channel XX mode ad-hoc essid babel

I note that many older 5ghz machines do not do ad-hoc properly, and 2.4ghz needs to be used instead. Using ad-hoc mode, rather than managed, gives the ability to move between the highest performing local access points. 

So as an example for 2.4 ghz, assuming you are on channel 11 on the mesh router too, and you're not running Network Manager on this interface


<pre>
ifconfig wlan0 down
iwconfig wlan0 mode ad-hoc channel 11 essid babel # some devices require this in another order
ifconfig wlan0 up
iwconfig wlan0 mode ad-hoc channel 11 essid babel
# you can also toss these in the background using the -D option
ahcpd -L some_log_file wlan0 &
babeld -z3 -l wlan0 &
</pre>

so if you get an address, you should then be able to see tons of routes via:

<pre>
ip route
ip -6 route
</pre>

h3. Distributing your own default route

Routers that are connected to the internet can and should distribute their default route via uncommenting the default route in the /etc/babeld.conf file.

Mildly different procedure (as noted above) for quagga-babeld

h3. Co-existing with DHCP

Most network managers assume you can have the wired *or* wireless network connected. AHCP + babel assume you can have *both* connected. AHCP and DHCP can co-exist to some extent.

Furthermore most dhcp servers distribute a default route, which needs to be disabled in order to failover properly. With ISC dhclient, that involves changing the /etc/dhcp/dhclient.conf file
to not request the 'route'.

I turn off network manager in Linux entirely, because of these assumptions. You can leave it on if you want to co-exist with dhcp, but it helps to be running babeld and disable getting the default route, thusly:

Change from:

<pre>
request subnet-mask, broadcast-address, time-offset, *routers*,
        domain-name, domain-name-servers, domain-search, host-name,
        netbios-name-servers, netbios-scope, interface-mtu,
        rfc3442-classless-static-routes, ntp-servers;
</pre>

to:

<pre>
request subnet-mask, broadcast-address, time-offset, 
        domain-name, domain-name-servers, domain-search, host-name,
        netbios-name-servers, netbios-scope, interface-mtu,
        rfc3442-classless-static-routes, ntp-servers;
</pre>

You can also remove domain-name-servers and ntp-servers if you are providing that information via ahcp.

h3. Firewalls, NAT and babel

NAT and Firewalling is a pain in the arse as it breaks the end to end principle. Any place where you don't need a firewall or NAT (like on an internal router)
TURN IT OFF. the easiest way to disable firewalling on an interior router is to change all your policies in /etc/config/firewall to 'ACCEPT'. 

<pre>
config defaults
        option input 'ACCEPT'
        option output 'ACCEPT'
        option forward 'ACCEPT'
        option tcp_ecn '1'
</pre>

To disable NAT change the masq and clamp mss settings in that file to 0.

If (and only if) you disable nat and firewalling and want the external wan interface to be part of the mesh network, you will need to add the ge00 interface to /etc/config/babel (or for quagga, uncomment the relevant line in /etc/quagga/babeld.conf)

I have run into trouble with the default firewall even as it is. It really, really, really wants to firewall stuff.

I have ended up slamming this into /etc/firewall.user on some versions of cerowrt

<pre>

for i in gw11 gw01
do
for iptables in iptables ip6tables
do
$iptables -I FORWARD -o $i -j ACCEPT
$iptables -I INPUT -i $i -j ACCEPT
$iptables -I OUTPUT -o $i -j ACCEPT
done
done
</pre>


h3. A laptop configured via dhcp

The complexities of the babel protocol are hidden in the router, there is no need to run either ahcp or babel on any client machines. I personally like to run babel so I can see the health of my network on the laptop with a tool like ""babelweb"":http://www.pps.jussieu.fr/~kerneis/software/babelweb/ - here's the mesh network at [[bloatlab 1]] for example. http://io.lab.bufferbloat.net:8080/

h3. A laptop configured to be a partial mesh node

You run babel across all the interfaces you have, and ahcp across only the ones you want via ahcp. For example, in my case I have two radios in my laptop, the radios use different channels and get their addresses via ahcp, so as I move around, the best is chosen for routing...

h3. A laptop configured as a full mesh node would run 

(Both of these can be configured in a conf file)
<pre>
ahcpd -d interface interface interface # to get ip addresses on each 'interface'
babeld -z3 -l interface interface interface # to get routes across those interfaces
</pre>

In this case the laptop also can and will act as a router itself.

h2. Using mesh networking fully

You can serve AHCP across wired interfaces too. This makes moving between wired and wireless modes entirely transparent. However, client nodes also then need to run babel to get routes, as no default route is distributed (default routes are evil).

h1. Pure mesh networking

*TO HECK WITH ALL THIS BACKWARD COMPATIBILITY STUFF* I just want a pure mesh network.

Ya know, this used to be so much easier before I put in the backward compatibility stuff and just set these boxes up as a pure mesh backbone (as were my old nanostation M5s). You plugged it, you waved it around, and you were online.

Retrofitting it into cerowrt, will require a uci script to convert all the interfaces to AHCP only, among other things.

I want one button on the gui - make me a pure mesh node.","",2012-10-01 12:22:18.322529,31
227,227,213,"h1. Monitoring CeroWrt with SNMP and NetFlow

There are optional packages that allow you to install SNMP and NetFlow agents on CeroWrt. 

The [[Automated Configuration of CeroWrt]] page provides a script that (optionally) performs both these actions as well as allowing you to configure other aspects of your router in a single step. For reference, the GUI process for enabling SNMP and NetFlow procedures are documented here.

h2. Installing and configuring SNMP on CeroWrt

The Simple Network Management Protocol (SNMP) is a protocol that allows network management stations to retrieve operational statistics from CeroWrt. The snmpd package implements MIB-II for traffic statistics and system information; IF-MIB for detailed information about high-speed interfaces; the UCD-SNMP and Host Resources MIBs for processor, disk, and memory utilizations. To install and configure SNMP:

# Click the ""S"" tab on the _Available Packages_ page. Find the ""snmpd"" entry.
# Click the *Install* link for the snmpd entry to install the SNMP daemon. 
# Log in via ssh to complete these steps, or use the shell script below:
# To enable snmpd, type: @/etc/init.d/snmpd start@
# To force snmpd to start when the box reboots, type: @/etc/init.d/snmpd enable@
# This default install enables SNMPv1 and SNMPv2c with a default read-only community string of 'public'. 
# The /etc/snmpd/snmpd.conf file can be configured to change these parameters according to directions elsewhere on the web.

NB: the snmp data apparently only gets updated every 15-30 seconds. Consequently, it gives inaccurate results if it is probed more frequently. (This is especially obvious if you look at traffic counters. Two queries a few seconds apart retrieve the same value, thus the computed data rate appears to be zero. This is a known flaw in the OpenWrt package as well.) 

h2. Installing fprobe and configuring CeroWrt to be a NetFlow exporter

""NetFlow"":http://www.cisco.com/en/US/prod/collateral/iosswrel/ps6537/ps6555/ps6601/prod_presentation0900aecd80311f57.pdf is a Cisco protocol that permits a router or switch to send (_export_) a summary of recent traffic to a database (a _NetFlow collector_) for analysis. The NetFlow data allows a network manager to see who's sending or receiving traffic, what port(s) are being used, and make other judgements about network traffic.

fprobe is a CeroWrt package that makes the router act as a NetFlow exporter. To install and configure fprobe to send data to your designated collector address on port 2055:

# Click the ""F"" tab on the _Available Packages_ page. Find the ""fprobe"" entry. 
# Click the *Install* link for the fprobe entry.
# To start fprobe at boot time, click the System tab, and the Startup sub-tab. 
# Use the shell script below, or follow the rest of these steps:
# Scroll to the *Local Startup* at the bottom of the page and add the following above the ""exit 0"" line: 
@fprobe -i ge00 -f ip -d 15 -e 60 localhost:2055@
This monitors traffic on interface ge00, filtering (reporting on) IP traffic. The inactive flow timeout is 15 seconds, the active flow timeout is 60 seconds, and flow records will be sent to _localhost_ on port 2055. (You should change 'localhost' to the actual IP address of your collector.)
# (Optional) Log into the router via ssh, and enter the same command, restart the router to begin NetFlow Export, or use the shell script below

For more information, read the document:""fprobe man page""

h2. A script for automating snmpd and fprobe configuration

The following shell script automates the installation and configuration of snmpd and fprobe. The comments at the top show how to ssh into the router, paste the script into a file in /tmp, then run that file. Note that you should change _192.168.1.1_ in *both* fprobe commands to the address of your own NetFlow collector. 

The script has been moved to the [[Automated Configuration of CeroWrt]] page.","",2013-03-16 11:25:07.722241,10
166,166,74,"h1. Summer Camp 2011

h1. Location

Internet War Room
Third Floor
""Klaus Advanced Computing Building"":http://gtisc.gatech.edu/directions.html
""Parking Map"":http://pts.gatech.edu/PublishingImages/Parking%20Map.pdf (Area 4 is your best bet)


h1. Tentative Schedule

h2. Monday, July 11

|_.Time|_.Topic|_.Leader|
|1000|Introduction|Nick Feamster|
|1005|[[Camp2011-Tutorial1|Tutorial Day 1: Get a Router, Get Infrastructure in Place, Build CeroWRT]]|Dave Taht|
|1300|\2=.Lunch|
|1430|Bismark Brainstorm|Srikanth Sundaresan|
|1530|OpenFlow/OpenWRT Brainstorm|Yiannis Yiakoumis|
|1630|NOX@Home Brainstorm|Kyriakos Zafiris|

h2. Tuesday, July 12

|_.Time|_.Topic|_.Leader|
|1005|[[Camp2011-Tutorial2|Tutorial Day 2: Building Bismark on the Build Server]]|Dave Taht|
|1300|\2=.Lunch|
|1430|Applications Brainstorm|Nick Feamster|


h2. Wednesday, July 13

|_.Time|_.Topic|_.Leader|
|1005|[[Camp2011-Tutorial3|Tutorial Day 3: Doing Your Own Build]]|Dave Taht|
|1300|\2=.Lunch|
|1430|Breakout Groups|See Below|
|1730|[[app-brainstorm|Application Brainstorm]]|All|

h2. Thursday, July 14

|_.Time|_.Topic|_.Leader|
|1005|Tutorial Day 4: Cross Compiling|Dave Taht|
|1300|\2=.Lunch|
|1500|HoBBIT Brainstorm|Walter de Donato|
|1545|[[measurement-brainstorm|Measurements Brainstorm]]|Nick Feamster|
|1630|Logo, Architecture & Deployment Brainstorm|Nick Feamster|
|1700|Feedback/lessons learned/post-mortem|all|

h2. Friday, July 15

|_.Time|_.Topic|_.Leader|
|1005|Lab Setup|Dave Taht|
|1300|\2=.Lunch|
|1600|[[bismark-steps-jul15|Next Steps for Bismark]]|Nick Feamster|

h1. Discussion Topics

   * Platform
   ** PlanetBismark: Support for experimentation
   ** Support for OpenFlow, and what can be done with it
   * Measurements
   ** Wireless performance in the home
   ** Streaming performance
   ** Low-overhead bandwidth measurements
   ** Passive measurements (what kinds, and how?)
   ** Network neutrality / application performance monitoring
   ** Wireless mesh networking (e.g., getting bismark running on mesh potatoes, area deployments)
   * Apps
   ** Cap management
   ** Parental controls
   ** Application performance acceleration (e.g., speeding up Web downloads)
   ** Security (e.g., botnet IDS ""behind the NAT"")


h1. Participants

h2. Students and Postdocs
 
* Srikanth Sundaresan <srikanth@gatech.edu>
* Hyojoon Kim <joonk@gatech.edu>
* Yogesh Mundada <yhm@cc.gatech.edu>
* Nazanin Magharei <nazanin@cc.gatech.edu>
* Yiannis Yiakoumis <yiannisy@stanford.edu>
* Kyriakos Zarifis <kyr.zarifis@gmail.com>
* Jacopo Cesareo <jcesareo@CS.Princeton.EDU>
* Walter de Donato <walter.dedonato@unina.it>
* Marshini Chetty <marshini@cc.gatech.edu> (for lunch Monday)
* Xuzi Zhou <xuzizhou@netlab.uky.edu>

h2. Research Scientists

* Stephen Woodrow <woodrow@csail.mit.edu>
* Dave Taht <d@taht.net>
* Paul Royal <paul@gtisc.gatech.edu> (for parts)

h2. Faculty

* Ken Calvert <calvert@netlab.uky.edu> - Monday and Tuesday
* Alex Snoeren <snoeren@cs.ucsd.edu> - Monday and Tuesday
* Renata Teixeira <renata.teixeira@lip6.fr> - Tuesday onwards
* Russ Clark <Russ.Clark@gatech.edu> (for parts)
* Antonio Pescape' <pescape@unina.it> - not attending
* Jennifer Rexford <jrex@cs.princeton.edu> - not attending
* Keith Edwards <keith@cc.gatech.edu> - not attending



h2. Other

* Stevo <stevedude@bellsouth.net>
* matt <ur.matt@gmail.com>","",2011-07-15 21:15:59.541924,37
189,189,3,"h1. Using Alternate TCP algorithms

To see what TCP algorithms you can use:

<pre><code>cat /proc/sys/net/ipv4/tcp_available_congestion_control</code></pre>

And you can change it via

<pre><code>echo your_alternate_algorithm > /proc/sys/net/ipv4/tcp_congestion_control</code></pre>

Despite the path, this changes the algorithm for IPv6, too. By changing the algorithm, and running tests, you can more accurately simulate the behavior of the algorithms running on common desktop clients and servers. 

There is also an option we have not enabled yet - tcp_low_latency - which appears to help reduce bufferbloat, but we have insufficient data to turn it on, and turning it on will lower the degree to which we emulate more normal boxes.

please feel free to turn it on and get back to us with your results.","",2011-07-23 06:55:42.939509,2
193,193,3,"h1. What's the naming scheme?

All [[testlab]] machines orbit around the gateway box, [[Jupiter]]. When I setup the first testlab in May, Jupiter had only 63 moons. ""Now Jupiter has 64 moons"":http://en.wikipedia.org/wiki/Moons_of_Jupiter (mostly captured asteriods), so I would hope that would be enough names to use.

Power management is provided via [[Sol]].

h2. Specialties

[[Io]] provides a subnet to the subnet


h2. Available names

h3. Main machines

Ganymede, Callisto, Io, and Europa

h3. Amalthea Group

Metis, Adrastea, Amalthea, and Thebe. 

h3. Irregular satellites

""Themisto"":http://en.wikipedia.org/wiki/Themisto_(moon)
""Carpo"":http://en.wikipedia.org/wiki/Carpo_(moon)

http://en.wikipedia.org/wiki/Himalia_group

h3. Retrograde satellites:

http://en.wikipedia.org/wiki/Carme_group
http://en.wikipedia.org/wiki/Ananke_group
http://en.wikipedia.org/wiki/Pasiphae_group

h3. Cool names unused

http://en.wikipedia.org/wiki/Megaclite_(moon)","",2011-08-11 15:46:03.919638,3
157,157,3,"h2. (Qos) Save the ANTS, cope with MICE, and shoot the ELEPHANTS

HTB is probably the most commonly root qdisc in use today.

The shapers below it often ""shoot"" and drop packets in an indiscriminate fashion, paying no attention to traffic type whatsoever, except as configured by the person designing the QoS system. 

Shooting the statistically rare yet system critical packets - call them 'ANTS' - ARP, DNS, NTP, various routing protocols, DHCP, VPN, and various forms of icmp and (especially) icmp6 has no real effect on the overall load on a router, nor does it reduce bandwidth requirements, and in fact, in many cases (DHCP, VPN, DNS) results in MORE traffic, later, being sent, and often a reduction in user experience that can be quite noticeable (in the case of dns, dhcp, and vpns, in particular. DNS can fall back to TCP....)

Shooting (or, better, marking) a TCP packet instead can reduce bandwidth requirements by huge factors, and there are other protocols where shootdowns (SCTP, etc), has similarly multiplied effects.

Also, TCP MICE are hard to shoot right and have a desirable effect. 

Here are some [[Diffserv statistics|traffic analyses]], which can give you a feel for the ratios in one (atypical) home network.

So most shapers should make mildly greater efforts to avoid shooting system critical packets, choosing another packet whenever possible. Simply adding a two or three try mechanism for shoot-downs would nearly eliminate random loss of these types of packets. On the second (or third) try, shoot to kill, however, to avoid gaming the mechanism.

While correct usage of HTB would reduce this problem, by using multiple buckets for multiply classified targets, few classifiers/shapers in the field (try hard enough) (or have the tools to take better aim), so implementing better policy in the kernel would immediately improve the quality of userspace and linux networking.

Similarly, being able to clearly distinguish between Ants, mice and elephants is hard...

h2. Ants

Basically ! tcp suffices as an early match, except when it doesn't. Further classification gets complex, rapidly.

h2. TCP Mice

The existing conntrack mechanism has the interesting ability to measure the length of a TCP flow. It however, does not do a weighted average or some other 'mouse detection' feature like packets/quantum, so as a TCP flow that speeds up and down, cannot migrate from mouse to elephant and back again. Conntrack can only go from mouse to elephant and stay there, which is inappropriate for many protocols such as nfs/cifs filesharing, ssh, etc. That said, it's soooo close, and effective classification of mice to elephants would aid many shapers, several of which do try to use conntrack in this way.

A common hack in the field (openwrt, at least) is to rate limit syns, (often at very low values (25-50/sec are the openwrt defaults. Syn/ack pairs could be used as a predictor of future work load, or syns could be matched to fins.

Coping with the mice is a hard problem.

h3. Google Test - a,b,c,d,e

A very revealing test is what I call the google 'a,b,c,d,e' test - turn on 'google interfactive', start capturing packets, and hit a - wait, backspace b.... wait... c... d... e... 

And look at the ants, mice, and elephants. Note especially the ratios between successful synacks, the overall length of streams, the start times, the delays, and the other packet losses.

h3. Elephants

Once you can clearly distinguish between ants, mice and elephants, traffic shaping becomes easy. Shooting one elephant can save thousands of other packets... once you choose the right elephant from the herd.

h2. Enhancing ECN

Furthermore, ECN could be used in more cases by more shapers.

so adding a function, drop_or_mark_packet(skb, flag), where flag has the range 0 = SHOOT TO KILL, and 1..X where this marks what to not kill, would be a boon. Return values would be -1 error, 0 if dropped, 1 if marked, 2 if already marked 3..X if one of the reserved packet types.

Psuedocode for the logic would be:
<pre><code style=""c"">
if (v = drop_or_mark_packet(skb,0xFFFFFFFF) > 1) 
{ 
  skb = choose_another_packet(somehow);
  if ( v = drop_or_mark_packet(skb,0xFFFF) > 1) {
     skb = choose_another_packet(somehow);
     v = drop_or_mark_packet(skb,0);
  }    
}

switch(v) {
    -1) Do something about the error;
     0) Log as dropped;
     1) Log as marked; /* Adding a comprehensive 'marking' 
                          structure to the existing 'drop' 
                          statistics is beyond the scope of 
                          this proposal, so you can log as 
                          dropped for now */
}
</pre></code>
   
drop_or_mark_packet would make some attempts (matching against port number and protocol type) to not shoot the aforementioned packet types, except in the case where [[ECN]] marking can be used. It might be good to have a more flexible means of controlling this behavior rather than encoding this policy directly in the kernel, as no matter how good the default, the real world is more complex.

and again - this would merely try harder to not shoot the system control packets, ants and mice, but it will if it has to.

choose_another_packet(somehow) may be a non-trivial exercise for some shapers.  

Coping with TCP mice is a long difficult subject that needs to be dealt with in some other way, except that shooting fins and fin/acks seems rather counterproductive....","",2011-06-30 12:34:37.527282,28
173,173,3,"h1. 172.16.0.0/12 Allocation

We kind of hope to be fiddling with vpn technology at some point, to connect widely disconnected researchers together, much like how the early ARPA-net did the same for universities around the United States back in the early 1970s.

See [[bloat:BANA]] for more details. ","",2011-07-09 10:05:06.617736,1
199,199,3,"h1. Wiki

[[Cosmic Background Bufferbloat Detector]]

[[IPv6, AQM, Bufferbloat Testbeds]]

[[AQM Development]]

[[Test Development]]

","",2011-08-24 07:54:49.081914,1
191,191,213,"h1. OCEAN CITY README

h3. THIS DOCUMENT IS OBSOLETE

See the [[OCEAN CITY]] page.

Thx for trying to help solve some of the most difficult problems facing the future of the Internet!","",2012-01-28 17:57:43.077835,2
162,162,213,"h1. CEROWRT-1.0 ""OCEAN CITY"" RELEASE NOTES

h3. THIS DOCUMENT IS OBSOLETE

See the [[OCEAN CITY]] page.

h3. CEROWRT-RC6

These release notes apply to RC6 and may or may not apply to earlier release candidates. RC6 consists of:
* Linux kernel 3.0.4
* iptables 1.4.12.1
* wireless-testing 2011-09-14

as well as too many ""features"":http://cero2.bufferbloat.net/cerowrt/features.html to enumerate here.

Note that there are desired features that have not yet landed; e.g. IPsec tunnels, DHCPv6-PD, and completion of DNS support. The  DNS vision is that you should be able to plug a named machine into your network and its IPv6 address be automatically published into the global DNS without any manual configuration needed whatsoever.  This capability has been made to work in prototype form, but is not yet present in CeroWrt. Preliminary performance numbers for IPSEC were about 20MBPS on the WNDR3700, well beyond current commercial offerings costing much more. If you are so inclined, help with any of these would be greatly appreciated!

eBDP is not currently in Cerowrt; we are considering test builds in RC7 of this AQM algorithm. The current tuning of queue lengths may (almost certainly is) sub-optimal and not yet comparable to factory firmware for bandwidth performance.

# If you haven't installed a router yet, the current draft of the web pages on the router can often be seen at: http://cero2.bufferbloat.net/
# Performance testing has just begun and you may very well uncover a bug or a problem with default configuration which need to be fixed.
Note that this means that naive testing may produce unexpectedly poor bandwidth results: for example, when we were testing CeroWrt directly plugged directly into a gigabit network with 10G back haul, we saw poorer Large, Fat Network (LFN) router performance than the commercial firmware on identical hardware, due to our configuration for use in a more typical home environment. This is hardly surprising, as Linux drivers have been tuned extensively for use at that speed in data centers (to the detriment of latency); when re-configured identically to factory firmware, CeroWrt outperformed the commercial firmware in this example.
# Reduced TXQUEUELEN accoss all ethernet and wireless interfaces. Since this is a home router, when operating locally, delay is very low, so the queue can be short without losing TCP performance; when operating remotely, the upstream bandwidth limit means the buffering can again be low.  Transmit queues only need to be large when you have both high bandwidth, and high delay paths.
** Reduced buffering in the ethernet switch
** Reduced driver buffering across all ethernet and wireless interfaces
This initial tuning is probably too aggressive, and will be tuned further.
# There is ongoing performance testing against various smoketests going on in #262
We are in the VERY early stages of performance testing and have all sorts of variables - oprofile being enabled, HT40 not being enabled by default, queue lengths, lab setup, and problems with the tests themselves ... all left to resolve. Please draw no conclusions from the performance test results thus far, and note that rc6 contains the latest and greatest wireless-testing, not tested on bug #262.
# CeroWrt is still not independently buildable until the patch set settles some more and more patches pushed into OpenWrt head.
# Our current opinion is that HT40 should only be enabled by default at 5ghz only, and not at 2.4ghz, as it makes the router enough more noise sensitive as to probably cause too many people trouble (though will lab benchmark more poorly unless enabled, of course).  Differing opinions are welcome about this default choice.
# CeroWrt routes rather than bridges between networks.  It has an mdns forwarder to handle the case of a home network using MDNS to locate services.  ""A little multicast can ruin your whole day on wireless"".
# Note that the router is configured with [[default network numbering]] to use network 172 addresses to try to stay out of your existing network's way.  This may make renumbering if you have an existing static numbering plan in your house somewhat a challenge. We plan changes in RC7 so that the low addresses are left free for static numbering, as that is the most common configuration people have. If you modify your RC6 configuration for interface se00 (found in _/etc/config/network_) to enable access to low IP addresses, remember that you must also fix all references to 33 in your bind configuration files (found in _root@OpenWrt:/etc/chroot/named/etc/bind/master_) so that gw.home.lan will work.
# For IPv6, we are most concerned about the following bug: #266
** dibbler is in the RC6 build: volunteers to play with DHCPv6-PD and test would be great
** If the WAN interface is allocated a routeable IPv4 address (e.g. directly plugged into your broadband gear) the router will turn on 6to4 by default and advertise IPv6 routes. Please give us feedback as to whether this causes trouble.  Comcast has put in many more geographically dispersed 6to4 relays so using 6to4 is much less problematic than it was even a year ago often exhibiting very good performance and reliability on that network.
# The eBDP algorithm for wireless queue management is not yet present in CeroWrt builds; it awaits some further testing.
# QoS enabled by default; you _should_ tune your QOS settings for your connection as covered in the [[OCEAN_CITY_FAQ#How-can-I-improve-latency-problems-with-a-Cerowrt-router]], or you *will* have performance problems of some sort.
# Something like 20+ new packages are now available, including ""dibbler"":https://github.com/tomaszmrugalski/dibbler/tree/master/doc, ""gpsd"":http://gpsd.berlios.de/, ""nuttcp"":http://www.nuttcp.net/nuttcp/Welcome%20Page.html, ""pimd"":http://troglobit.com/pimd.shtml, and ""ccnx"":http://www.ccnx.org/.
# Mesh routing is in CeroWrt, using the ""Babel protocol"":http://www.pps.jussieu.fr/~jch/software/babel/ using bandwidth diversity and ""ahcp"":http://www.pps.jussieu.fr/~jch/software/ahcp/ for address distribution.
** Note that the router does *not* warn you in some trivial way (blinking light, highlight on the status page) that it may be meshed rather than using its WAN port. Feature #270
** Babeld updated to port 6696 and version 1.2 (incompatable change)
# Bugs #195 (ethernet unaligned transfers), #240 (ssh problems), #243 (iptables), #256 (ntpdate) are believed fixed in RC6 and are being tested.
# Bug #205 is a PITA for DNS lookup; the current workaround may slow boot by several minutes; there are fixes possible, but not in time for RC6
# Babeld moved to IANA port 6696 - this is a non-backward compatible change
# Addition of TCP background (BP) and TCP yeah algorithms
# Web10g support - note: we have not found a real use for this and may pull it from the next release
# Tcp_low_latency made the default
# IPv6 works now on the secured and unsecured interfaces by default
# Basic support for the cosmic background bufferbloat detector
# The ""roadmap"":http://www.bufferbloat.net/projects/cerowrt/roadmap?tracker_ids%5B%5D=1&tracker_ids%5B%5D=2&completed=1&with_subprojects=0&with_subprojects=1 has other known issues scheduled for resolution in RC7; please check that list before starting a new bug report


h2. [[cerowrt-1.0-rc7]] Plan","",2012-01-28 17:58:52.524215,38
268,268,3,"h1. What's the babel SSID for?

The ""babel"" ssid is used for ad-hoc mesh networking in cerowrt. ""babel"" is just a convention, any ad-hoc SSID would do. Other users use ""mesh"" or something generic like that. 

Cerowrt's mesh networking uses an alternative address distribution protocol ([[AHCP]]), rather than dhcp, which supports distributing ipv4, ipv6, ntp, and dns server information. It is how cerowrt routers (or any device using ahcp and babel) mesh together, if two are in range of each other, and on the same channel.

While it would be possible to make ""babel"" be a hidden, rather than announced, SSID, it seems to be best to make it visible and advertise its availability. Note that although a ""babel"" SSID might be available, you do have to set or autoselect the right wifi channel to use it from a host.","",2012-08-17 14:23:52.034301,3
152,152,3,"h2. Basic Diffserv Improvements to Linux

<pre><code>
[!] -m dscp --dscp-classes DSCPSET -j 
[!] -m dscp --clamp-to BE,DSCPSET -j a_trust_but_verify
</code></pre>

Where DSCPSET is of the form AF,EF,0x4,2,CS1,etc and becomes a 64 bit bitfield for matching purposes. Also the userspace distinction between

<pre><code>--dscp-class
--dscp</code></pre>

could be removed, as the codes are distinct from numeric values regardless, and several important existing classes of traffic are undefined by both the current implementation and RFC)

<pre><code>
-j CLASSIFY --set-priority-by-dscp offset
-j MARK --set-mark-by-dscp offset
</code></pre>

This extends the existing FWMARK and classifier targets to be more orthogonal.

h3. Protocols Match

It would be nice to also perform this kind of matching against a protocol set. The world is bigger than just udp and tcp, and with all the interesting protocols in the Linux kernel it would be good to easily be allow a few more of them out and in. As protocol is a 8 bit field, this leads to a 256 bitfield, which would be matched against in the 64 bit CPU case, probably close to 99.999999% of the time, at present.

h3. PROBLEMS

h4. IPtables vs IPset

in both of these cases, these problems and solutions fall between the flexibility of iptables (one protocol/dscp value or not one protocol/dscp value), and ipset, which can scale to 64k entries of various sorts. The first leads to very long chains for extensive protocol/dscp matching, the other is not part of ipset at present, and overkill.

Matching against sets in the range of 64 - 256 bits is best handled via brute force.

h4. Usage of filter vs mangle tables

Logically, you want to clamp incoming DSCP bits to just those your site recognizes as soon as possible, e.g. on the INPUT chain, or in TC, before it hits the mangle table. 

I am under the impression that mangling exists due to the effect on checksumming that playing with packets can induce, however, the DSCP/ECN fields are not included in checksums...

That said, being orthogonal between tc and iptables for classification of these sorts would be useful and would perhaps be able to share code.

h4. Modifying packets in match rule

See above. The usefulness here is in --clamp-to you can jump to a target based on the fact you clamped something, to further reclassify it.

h4. Possible 64 bit enhancements

Doing matches of this 64 bit match value can be made more efficient on 64 bit arches by simply using an existing (void *) in the skb as data.

The degree to which you cringe is dependent on how much you like kallocating and de-kallocating a 64 bit value and then dereferencing the resulting pointer in a high performance chain.

I don't see a clean solution at present for 32 bit arches besides allocating the value and treating it as a pointer, and for that matter may be misunderstanding something regarding the usage of this void value.
","",2011-06-30 12:10:17.623129,9
228,228,213,"h1. Cool things to do with a CeroWRT router

* Attach a USB drive for extra disk space, and turn your router into a web server.  The default server included in CeroWRT, 'lighttpd', supports multihoming, URL rewriting, and CGI scripting; the Lua language is installed by default, and Python can be added easily.  (I have a CeroWRT router hosting two websites with CGI, using an 8G thumb drive for storage space.)
* Run an authoritative DNS server -- it supports dynamic DNS and fully automatic DNSSEC signing.  (The same CeroWRT router hosts about a dozen signed domains.)
* Use it as a [[IPv6_Tunnel|tunnel endpoint]] and get your house running IPv6
* Install your favorite shell and editor and use it as a shell server","",2012-04-08 10:27:43.863555,2
192,192,3,"h1. BloatLab 1

This is one of the several [[public labs]] dedicated to fixing bufferbloat.

This lab is at the offices of the ""Internet Systems Consortium"":http://www.isc.org which is the home of the f-root server, ntp.org, the internet archive and many other wonderful projects. They have 10GigE connectivity to the internet.

Presently much of this lab has been dissembled and moved to [[yurtlab]].

IPv4, native IPv6 and 6to4 are being tested on a cluster of 7 routers, 2 switches, a pair of PDUs and a perfsonar machine, and a network measurement box, equipped with multiple gigE and wireless-n interfaces. There are also various other random (and growing) pieces of test gear - olpcs, windows XP boxes, 802.11b gear, etc.

In addition to the normal core machines, there are also 2 meshed cerowrt routers spread throughout their (very large) building, doing network measurements as well.

All machines are in the .lab.bufferbloat.net subdomain. DNS for the lab is served by jupiter.lab.bufferbloat.net, signed with dnssec, which is, of course, a cerowrt router, also.

The principal public facing routers (""jupiter"":http://jupiter.lab.bufferbloat.net and ""europa"":http://europa.lab.bufferbloat.net )  are equipped with strongswan and web and rsync servers for network measurements. Jupiter acts as a real-world native ipv6 gateway, europa used to act as a 6to4 gateway, and is now testing quagga-re. There is also a stock netgear router, also public-facing. 

There is a native IPv6 /48 network in place behind the routers, with quagga doing BGP multi-homing (one day). We are in the process of adding snmp monitoring tools.

io.lab.bufferbloat.net is an x86 box equipped with multiple gigE cards and a wireless card for comparison purposes on the same wire. 

Huchra.bufferbloat.net and shipka.bufferbloat.net, in the same data center are also in use for testing, but are used for production purposes.

All these machines have iperf and netperf running, although not configured the same all the time.
 
A ""babelweb instance"":http://io.lab.bufferbloat.net:8080 was used on ""io"" to monitor the health of the routers.

h1. Testlab Design

All internal IP addresses are of the form: 172.29.X.Y. 

For router's main addresses, Y=1 (cerowrt 3.3 and later) or Y=33. The NETworks are the 172.29.X.Z networks they serve.

The ipv6 subnets follow a similar scheme, except in hexadecimal

2001:4f8:fff8:0X00::/56 per router, where X = the X in the ipv4 address.

[[What's the naming scheme]]? Some more details on the [[machines|testlab machines]]

Note this document becomes inaccurate about 5 minutes after written.

See also [[using the testlab]]

h2. Servers

|Name|EXT IP|EXT IPv6|IP|NET|MAC|STATUS|Purpose|PDU PORT|
|[[Jupiter]]|149.20.63.18|2001:4f8:3:203::2|172.29.0.33|16||UP|Cerowrt GW, primary DNS server||
|[[Europa]]|149.20.63.19|2001:4f8:3:203::13|172.29.1.33|22||UP|Cerowrt GW||
|[[Io]]|149.20.63.20|2001:4f8:3:203::14|172.29.X.Z|UP|Ubuntu 11.10 test/measurement server||
|[[Carpo]]||||IN progress - underconfigured|Perfsonar x86 data collection box||
|[[Carme]]||||IN progress - underconfigured|freeswitch and load generator||
|[[Callisto]]||||IN progress - underconfigured|openwrt build bot||

|[[Sol1]]||172.29.0.34|||Lab|PDU|||
|[[Sol2]]||172.29.6.34|||Lab Office|PDU|||

h2. Clients

|Name|IP|NET|MAC|STATUS|Purpose|PDU|Assigned|
|[[Thebe]]||2||UP||||
|[[Leda]]||19||UP||||
|[[Elara]]||20||UP||||
|[[Aitne]]||22 ||UP||Testgw|Dtaht|
|[[Netgear-stock]]|21 |||||||
|""veryremote"":http://veryremote.lab.bufferbloat.net|21 |||||||
|""rc6smoke"":http://rc6smoke.lab.bufferbloat.net|21 |||||||

h2. TBD

|Name|IP|NET|MAC|STATUS|
|TBD||||NETGEAR stock Firmware|
|TBD||||Buffalo Stock Firmware|


!attached_t.svg!

","",2012-10-01 21:27:18.903656,18
200,200,3,"h1. Cosmic Background Bufferbloat Detector

h2. Abstract

h2. Detailed Proposal","",2011-08-24 07:56:56.713447,1
284,284,3,"h1. How is CeroWrt different from OpenWrt

Our goal is to build a test tool for the internet edge rather than a home router. Although CeroWrt can be used as such, it is not our primary goal. We encourage you to install the software on a spare router before committing to using it day to day - and compare it against your existing router, first. In the extensive testing, CeroWrt has been extremely reliable, faster than stock router firmware, and provides a good proof-of-concept that Bufferbloat can be conquered by simple, but powerful algorithms.

CeroWrt has incorporated the latest Linux 3.10 kernel modifications which have many defenses against bufferbloat. Other major differences between OpenWrt and CeroWrt:

* all interfaces are routed, not bridged, 
* there is a full blown dnssec enabled server, with mDNS/Bonjour enabled for ease of device/service discovery,
* the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] differ significantly from what you may be used to. 

The ""Onboard documentation"":http://cero2.bufferbloat.net/cerowrt/about.html has far more detail as to what's in the software. 

h2. Core things you should know

h3. Default Password

The router has a default, rather than empty, password.

login: root
password: Beatthebloat

Do change it on installation, and even better, put your ssh key on it and disable password access entirely.

h3. IP addresses & DNS

CeroWrt is a test platform, and as such we wanted it to co-exist within existing networks as best as possible, without conflicting with an existing network, and to not require NAT in order to function inside that network. NAT skews some test results horribly.

Since there is no public IP address space left, 10 networks are being increasingly used as backbone networks, and 192.168.X is most likely a number you are already using on your existing network, we chose the 172.16.0.0/12 range to play in. The default address for the router is 172.30.42.1. Each of the interfaces has a /27 subnet from this range by default - this allows 30 addresses per interface, a sensible limit for home/edge routers. 

It is ironic that this is the last piece of 'free' IP address space left. See also [[bloat:BANA]].

If you find this IP hard to remember or type, dns is enabled by default for a virtual subdomain of 'home.lan. You should be able to get to it via gw.home.lan if you get dhcp from the router. Changing the default ip address ranges is difficult to do via the web interface and we suggest you stick with it for a while until you understand the reasoning, firewall, routing, and naming rules. (See DNS note below).

If you are running this inside your network, and not as your default gw, configure your default gw to statically assign an ip address, and route your subnet to the CeroWrt router, and turn off NAT.

See also the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] pages for more information.

h3. Device/Interface Naming

We use an unusual [[device naming scheme]] to manage multiple kinds of wireless devices. Instead of using eth0, eth1, wlan0, etc. the interfaces have names that more accurately reflect their actual use. Prefixes use Wireless vs. Ethernet and Secure, Guest/Gateway, or DMZ. As noted above, each of these interfaces has a /27 subnet assigned. Thus: 
* ge00 is the Gateway Ethernet; 
* se00 is the first Secure Ethernet (LAN) interface; 
* sw00 is the first Secure Wireless interface at 2.4GHz; 
* gw10 is a Guest Wireless interface at 5.x GHz;
* etc.

See also the [[device_naming_scheme|default naming scheme]] and [[default_network_numbering|default numbering scheme]] pages for more information.

h3. QoS - You NEED to set it

OpenWrt needs to set QoS for best performance. The defaults of CeroWrt work pretty well. Use the [[Setting Up SQM for CeroWrt 3.10]] procedure for better results.

h3. IPv6 is enabled *BY DEFAULT*

When connected to a real IPv6 address on a gateway, if CeroWrt doesn't 'just work', we want to know about it. ","",2014-07-29 14:56:05.937979,5
172,172,6,"h1. Sysupgrade

Once a box already has openwrt or cerowrt on it, you can reflash via the web based utility. Generally, to be safe, it's a good idea to use the command line tool.

The _-sysupgrade.bin_ image is always used when upgrading OpenWrt (CeroWrt) images, e.g. _openwrt-ar71xx-generic-wndr3700v2-jffs2-sysupgrade.bin_.

<pre><code>
cd /tmp
wget the_image_file (located at http://huchra.bufferbloat.net/~cero1/_the release candidate_/
sysupgrade -d 60 -n the_image_file </code></pre>

Enough is in flux in CeroWrt for it to be a good idea to always reflash from scratch, and then selectively install your customizations from a backup of /etc.

*You do have a backup, don't you?*

","",2011-09-06 15:12:02.399879,7
202,202,3,"h1. Cerowrt-1.0-rc7 (preliminary plan)

INCOMPATABLE CHANGE TO 172.30.42.1 as the main gw interface
TOS setting as per bug #249 (Comprehensive QoS settings?)
Switch to vlans throughout?
HT40+ mode on 5ghz, channel 157
Web10g support decision - keep or kill?
Tcp_low_latency explored vs tcp non-low latency
Syn/Synack queue optimization?
vlan priority harmonized with 802.11e priority?
Independently buildable (perl)
ECN iptables changes 
Elemental diffserv support
more support for the [[cosmic background bufferbloat detector]]

Fixes for bugs #240, #252, #242, #233, #239, #98, #113, #262 - 

And see also ""roadmap"":http://www.bufferbloat.net/projects/cerowrt/roadmap for bugs in the queue","",2011-09-24 08:59:19.095496,12
156,156,3,"h2. Diffserv Linux Improvement Overview

In my efforts to improve QoS possibilities under Linux by fully implementing ""RFC4594"":http://tools.ietf.org/html/rfc4594 I've come to understand why it hasn't been tried.

(See git repo at https://github.com/dtaht/Diffserv for the test implementation which attempts to update RFC4594 for modern conditions in the home and business. The scripts therein will clearly show why I'm suggesting some of these new iptables (and/or tc) matches and targets.)
 
Adequate DSCP classification rules can number in the hundreds using straightforward existing iptables methods, or thousands with existing tc methods. Where iptables is like programming in symbolic assembler, tc is like coding in machine language.

In early testing of an iptables version, my first attempt cut the performance of a given router from ~140Mb/sec to 42Mb/sec.

And yet: it seems very possible to make DSCP classification highly performant as the 6 bit value therein maps conveniently into 64 bit bitmaps.

So many problems can be solved by some new iptables or tc matches and targets. 

So here are my thoughts. Perhaps code to do some of this sort of stuff already exists out of tree?

RFC4594 rigorously attempted to avoid making any given traffic class predominant over another - EF traffic is suggested to be limited to 30% of available bandwidth, for example - the goal was to produce fairness between flows, as is mine. I'd like to be able to listen to internet radio, while others in my family are uploading to facebook, watching movies from netflix, and making phone calls and playing games.

In reading the following discussion it is very useful to have the relevant rfc, and the manual pages for iptables and ip6tables and tc handy. Some familiarity with all this concepts is required as well as a mental model as to how the Linux networking stack actually functions. For a large diagram of the below chart, see http://l7-filter.sourceforge.net/PacketFlow.png 
 
!http://l7-filter.sourceforge.net/PacketFlow.png!

You'll note it elides the complexities of the various tc qdiscs, filters, and policers, and the complexities of the networking device drivers themselves. A flow diagram of each would also take pages to describe!

Anyway, it is interesting and useful to try classifying your own traffic using the diffserv_dbg script as provided in the Diffserv repository. I would appreciate [[Diffserv Statistics|a look at your results]] (particularly the ANT packets overall, and icmpv6 packets) via <pre><code>iptables -v -t mangle -L
ip6tables -v -t mangle -L 
iptables -t filter -L
ip6tables -t filter -L
</code></pre>
in order to see why, in part, I feel extensive classification is more necessary today than ever before.

The largest problem with the design as it stands is that the initial classification rules should probably take place within the tc subsystem. The problem there is that tc is even more primitive than iptables. A subsequent version of this proposal will attempt to use tc to solve many of these problems.","",2011-09-02 12:04:22.422301,15
168,168,213,"h1. OCEAN CITY - READ THIS FIRST!

The Ocean City release was intended to be an massive release, fixing all known bugs and implementing all desired features. Our desire exceeded our reach, and we chose to pursue significantly scaled back (but still important) goals described elsewhere. These documents - devoted to the Ocean City release - are now obsolete:

* [[OCEAN CITY|Obsolete - OCEAN CITY READ THIS FIRST]] (This page)
* [[OCEAN CITY README|Obsolete - OCEAN CITY README]]
* [[OCEAN CITY RELEASE REQUIREMENTS|Obsolete - OCEAN CITY RELEASE REQUIREMENTS]]
* [[OCEAN CITY RELEASE NOTES|Obsolete - OCEAN CITY RELEASE NOTES]]
* [[OCEAN CITY INSTALLATION GUIDE|Obsolete - Installation Guide]]
* [[OCEAN CITY FAQ|Obsolete - FAQ]]
* [[OCEAN CITY old News Item - rc7 slipping]]
* [[OCEAN CITY old News item - rc6 (beta 2) is suitable for beta testing]]
* [[OCEAN CITY old News Item - rc5 is suitable for testing]]

ALL CURRENT INFORMATION ABOUT CEROWRT IS ON THE MAIN [[WIKI]] PAGE.

h2. How CeroWrt is different from OpenWrt

Our goal is to build more of a test tool for the internet edge than a home router - although it can be used as such. We encourage you to install the software on a spare router before committing to using it day to day - and compare it against your existing router.

The ""Onboard documentation"":http://jupiter.lab.bufferbloat.net/cerowrt/about.html has far more detail as to what's in the software.

Major differences between OpenWrt and CeroWrt - all interfaces are routed, not bridged, there is a full blown dns server, and the ip address scheme and device naming scheme differ significantly from what you may be used to.

Aside from that, most of the core stuff in CeroWrt is now in OpenWrt.

h2. Core things you should know

h3. Default Password

The router has a default, rather than empty, password.

login: root
password: Beatthebloat

Do change it on installation, and even better, put your ssh key on it and disable password access entirely.

h3. IP addresses & DNS

CeroWrt is a test platform, and as such we wanted it to co-exist within existing networks as best as possible, without conflicting with an existing network, and to not require NAT in order to function inside that network. NAT skews some test results horribly.

Since there is no public IP address space left, 10 networks are being increasingly used as backbone networks, and 192.168.X is most likely a number you are already using on your existing network, we chose the 172.16.0.0/12 range to play in. The default address for the router is 172.30.42.1. Each of the interfaces has a /27 subnet from this range by default - this allows 30 addresses per interface, a sensible limit for home/edge routers. 

It is ironic that this is the last piece of 'free' IP address space left. See also [[bloat:BANA]].

-If you find this IP hard to remember or type, dns is enabled by default for a virtual subdomain of 'home.lan. You should be able to get to it via gw.home.lan if you get dhcp from the router. Changing the default ip address ranges is difficult to do via the web interface and we suggest you stick with it for a while until you understand the reasoning, firewall, routing, and naming rules.- (See DNS note below).

If you are running this inside your network, and not as your default gw, configure your default gw to statically assign an ip address, and route your subnet to the CeroWrt router, and turn off NAT.

h3. Device/Interface Naming

We use an unusual [[device naming scheme]] to manage multiple kinds of wireless devices. Instead of using eth0, eth1, etc. the interfaces have names that more accurately reflect their actual use. Prefixes use Wireless vs. Ethernet and Secure, Guest/Gateway, or DMZ. As noted above, each of these interfaces has a /27 subnet assigned. Thus: 
* ge00 is the gateway ethernet; 
* se00 is the first LAN ethernet interface; 
* sw00 is the first secure wireless interface at 2.4GHz; 
* gw10 is a guest wireless interface at 5.x GHz;
* etc.

h3. IPv6 is enabled *BY DEFAULT*.

If - when connected to a real ip address on a gw, it doesn't 'just work', we want to know about it. 

h3. Security

The bind9 DNS installation is as hardened as possible, running in a chroot jail, respawning from xinetd. (but see DNS note below).

Multiple services are enabled 'in' by default, notably http, https, ssh, & rsync. DNS allows in the entire 2002 address range into the 'us' DNS view, this should be restricted to just your 2002/48 lan. 

From here, please move on to the [[OCEAN CITY INSTALLATION GUIDE|download and installation guide]].

h3. NB re: DNS

The bind/DNS code of recent builds of CeroWrt (e.g., bql and rc8 builds) is not functional. For example, these builds do not support the *.home.lan dns names.


","",2012-03-17 09:32:25.306889,19
243,243,3,"h1. Bismark Tools


h3. Bismark-active

bismark-active (and its dependencies) is probably the only package
that's generally relevant. All of the other ones are fairly BISmark
specific or have privacy/human subjects research implications. You may
find some of them (i.e. bismark-lua) interesting, however.

Let us know if you've got any questions.

--steve

We've spent some effort making it easier to load packages containing
temporary experiments on the router, from a changing set of experiments
published by Georgia Tech, as well as allowing users to opt into/install
these packages on their own. This is provided by:

   bismark-experiments-manager
   bismark-updater

Packages with names ending with '-tmpfs' are installed on /tmp, and so
can be installed/updated frequently. bismark-updater handles updating
experiments packages and other packages identified for update
automatically.

Active measurements are essentially the same, except we have a -tmpfs
package for the experiment manager above:

   bismark-active
   bismark-active-tmpfs

We've ditched scp in favor of a POST to an HTTP URL for data
transmission back to Georgia Tech. This is provided by:

   bismark-data-transmit

BISmark on-router web pages -- same idea as cerowrt-chrome:

   bismark-chrome

Our Lua libraries (bmlua.*):

   bismark-lua

Management/remote control stuff -- bdm prober, ssh key, and ssh tunnel
setup stuff, as before:

   bismark-mgmt

Metapackages to pull in a bunch of network measurement tool packages and
other useful tools, respectively -- see the DEPENDS:

   bismark-netexp
   bismark-extras

### NOTE WELL -- PLEASE _DO NOT_ BUILD THE FOLLOWING:
###
### The following three packages, containing 'passive' in their name,
### require documented consent of users to participate in a Georgia Tech
### research project associated with software packages. Please do not
### build these or make them available. If you know of someone
### interested in these projects, please have them contact us to
### participate.
###
### These two packages gather information passively from traffic passing
### through br-lan, including MAC addresses, packet size and arrival
### times, and volumes of traffic to/from particular ports and
### particular (whitelisted) domains. ""http-url"" also includes a hash of
### the URL for HTTP traffic.
###
###    bismark-passive-http-url-tmpfs
###    bismark-passive-tmpfs
###
### ucap is a tool that allows users to manage bandwidth caps in the home
### network using openflow -- it also does passive traffic analysis.
###
###    bismark-passive-ucap

Deprecated (and we should remove them):

   bismark-chrome-new
   bismark-lite

","",2012-03-31 09:00:33.948285,1
213,213,3,"h1. Why 81?

Actually we could have used nearly any other port besides 80 or 443. We wanted to move 'configuring the router' to it's own interface and allow 'using the router' to include your own web pages and interfaces.","",2011-09-19 14:19:13.138573,1
181,181,49,"h1. Application Brainstorm


Different types of users: home users and researchers.

Toolkit for building applications?  Could have a router platform for allowing other users to develop without knowledge of or access to the low-level Apis, similar to how people develop applications for iPhone.

Seattle, Scriptroute, etc.  Compare to the POX design.  

First step could be to start with a limited problem domain and design the API around it.

Privacy of data collected.  Guarantee privacy of collected information with information flow control.

Control: home automation.  Does an openwrt router support zwave or any home automation type thing?  Could couple with home automation?  Use network router to track human activity and then couple with a control system.

Take Keith's findings about what network features are useful for determining human behavior and then use that as a basis for an API.

Two parts to the API: monitoring and control.  What kind of questions to ask for each type?  

Is it worth doing a survey to figure out the types of things people would like to know from their home network, and the types of things they would like to control.  Conduct a broader survey?

Would certain types of queries impose storage requirements?

Version control for router configurations.  Provide for the users in the cloud.  Configuration management for home networks?

USB stick for extra storage.  Caching for updates.  Caching for improving performance of different applications.

Simultaneous high bandwidth downloads introducing interference? Time shifting big downloads?

What to cache?  Advantages to caching on the gateway versus caching on the browser?

What problems will go away? Latency is pretty fundamental but doesn't apply to all applications.  Throughout may be a longer-term issue.

Questions for netgear?

Diagnostic tool for the web interface to let users run an instant diagnostic

1. End users:

2. Researchers:
Building better tools
Creating interfaces
Using the platform as a tool to monitor human behavior
","",2011-07-14 05:44:46.857049,1
180,180,122,"h1. Netperf

Dtaht suggested that we consider netperf instead of or in addition to iperf for the following reasons:
* netperf doesn't require the server process to be running constantly, as it can be instantiated by xinetd.
* netperf reports cpu usage on client and server which is useful in CPU-constrained environments
* netperf rus tests over both TCP and UDP
* netperf has a number of tests that can be run

Users on the internet have reported higher reported throughputs using netperf than when using iperf, for the exact same setup and devices.

h2. Using netperf

h2. Porting and testing bleeding-edge netperf

We downloaded the subversion HEAD (http://www.netperf.org/svn/netperf2/trunk/) and created a netperf package using this source, based on the existing openwrt netperf package.

We installed this packaged netperf (netperf-latest) on two wndr3700v2 boxes, as well as netperf 2.4.4 as packaged by Ubuntu running in VMs on the hardware specified below.

Ran netperf between the following:   (see bottom for device specifications)

1) HOST1 -> HOST2
<pre>
kyriakos@zenith:~/Desktop/bismark-summercamp/netperf/trunk/src$ ./netperf -H 172.31.8.115 -c -C
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.31.8.115 (172.31.8.115) port 0 AF_INET 
Recv   Send    Send                          Utilization       Service Demand
 Socket Socket  Message  Elapsed              Send     Recv     Send    Recv
 Size   Size    Size     Time     Throughput  local    remote   local   remote
 bytes  bytes   bytes    secs.    10^6bits/s  % S      % S      us/KB   us/KB

 87380  16384  16384    10.37         4.11   0.96     0.19     19.217  3.866  
</pre>

2) ROUTER1 -> HOST2
<pre>
root@gw:/tmp# netperf -H 172.31.8.115 -c -C
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.31.8.115 (172.31.8.115) port 0 AF_INET
Recv   Send    Send                          Utilization       Service Demand
Socket Socket  Message  Elapsed              Send     Recv     Send    Recv
Size   Size    Size     Time     Throughput  local    remote   local   remote
bytes  bytes   bytes    secs.    10^6bits/s  % S      % S      us/KB   us/KB

 87380  16384  16384    10.07         4.21   29.00    1.00     565.055  19.390 
</pre>


3) ROUTER1 -> ROUTER2
<pre>
root@gw:/tmp# netperf -H 172.31.8.33 -c -C
MIGRATED TCP STREAM TEST from 0.0.0.0 (0.0.0.0) port 0 AF_INET to 172.31.8.33 (172.31.8.33) port 0 AF_INET
Recv   Send    Send                          Utilization       Service Demand
Socket Socket  Message  Elapsed              Send     Recv     Send    Recv
Size   Size    Size     Time     Throughput  local    remote   local   remote
bytes  bytes   bytes    secs.    10^6bits/s  % S      % S      us/KB   us/KB

 87380  16384  16384    10.07         4.23   29.49    32.41    571.139  627.530 
</pre>




iperf between HOST1 -> HOST2 for comparison:
<pre>
kyriakos@zenith:~$ iperf -c 172.31.8.115
------------------------------------------------------------
Client connecting to 172.31.8.115, TCP port 5001
TCP window size: 16.0 KByte (default)
------------------------------------------------------------
[  3] local 10.0.2.15 port 51176 connected with 172.31.8.115 port 5001
[ ID] Interval       Transfer     Bandwidth
[  3]  0.0-10.1 sec  5.20 MBytes  4.33 Mbits/sec
</pre>



HOST1:
  Model Name:	MacBook Pro
  Model Identifier:	MacBookPro6,2
  Processor Name:	Intel Core i5
  Processor Speed:	2.53 GHz
  Number Of Processors:	1
  Total Number Of Cores:	2
  L2 Cache (per core):	256 KB
  L3 Cache:	3 MB
  Memory:	4 GB
  Processor Interconnect Speed:	4.8 GT/s
  Boot ROM Version:	MBP61.0057.B0C
  SMC Version (system):	1.58f16
  Serial Number (system):	W8023204AGY
  Hardware UUID:	519F0E32-09F0-5FB2-9BEA-A5A410ECACE3
  Sudden Motion Sensor:
  State:	Enabled
  Interfaces:

en1:
  Card Type:	AirPort Extreme  (0x14E4, 0x93)
  Firmware Version:	Broadcom BCM43xx 1.0 (5.10.131.36.9)

virtualization:
  Sun VirtualBox, NATed network

HOST2:
Model Name:	MacBook
Model Identifier:	MacBook6,1
Processor Name:	Intel Core 2 Duo
Processor Speed:	2.26 GHz
Number Of Processors:	1
Total Number Of Cores:	2
L2 Cache:	3 MB
Memory:	4 GB
Bus Speed:	1.07 GHz

en1:
  Card Type:	AirPort Extreme  (0x14E4, 0x93)
  Firmware Version:	Broadcom BCM43xx 1.0 (5.10.131.36.9)

virtualization:
  VMware Fusion, bridged network","",2011-07-14 15:18:44.473698,15
310,310,3,"h1. Hardware Plan

Presently the most open wifi drivers are those based on the ath9k chipset. All other drivers contain binary blobs in precisely the places we need to hack on, and are currently unsuitable for further development.

We MAY acquire a firmware license to deal with one or more 802.11ac chips.

The initial work will be x86 based, as the compile, test, debug cycle is shorter on that sort of hardware, and we envision several new features that might require a faster processor than what is commonly found in existing access points.

A [[RFP]] or two will be issued to find more suitable hardware in the long run, and it may turn out that custom hardware will be necessary.

While the initial work will be focused on 802.11n and later, some resources will be expended to look harder at 802.14 based systems, as well as LTE, in the hope of unifying the stack and requirements.

h2. Hardware options

We are evaluating several platforms for future work:

h3. x86_64 (rangeley)

http://www.supermicro.nl/products/motherboard/Atom/X10/A1SRi-2558F.cfm
http://www.compex.com.sg/productdetailinfo.asp?model=WLE350NX&acc1Panel=1
http://www.zcomax.co.uk/products/index.php/products/wlan-module/802-11ac-minipci-e-module
http://www.streakwave.com/Itemdesc.asp?ic=RB14e&eq=&Tp=

h3. Qualcom/Atheros

h3. RALINK

h3. Lantiq



","",2014-09-03 12:39:37.735131,2
20,20,3,"h1. Bloated Device Drivers

Reducing your [[Dark Buffers]] requires some work analyzing the device drivers involved. The amount of default buffering the device driver does can be deduced from looking at the source code, or inferred by performing [[Experiments]] on your systems. 

Please help us improve this list!

* THIS PAGE IS TOTALLY OBSOLETE * Learn about BQL fq_codel 

h2. Linux

Under Linux, you can measure your dark buffers by turning the txqueuelen parameter on the ethernet interface to 0.

A good number for txqueuelen used to be dependent what [[traffic shapers|traffic shaping]] you are doing and the depth of your device driver buffers as detailed below. If you aren't doing any - 4 - seems to be a good starting figure for home gateways and wireless laptops.

ifconfig eth0 txqueuelen 4
ifconfig wlan0 txqueuelen 4

However in the case of ethernet,current (3.5 and later) linux kernels use BQL, which eliminates the need for the above hack. Then you can layer fq_codel on top of it.

Wifi is still a mess however.

But that is just the start. The real problem lies underneath these buffers, at the device driver layer.

h3. Ethernet

|Driver|Where found|Buffers|Mitigation|Patches|
|e1000e|Laptops|256|ethtool -G eth0 tx 64|None|
|kirkwood|Openrd,Various Plug computers|256|ethtool -G ethX tx 20|None|
|ar7100|WNDR5700, Nanostation M5|64|None|None|

h3. Wireless

|Driver|Where found|Buffers|Mitigation|Patches|
|ath9k[1]|WNDR5700, Nanostation M5|512, multiple queues|32 w/patch|Much better in cerowrt, out of tree patches|
|IWL|Laptops|256|None|In progress|

h2. Mac

h2. Windows

h2. Notes

fn1. The effective queue depth per each of the 10 queues, with this patch, is 3.","",2012-11-20 12:48:36.363926,15
229,229,3,"h1. Cerowrt 33 Build

THIS IS A DRAFT on a rapidly changing procedure

h1. what is feeds.conf?

Openwrt uses multiple package databases, which gives you flexibility as to what software you use, where. 
Feeds.conf is a pointer to each package database wherever it might live. In my case I tend to use
a staging area for each package database, rather than pulling directly from the main repositories.
This lets me do multiple different builds for different hardware without having to 'push up'
potentially incorrect packages to the mainline.

h2. What did you do when you edited it?  

I changed the paths to point to your home dir rather than mine

h2. what do 'feeds update' and 'feeds install' do exactly? 

./script/feeds update calls the appropriate update utility for each package repository, to get the freshest bits.
for example, it calls 'git pull' for git repos, and 'svn up' for svn repos.

./script/feeds install package package package

installs symbolic links to the build system for each package

feeds install -p feedname package

at least in theory installs a package that is a duplicate of some other package in some other repo.
It's usable for when you have a more advanced package in a different repo and want to use that instead.


h1. what is ""env new each""?  

This created your own branch of the filesystem to play in. For example, you
might want to change the default download dir for packages in your own build
by editing env/files/etc/opkg.conf

h2. what is stuff.tgz?  

This was a temporary tarball of the current cerowrt filesystem. In the future
it and it's tags and branches will be public.

h2. when you did the git add; git commit -m 'each tree', what was that about?  

h1. what is 'dl'?  

The dl directory is where tarballs of sourcecode lives. Openwrt does not carry copies of all the source it builds. It relies on external repositories to keep the 2+ gbyte of that. In order to speed up builds, I tend to symlink this directory to ONE directory elsewhere, so that I can maintain multiple versions of the cerowrt builds
and only one copy of this huge directory.

h1. what did you do in .config?  

Checked for correctness. I think I also added a few packages that are not in the main packages.list.

h1. what's make menuconfig?  

Menuconfig lets you via a menu interface add packages to build, remove packages, and configure various options.
It is a very good idea when making manual changes to .config to run make menuconfig to make sure all the
dependencies are pulled in correctly. It also does essential syntax checking. 

if you just want something scriptable, make (can't remember) - will rebuild the dependencies for you without
invoking any menus.

h1. why did you run make menuconfig multiple times?

It's a good idea to clean up and compare the .config file vs the supplied one until it is correct.

h1. what you were editing in linux/ar71xx?

In this case, I am building against 3.3, not 3.2.5, so I changed the makefile to point at the current release candidate for Linux 3.3 - 3.3-rc3

h1. Basic steps to build cerowrt-3.3

<pre>

mkdir src
cd src
git clone git://nbd.name/openwrt.git # the main openwrt repository
git clone git://nbd.name/packages.git # the main additional packages database 
git clone git@github.com:dtaht/ceropackages.git # cerowrt's added packages
git clone git@github.com:dtaht/cerowrt-luci.git luci # cerowrt's web gui interface
git clone git://github.com/bismark-devel/bismark-packages.git # bismark's monitoring tools 
git clone git://github.com/yiannisy/openflow-openwrt-bismark.git # openflow tools
git clone openwrt cerowrt-3.3
mkdir patches
cd patches
cp /tmp/evanpatch/* .
cd ..
cd cerowrt-3.3/
mkdir dl
cp /tmp/feeds.conf .
vi feeds.conf
cd ..
cd cerowrt-3.3/

./scripts/env new each  # create a new filesystem 
cd env
tar xvzf /tmp/stuff.tgz # presently the cerowrt filesystem is NOT in public git
git add *
# in the future the above two steps would be
# git remote add wherever git://wherever
# git pull remote wherever release-tag
git commit -a -m 'each tree'
cd ..
chmod a+rwx dl
cd dl
./scripts/feeds update
cp env/config-wndr3700v2 .config # do this to keep openwrt's build unconfused
git am ../patches/*
vi target/linux/ar71xx/Makefile # Add current kernel version (3.3-rc3 in this case)
./scripts/feeds install -p cero `cat env/override.list`
./scripts/feeds install `cat env/packages.list`
cp env/config-wndr3700v2 .config
make menuconfig
diff .config env/config-wndr3700v2
vi .config # enable missing packages
./scripts feeds install whatever is missing
wash, rinse, repeat
make -j 8 
make V=99
fix errors
</pre>","",2012-02-11 09:47:03.395158,7
211,211,213,"h1. Changing your CeroWrt IP Addresses, DNS settings, SSID

Changing interfaces, router name, your ip addresses or SSID are tedious using the default web interface, and it is much faster to do it at the command line. 

The [[Automated Configuration of CeroWrt]] page provides a script that systematically changes these addresses, as well as configuring other aspects of the router in a single step.

h2. Changing your IP subnets using sed

<pre><code>
NEWIP=your.new.ip
REVIP=ip.new.your

sed -i s#172.30.42#$NEWIP#g /etc/config/* /etc/babel* 

</code></pre>

Say, for example, you wanted to have a 192.168.1 layout (not that we recommend you do this):

<pre><code>
sed -i s#172.30.42#192.168.1#g /etc/config/* /etc/babel* 

</code></pre>

Note that this preserves the /27 networks (so that ethernet devices need to be in the 1-31 range) which we think is a good idea regardless, due to the multicast issue.

h2. Changing your CeroWrt domain via sed

You can also change the default 'home.lan' domain to something else using sed.

<pre><code>
NEWNAME=your.domain
sed -i s#home.lan#$NEWNAME#g /etc/config/* /etc/hosts 

</code></pre>

h2. Changing your SSID globally

CeroWrt has a multitude of network interfaces enabled. The SSIDs all contain the string ""CEROwrt"", and it's hard to change the SSID via the web interface. However, if you want your own SSIDs, another sed command will get you there.

<pre><code>
sed -i s#CEROwrt#YOURNEWSSID#g /etc/config/wireless

</code></pre>

*Note:* After doing any of these modifications your router will be thoroughly confused unless you reboot, so reboot.

*Update 23Sep2014:* Removed @/etc/chroot/named/etc/bind/*/*@ from the DNS and subnet examples as we no longer use bind.","",2014-09-23 03:55:17.225287,14
292,292,3,"h1. Smart Queue Management

""Smart Queue Management"", or ""SQM"" is shorthand for _an integrated network system that performs better per-packet/per flow network scheduling, active queue length management (AQM), traffic shaping/rate limiting, and QoS (prioritization)_.

""Classic"" QoS does prioritization only.

""Classic"" AQM manages queue lengths only.

""Classic"" packet scheduling does some form of fair queuing only.

""Classic"" traffic shaping and policing sets hard limits on queue lengths and transfer rates

""Classic"" rate limiting sets hard limits on network speeds.

It has become apparent that in order to ensure a good internet experience all of these techniques need to be combined and used as an integrated whole, and also represented as such to end-users. After years of debate on the bloat and AQM mailing lists, no name for the idea has been agreed on. A lot of people object to ""smart queue management"" as being too general a phrase (""you can do anything and call it smart""), but we hope that by defining it as we have above to limit the mis-appropriations. A trademarked name has been suggested as well...

Probably the first widely deployed fully integrated ""smart queue management"" system was the venerated ""wondershaper"":http://lartc.org/wondershaper/, which emerged in the early 2000s as the linux based shaper of choice. It was widely deployed in internet cafes around the world, and in Linux users' homes and workplaces. Although for the time it was a breakthrough, it has since been obsoleted by events and bugs in its design. See [[Wondershaper Must Die]].

Much work on AQM (active queue length management) technologies like RED and BLUE took place in the period 1990-2002. Many variants of RED appeared between 2002 and 2013 - FRED, ARED, LRED, etc, but work mostly stagnated under variants of the same set of ideas, until the creation of the bufferbloat effort in 2011, which begat Codel and PIE. Feedback from the effects of these algorithms have led to improvements in various TCP implementations as well.

Packet scheduling has a longer and more successful history, starting with the first research into ""fair queueing"" in the mid-1980s and continuing to the present day with ideas like DRR, SFQ, QFQ and SQF. Along the way it was realized that strictly ""fair"" queueing was not desirable, which led to optimizations like WFQ (weighted Fair Queueing), SQF (shortest queue first), and sparse stream optimizations like those in fq_codel. Lacking a better phrase we try to distinguish between old-style ""fair"" queuing and new-style ""flow aware queueing"", but the common understanding of the abbreviation ""FQ"" = Fair Queueing is the source of much confusion.

These techniques ( shaping, prioritization, packet scheduling, and AQM) are often used in serial, rather than parallel. 

It is possible to make things worse by applying only a few of these techniques, a classic example of this is in NetGear's current QoS system which allows you to rate limit *but holds the fifo queue lengths constant*, and does not apply either packet scheduling or AQM, leading to exorbitant delays. SFQ, used alone at higher bandwidths gets the bursty tail drop problem an AQM can solve. An AQM, used alone, has trouble managing bursts. QoS, used alone, only works on what packet types can be classified easily. And, policing, set incorrectly, can seriously damage downloads.

WRED was probably the most successful of the packet scheduling/QoS/AQM hybrids. fq_codel (the principal candidate for a successor to WRED) combines smarter packet scheduling with a innovative AQM design into a single algorithm also, but does not have native support for QoS packet markings. It is usually combined with something else to do that. 

Most QoS systems as shipped today are terrifically elaborate and let you prioritize certain packet types to your heart's content, but this is of no help in a world that consists mostly of bursty web traffic on ports 80 and 443.

Rate limiting is presently stuck with token bucket designs descended from the original CBQ, like HTB. Software rate limiting is far more abusive of CPU than any of the packet scheduling or AQM algorithms discussed above, or their hybrids.

Traffic shaping (""policing"") was a not very good idea hard limiting ingress speeds that become common because of the ease of implementation. It is far saner to apply Smart Queue Management to ""police"" traffic at today's higher speeds.

Examples of deployed Smart Queue Management systems include CeroWrt's [[SQM]] implementation, OpenWrt's qos-scripts, IPFire, the Gargoyle router project, and ""Streamboost"":http://www.qualcomm.com/media/releases/2013/01/04/qualcomm-introduces-streamboost-technology-optimize-performance-and . WRED is deployed in many locations. France Telecom deploys SFQ. Free.fr has the first known large-scale fq_codel deployment, using three bands of fq_codel for tiers of QoS. (it is also the largest ECN enabled end-user deployment). The Streamboost product (now coming available in multiple 802.11ac routers) combines a bandwidth sensor, with a packet classification engine, with a multi-band fq_codel implementation.

We are beginning to characterise these in an upcoming internet draft on ""comprehensive queue management in home routers"":http://snapon.lab.bufferbloat.net/~d/draft-taht-home-gateway-best-practices-00.html
","",2014-03-23 00:50:14.859944,16
246,246,145,"h1. Product

On this page you will find links to product specific information on mitigating buffer bloat.

[[Sonicwall firewall]]
","",2012-04-11 04:31:10.395769,1
270,270,3,"h1. Donate

<form action=""https://authorize.payments.amazon.com/pba/paypipeline"" method=""post"">
  <input type=""hidden"" name=""processImmediate"" value=""0"" >
  <input type=""hidden"" name=""accessKey"" value=""11SEM03K88SD016FS1G2"" >
  <input type=""hidden"" name=""signatureMethod"" value=""HmacSHA256"" >
  <input type=""hidden"" name=""collectShippingAddress"" value=""0"" >
  <input type=""hidden"" name=""amazonPaymentsAccountId"" value=""RWXXKGWHOFYX4ZN9NQ1BQCJBDLKV3XQ3JPUJZ6"" >
  <input type=""hidden"" name=""cobrandingStyle"" value=""logo"" >
  <input type=""hidden"" name=""immediateReturn"" value=""1"" >
  <input type=""hidden"" name=""amount"" value=""USD 20"" >
  <input type=""hidden"" name=""recurringFrequency"" value=""1 month"" >
  <input type=""hidden"" name=""description"" value=""Cerowrt Basic"" >
  <input type=""hidden"" name=""signatureVersion"" value=""2"" >
  <input type=""hidden"" name=""subscriptionPeriod"" value=""3 month"" >
  <input type=""hidden"" name=""signature"" value=""EtMcOJj4Imrhm2n2W1wVDWVwo4UKmWjn7JHCZOqVaHM="" >
  <input type=""image"" src=""http://g-ecx.images-amazon.com/images/G/01/asp/beige_small_subscribe_withlogo_whitebg.gif"" border=""0"">
</form>

<form action=""https://authorize.payments.amazon.com/pba/paypipeline"" method=""post"">
  <input type=""hidden"" name=""processImmediate"" value=""0"" >
  <input type=""hidden"" name=""accessKey"" value=""11SEM03K88SD016FS1G2"" >
  <input type=""hidden"" name=""signatureMethod"" value=""HmacSHA256"" >
  <input type=""hidden"" name=""collectShippingAddress"" value=""0"" >
  <input type=""hidden"" name=""amazonPaymentsAccountId"" value=""RWXXKGWHOFYX4ZN9NQ1BQCJBDLKV3XQ3JPUJZ6"" >
  <input type=""hidden"" name=""cobrandingStyle"" value=""logo"" >
  <input type=""hidden"" name=""immediateReturn"" value=""1"" >
  <input type=""hidden"" name=""amount"" value=""USD 40"" >
  <input type=""hidden"" name=""recurringFrequency"" value=""1 month"" >
  <input type=""hidden"" name=""description"" value=""Cerowrt Helper"" >
  <input type=""hidden"" name=""signatureVersion"" value=""2"" >
  <input type=""hidden"" name=""subscriptionPeriod"" value=""3 month"" >
  <input type=""hidden"" name=""signature"" value=""Kyo0Xe9aFPskcc9Pj7FxktCizWXrJRVfh9uaV7B6SzE="" >
  <input type=""image"" src=""http://g-ecx.images-amazon.com/images/G/01/asp/beige_small_paynow_withmsg_whitebg.gif"" border=""0"">
</form>

<form action=""https://authorize.payments.amazon.com/pba/paypipeline"" method=""post"">
  <input type=""hidden"" name=""processImmediate"" value=""0"" >
  <input type=""hidden"" name=""accessKey"" value=""11SEM03K88SD016FS1G2"" >
  <input type=""hidden"" name=""signatureMethod"" value=""HmacSHA256"" >
  <input type=""hidden"" name=""collectShippingAddress"" value=""0"" >
  <input type=""hidden"" name=""amazonPaymentsAccountId"" value=""RWXXKGWHOFYX4ZN9NQ1BQCJBDLKV3XQ3JPUJZ6"" >
  <input type=""hidden"" name=""cobrandingStyle"" value=""logo"" >
  <input type=""hidden"" name=""immediateReturn"" value=""1"" >
  <input type=""hidden"" name=""amount"" value=""USD 100"" >
  <input type=""hidden"" name=""recurringFrequency"" value=""1 month"" >
  <input type=""hidden"" name=""description"" value=""Friend of Cero"" >
  <input type=""hidden"" name=""signatureVersion"" value=""2"" >
  <input type=""hidden"" name=""subscriptionPeriod"" value=""3 month"" >
  <input type=""hidden"" name=""signature"" value=""EAGjBZLXVw9uP15v5Y7Admi+TTVm+qp3YcOWaJaUgoU="" >
  <input type=""image"" src=""http://g-ecx.images-amazon.com/images/G/01/asp/beige_small_paynow_withmsg_lightbg.gif"" border=""0"">
</form>

<form action=""https://authorize.payments.amazon.com/pba/paypipeline"" method=""post"">
  <input type=""hidden"" name=""processImmediate"" value=""0"" >
  <input type=""hidden"" name=""accessKey"" value=""11SEM03K88SD016FS1G2"" >
  <input type=""hidden"" name=""signatureMethod"" value=""HmacSHA256"" >
  <input type=""hidden"" name=""collectShippingAddress"" value=""0"" >
  <input type=""hidden"" name=""amazonPaymentsAccountId"" value=""RWXXKGWHOFYX4ZN9NQ1BQCJBDLKV3XQ3JPUJZ6"" >
  <input type=""hidden"" name=""cobrandingStyle"" value=""logo"" >
  <input type=""hidden"" name=""immediateReturn"" value=""1"" >
  <input type=""hidden"" name=""amount"" value=""USD 420"" >
  <input type=""hidden"" name=""recurringFrequency"" value=""1 month"" >
  <input type=""hidden"" name=""description"" value=""Friend of Cero"" >
  <input type=""hidden"" name=""signatureVersion"" value=""2"" >
  <input type=""hidden"" name=""subscriptionPeriod"" value=""3 month"" >
  <input type=""hidden"" name=""signature"" value=""dzigUVnPkyV6xG+S9FkhFbe2GnPb+XNFIzEpPNjjhtE="" >
  <input type=""image"" src=""http://g-ecx.images-amazon.com/images/G/01/asp/beige_small_paynow_withmsg_lightbg.gif"" border=""0"">
</form>
<form action=""https://authorize.payments.amazon.com/pba/paypipeline"" method=""post"">
  <input type=""hidden"" name=""processImmediate"" value=""0"" >
  <input type=""hidden"" name=""accessKey"" value=""11SEM03K88SD016FS1G2"" >
  <input type=""hidden"" name=""signatureMethod"" value=""HmacSHA256"" >
  <input type=""hidden"" name=""collectShippingAddress"" value=""0"" >
  <input type=""hidden"" name=""amazonPaymentsAccountId"" value=""RWXXKGWHOFYX4ZN9NQ1BQCJBDLKV3XQ3JPUJZ6"" >
  <input type=""hidden"" name=""cobrandingStyle"" value=""logo"" >
  <input type=""hidden"" name=""immediateReturn"" value=""1"" >
  <input type=""hidden"" name=""amount"" value=""USD 1000"" >
  <input type=""hidden"" name=""recurringFrequency"" value=""1 month"" >
  <input type=""hidden"" name=""description"" value=""Cerowrt Savior"" >
  <input type=""hidden"" name=""signatureVersion"" value=""2"" >
  <input type=""hidden"" name=""subscriptionPeriod"" value=""3 month"" >
  <input type=""hidden"" name=""signature"" value=""52p7zuPQEVs7su/XvcOGmps7u9z4KT0oOzJkhrwxbfg="" >
  <input type=""image"" src=""http://g-ecx.images-amazon.com/images/G/01/asp/beige_small_paynow_withmsg_whitebg.gif"" border=""0"">
</form>","",2012-09-04 17:40:16.855925,1
184,184,49,"h1. Measurement-brainstorm

* Measurements
** Wireless performance in the home
** Streaming performance
** Low-overhead bandwidth measurements
** Passive measurements (what kinds, and how?)
** Network neutrality / application performance monitoring
** Wireless mesh networking (e.g., getting bismark running on mesh potatoes, area deployments)


h2. Inside the Home

* Wireless performance
** Throughput to wireless devices in the home
** Other wireless networks that exist in the ""neighborhood"" and how much traffic is being sent on these networks 
* User behavior
** What does ""normal"" user behavior look like?
* Application behavior
** Automated vs. human-generated traffic (What does ""ambient"" traffic look like?) 
** How much traffic is inside the home (internal: mDNS, bonjour, ARP, internal application traffic) vs. external?
** How much traffic is cacheable?  (as a follow-up: how would caching any or all of this content improve performance?)
** How much traffic belongs to different applications? (e.g., is it true that 20% of traffic at peak time is NetFlix?)
* Device inventory and characterization/fingerprinting, including home automation devices
* Do people modify the router itself? (configuration changes?)
* What other information do applications leak?  (monitoring set-top boxes for data leaks, etc.)
** How much sensitive information is leaked in plaintext?
* Does the use of a particular application affect the performance of others (e.g., on the access link)?
* Security
** ""HomeIDS"" - perform active and passive measurements to detect anomalies (e.g., compromised hosts) inside the home
** Splitting snort/bro: generate signatures, but perform signature matching ""in the cloud"".  Note: these signatures might have to be based on flow statistics if they are exported from the box.  
* Factoring/locating bottlenecks: host, home network, access link, peering, server


h2. On the Access Link

* Application performance (e.g., Skype, Netflix)
** Passive monitoring
** Active measurements (of statistics that are relevant to the application)
* Effects of NAT on performance
* Effects of split TCP on performance (Jacopo is working on this)
* Are the ISP policies static or dynamic?  Within the access network, where is each policy applied?
** Time-based?
** Based on user behavior?  Do the ISPs build profiles of users and treat each user's traffic differently?
** Based on destination? (e.g., do users behind the same head end experience different performance/policies than those in different locations?)

h2. Topology and Applications

* What does the topology of the access network look like (e.g., by tracerouting from Bismark node to Bismark node)?
** Mapping out sup-IP topologies in a region
** Which access ISPs peer with one another?  Does peering vary by region?
* CDN Performance (Srikanth and Walter are working on this)
** What types of tricks do CDNs play in mapping clients to servers?  What does DNS resolution look like from different geographies and providers?
** How does a CDN's peering affect the performance that users in different access ISPs see?
* Does fetching content from a peer yield better or worse performance than fetching from an origin?
* Quantifying, measuring, and monitoring [[info-bubbles|""information bubbles""]] (region-specific content, filtering, etc.).
** action item: add some wgets to bismark-active for different Web servers, somehow do ""diffs"", upload the results to a portal

h2. Extensions

* Combination of heavyweight and lightweight bandwidth tests to achieve more continuous measurements?
* Could the same set of measurements be applied on a mobile device?

h2. Next Steps and Other Ideas

* Get TIE integrated with Bismark
* Identifying human-generated vs. automated traffic
* Identifying internal vs. external
** Kandula: Expose (learning communication patterns by grouping related flows)
","",2011-07-16 07:49:44.762574,8
249,249,3,"h1. Early Test Results

h2. Native IPv6 vs IPv4 fairness test... passed.

Tested with a 40Mbit uplink setting, RTT of ~5ms
(sfqred with the front-of-queue patch)

(it would be good to get a tunnelled results for 6in4 and 6to4)

<pre>
#!/bin/sh

# Test three bins in the simple_qos script, ipv4 and ipv6 equally

netperf -4 -Y CS1,CS1 -l 120 -H huchra.bufferbloat.net >> /tmp/CS1.log &
netperf -4 -Y EF,EF -l 120 -H huchra.bufferbloat.net >> /tmp/EF.log &
netperf -4 -Y BE,BE -l 120 -H huchra.bufferbloat.net >> /tmp/BE.log &
netperf -6 -Y CS1,CS1 -l 120 -H huchra.bufferbloat.net >> /tmp/CS1_6.log &
netperf -6 -Y EF,EF -l 120 -H huchra.bufferbloat.net >> /tmp/EF_6.log &
netperf -6 -Y BE,BE -l 120 -H huchra.bufferbloat.net >> /tmp/BE_6.log &

tail -f /tmp/*.log

</pre>

h3. Result

<pre>

==> /tmp/BE.log <==
MIGRATED TCP STREAM TEST from 0.0.0.0 () port 0 AF_INET to lists.bufferbloat.net () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.02     10.56   

==> /tmp/BE_6.log <==
MIGRATED TCP STREAM TEST from :: (::) port 0 AF_INET6 to lists.bufferbloat.net () port 0 AF_INET6 : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.01     10.43   

==> /tmp/CS1.log <==
MIGRATED TCP STREAM TEST from 0.0.0.0 () port 0 AF_INET to lists.bufferbloat.net () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.08      2.13   

==> /tmp/CS1_6.log <==
MIGRATED TCP STREAM TEST from :: (::) port 0 AF_INET6 to lists.bufferbloat.net () port 0 AF_INET6 : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.08      2.10   

==> /tmp/EF.log <==
MIGRATED TCP STREAM TEST from 0.0.0.0 () port 0 AF_INET to lists.bufferbloat.net () port 0 AF_INET : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.03      6.34   

==> /tmp/EF_6.log <==
MIGRATED TCP STREAM TEST from :: (::) port 0 AF_INET6 to lists.bufferbloat.net () port 0 AF_INET6 : demo
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    120.04      6.27   

</pre>

h3. tc output

<pre>
root@OpenWrt:~# tc -s qdisc show dev ge00
qdisc htb 1: root refcnt 2 r2q 10 default 12 direct_packets_stat 0
 Sent 1387076657 bytes 918754 pkt (dropped 0, overlimits 2197603 requeues 598) 
 backlog 0b 0p requeues 598 
qdisc sfq 110: parent 1:11 limit 200p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 0 prob_mark_head 10244 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 397807758 bytes 263694 pkt (dropped 0, overlimits 10244 requeues 0) 
 backlog 0b 0p requeues 0 
qdisc sfq 120: parent 1:12 limit 300p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 1 prob_mark_head 15657 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 783087099 bytes 518868 pkt (dropped 0, overlimits 15658 requeues 0) 
 backlog 0b 0p requeues 0 
qdisc sfq 130: parent 1:13 limit 150p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 0 prob_mark_head 4597 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 206181800 bytes 136192 pkt (dropped 0, overlimits 4597 requeues 0) 
 backlog 0b 0p requeues 0 

</pre>
<pre>
root@OpenWrt:~# tc -s class show dev ge00
class htb 1:11 parent 1:1 leaf 110: prio 1 rate 32000bit ceil 13333Kbit burst 1600b cburst 1599b 
 Sent 397810468 bytes 263718 pkt (dropped 0, overlimits 0 requeues 0) 
 rate 264bit 0pps backlog 0b 0p requeues 0 
 lended: 1313 borrowed: 262405 giants: 0
 tokens: 5937500 ctokens: 14250

class htb 1:1 root rate 40000Kbit ceil 40000Kbit burst 1600b cburst 1600b 
 Sent 1387094521 bytes 918853 pkt (dropped 0, overlimits 0 requeues 0) 
 rate 3000bit 2pps backlog 0b 0p requeues 0 
 lended: 686264 borrowed: 0 giants: 0
 tokens: 4750 ctokens: 4750

class htb 1:10 parent 1:1 prio 0 rate 40000Kbit ceil 40000Kbit burst 1600b cburst 1600b 
 Sent 0 bytes 0 pkt (dropped 0, overlimits 0 requeues 0) 
 rate 0bit 0pps backlog 0b 0p requeues 0 
 lended: 0 borrowed: 0 giants: 0
 tokens: 5000 ctokens: 5000

class htb 1:13 parent 1:1 leaf 130: prio 3 rate 4444Kbit ceil 39936Kbit burst 1599b cburst 1597b 
 Sent 206181800 bytes 136192 pkt (dropped 0, overlimits 0 requeues 0) 
 rate 0bit 0pps backlog 0b 0p requeues 0 
 lended: 87685 borrowed: 48507 giants: 0
 tokens: -32342 ctokens: 4735

class htb 1:12 parent 1:1 leaf 120: prio 2 rate 6666Kbit ceil 39936Kbit burst 1599b cburst 1597b 
 Sent 783102253 bytes 518943 pkt (dropped 0, overlimits 0 requeues 0) 
 rate 2736bit 1pps backlog 0b 0p requeues 0 
 lended: 143591 borrowed: 375352 giants: 0
 tokens: 28590 ctokens: 4782

</pre>

h3. Ping. Flat.

<pre>

Before:

root@OpenWrt:~# ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: seq=0 ttl=50 time=19.947 ms
64 bytes from 8.8.8.8: seq=1 ttl=50 time=19.970 ms

...

During:
root@OpenWrt:~# ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8): 56 data bytes
64 bytes from 8.8.8.8: seq=0 ttl=50 time=20.411 ms
64 bytes from 8.8.8.8: seq=1 ttl=50 time=20.758 ms
64 bytes from 8.8.8.8: seq=2 ttl=50 time=20.959 ms
64 bytes from 8.8.8.8: seq=3 ttl=50 time=20.746 ms

...
</pre>

tc during (different run)

<pre>

root@OpenWrt:~# tc -s qdisc show dev ge00
qdisc htb 1: root refcnt 2 r2q 10 default 12 direct_packets_stat 0
 Sent 707469403 bytes 468141 pkt (dropped 0, overlimits 1119667 requeues 278) 
 backlog 0b 22p requeues 278 
qdisc sfq 110: parent 1:11 limit 200p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 0 prob_mark_head 6337 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 235716510 bytes 156182 pkt (dropped 0, overlimits 6337 requeues 0) 
 backlog 10598b 7p requeues 0 
qdisc sfq 120: parent 1:12 limit 300p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 0 prob_mark_head 10292 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 392692535 bytes 259730 pkt (dropped 0, overlimits 10292 requeues 0) 
 backlog 13626b 9p requeues 0 
qdisc sfq 130: parent 1:13 limit 150p quantum 1514b depth 42 headdrop divisor 1024 
 ewma 4 min 3000b max 18000b probability 0.2 ecn 
 prob_mark 0 prob_mark_head 2168 prob_drop 0
 forced_mark 0 forced_mark_head 0 forced_drop 0
 Sent 79060358 bytes 52229 pkt (dropped 0, overlimits 2168 requeues 0) 
 backlog 9084b 6p requeues 0 
</pre>

h2. Ingress/Egress Shaper Test

30Mbit down, 4Mbit up. 

<pre>
netperf -4 -l 60 -H huchra.bufferbloat.net -t TCP_STREAM &
netperf -6 -l 60 -H huchra.bufferbloat.net -t TCP_MAERTS &
netperf -4 -l 60 -H huchra.bufferbloat.net -t TCP_MAERTS &

netperf -Y AF42,AF42 -6 -l 30 -H huchra.bufferbloat.net -t TCP_RR >> tcp.rr &
netperf -Y AF42,AF42 -4 -l 30 -H huchra.bufferbloat.net -t TCP_RR >> tcp.rr &

netperf -6 -l 60 -H huchra.bufferbloat.net -t TCP_STREAM &

</pre>

<pre>
root@OpenWrt:~# Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  16384    60.06      14.51   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  16384  16384    60.04      14.31   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.15       1.39   
Recv   Send    Send                          
Socket Socket  Message  Elapsed              
Size   Size    Size     Time     Throughput  
bytes  bytes   bytes    secs.    10^6bits/sec  

 87380  65536  65536    60.18       1.38   

</pre>

The first tcp.rr result is from a previous test of TCP_RR without AF42 enabled.

<pre>

root@OpenWrt:~# cat tcp.rr 
MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 () port 0 AF_INET to lists.bufferbloat.net () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

65536  87380  1        1       30.01     266.69   
16384  87380 
MIGRATED TCP REQUEST/RESPONSE TEST from :: (::) port 0 AF_INET6 to lists.bufferbloat.net () port 0 AF_INET6 : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

65536  87380  1        1       30.00     251.46   
16384  87380 
</pre>

This is TCP_RR, repeated, but this time with AF42 set, at the same time as the previous data

Note: huchra is configured as a drop tail system. I would suspect better performance with both sides running sfq.

<pre>

MIGRATED TCP REQUEST/RESPONSE TEST from 0.0.0.0 () port 0 AF_INET to lists.bufferbloat.net () port 0 AF_INET : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

65536  87380  1        1       30.00     353.20   
16384  87380 
MIGRATED TCP REQUEST/RESPONSE TEST from :: (::) port 0 AF_INET6 to lists.bufferbloat.net () port 0 AF_INET6 : demo : first burst 0
Local /Remote
Socket Size   Request  Resp.   Elapsed  Trans.
Send   Recv   Size     Size    Time     Rate         
bytes  Bytes  bytes    bytes   secs.    per sec   

65536  87380  1        1       30.00     313.90   
16384  87380 
</pre>","",2012-04-26 20:55:10.558006,9
298,298,213,"h1. Setting up SQM for CeroWrt 3.10

Current versions of CeroWrt have a [[Smart Queue Management]] ([[SQM]]) tab in the Network section that allows you to optimize the performance of the interface (generally ge00) that connects the CeroWrt router to the Internet. There are three sub-tabs in the SQM tab that you may configure:

* *Basic Settings* sets the download and upload speeds of the uplink. Be sure to read about the adjustment you should make when entering speeds.
* *Queue Discipline* selects which queueing discipline to use on the uplink. The default settings are good in almost every case.
* *Link Layer Adaptation* lets CeroWrt calculate the proper overheads for links such as DSL and ADSL. If you use any kind of DSL link, you should review this section.
 
Smart Queue Management (SQM) is our name for an intelligent combination of better packet scheduling (flow queueing) techniques along with with active queue length management (AQM).

_Note:_ CeroWrt has moved away from the term ""Active Queue Management"" (AQM) because ""Dave Täht points out"":https://lists.bufferbloat.net/pipermail/cerowrt-devel/2013-December/001840.html that it has pretty much come to be defined as active queue *length* management and not packet scheduling.

*Note to OpenWrt users:* Welcome to CeroWrt! These SQM features are now available in both the BB & CC releases. Install the luci-app-sqm and sqm-scripts packages, then use the Network -> SQM QoS menu to get to these screens. (You may have to log out and in to see the new menu.)

!>CeroWrtTorontoBasic1.png!

h2. 1. Basic Settings

Set the Download and Upload speeds to be somewhat below the speed of your Internet connection. There are two choices:

* Set the values to 85% of your provider's published numbers
 _...or..._
* If you have done a good speed measurement, set the values to 95% of the measured speed.

Please note these are arbitrary values chosen to give you a good result on the first try. You can increase them later. You are likely to be able to get very close to 100% of the rated upload bandwidth after some twiddling, and 95% of your real bandwidth down, but you need to measure repeatedly to get there.

An example of a tuning session for a common cable modem configuration is ""here"":http://snapon.lab.bufferbloat.net/~cero2/jimreisert/results.html using the ""RRUL"":https://www.bufferbloat.net/projects/codel/wiki/RRUL_test_suite test.

**Example 1:** If your your provider boasts ""7 megabit download/768 kbps upload"", enter numbers that are 85% of those values. 7 megabits-per-second is equal to 7000 kbit/s, 85% of that number is 5950 kbit/s. The proper value for 768 kbps would be 653 kbit/s. 

**Example 2:** If you have measured your bandwidth with http://speedtest.net or other network test tool (disable SQM first), set the upload and download speeds to 95% of those numbers. If you get 6.2 megabits down and 0.67 megabits up (6200 kbps and 670 kbps, respectively), set your down and upload speeds to 95% of those numbers (5890 and 637 kbps, respectively)

**Note: 1** Cable modem makers have gamed speedtest thoroughly by using ""Speedboost"", which usually gives you an extra 10 mbits or so for the first 10 seconds (so speedtest will look good). Use a longer test than that for cable. For example, you can expect a cable modem showing 30Mbit down for a speedtest to actually only do 22Mbit over longer periods.

**Note: 2** After doing the speed test, be sure to check the ""Enable"" box and choose an interface (default is 'ge00'), otherwise CeroWrt will not do anything to prevent bufferbloat. 

**Basic Settings - the details...**

CeroWrt's SQM is designed to manage the queues of packets waiting to be sent across the slowest (_bottleneck_) link, which is usually your connection to the Internet. CeroWrt cannot automatically adapt to network conditions on DSL, cable modems or GPON without any settings. Since the majority of ISP provided configurations for buffering are broken today, you need take control of the bottleneck link away from the ISP and move it into CeroWrt so it can be fixed. You do this by entering link speeds that are a few percent below the _actual_ speeds. 

_Note:_ it can be difficult to get an accurate measurement of the link speeds. The speed advertised by your provider is a starting point, but your experience often won't meet their published specs. If you use the provider's state speeds, enter 85% of those numbers. (See Example 1 above.)

CeroWrt can do a better job if you use a speed test program or web site like http://speedtest.net to get an estimate of the actual up and download values. Even better tools are ""netalyzr"":http://netalyzr.icsi.berkeley.edu/ and ""rrul"":http://www.bufferbloat.net/projects/codel/wiki/RRUL_test_suite, which run for long enough to get more accurate measurements. When you have made the measurements, use 95% of the those speeds. (See Example 2 above.)

Be sure to make your measurement when the network is quiet, and others in your home aren’t generating traffic.

!>CeroWrtToronto-QDisc1.png!

h2. 2. Queue Discipline

The Queue Discipline tab controls how packets are prioritized for sending and receipt. 

Just use the default settings shown here - they work very well for nearly all circumstances. Those defaults are:
* fq_codel queueing discipline
* simple.qos queue setup script
* ECN for inbound packets
* NOECN for outbound packets

If you feel like experimenting, change these settings and let us know the results on the ""CeroWrt-Devel mailing list"":https://lists.bufferbloat.net/listinfo/cerowrt-devel 

**Queueing Discipline - the details...**

CeroWrt has been primarily a tool for research into better packet scheduling and AQM technologies. These include CoDel, fq_codel & PIE algorithms that prevent large flows of data (uploads, videos, etc.) from affecting interactive applications like web, videoconferencing, voice, and gaming.  One of the technologies (PIE) is now embedded in the DOCSIS 3.1 cable modem standard. If you want to get a feel for how cable modems will work in the future, try pie. (However, we feel the default of fq_codel and the simple.qos script work better in all circumstances). 

The simple.qos script has a traffic shaper (the Queueing Discipline you select) and three classes with different priorities for traffic. The simplest.qos has the traffic shaper but just one class for all traffic. 

Explicit Congestion Notification ([[ECN]]) is a mechanism for notifying a sender that its packets are encountering congestion and that the sender should slow its packet delivery rate. Instead of dropping a packet, CeroWrt marks the packet with a congestion notification and passes it along to the receiver. That receiver sends the congestion notification back to the sender, which can adjust its rate. This provides faster feedback than having CeroWrt drop the received packet. Note: this technique requires that the TCP stack on both sides [[enable ECN]].

At low bandwidths we recommend that you turn ECN off for the Upload (outbound, egress) direction, because fq_codel handles and drops packets before they reach the bottleneck, leaving room for more important packets to get out. For the Download (inbound, ingress) link, we recommend you turn ECN on so that CeroWrt can inform the local receiver (that will in turn notify the remore sender) that it has detected congestion without loss of a packet.

The ""Dangerous Configuration"" options (not shown in this image) allow you to change other parameters. They are not heavily error checked, so be careful when entering them that they are exactly as specified. These options are available when you check the box. As with other options in this tab, it is safe to leave them at their default. They include:

* **Hard limit on ingress queues:** This is a limit the ingress (inbound) queues, measured in packets. Leave it empty for default.
* **Hard limit on egress queues:** This is a limit on the egress (outbound) queues. Similar to the ingress hard limit.
* **Latency target for ingress:** The codel algorithm specifies a _target_, expressed in msec. Use ""auto"" for a calculated compensation for slow links (less than 4 mbps). Leave it empty for the default.
* **Latency target for egress:** The target setting for the egress queues. Similar to the ingress latency target.
* **Advanced option string for ingress:** This string passes additional parameters to the ingress queueing discipline. There is no error checking, so enter carefully. Empty is the default.
* **Advanced option string for egress:** Similar to the ingress advanced option string.

!>CeroWrtTorontoLinkLayer1.png!

h2. 3. Link Layer Adaptation

Set the Link Layer Adaptation options based on your connection to the Internet. The general rule for selecting the Link Layer Adaption is: 

* Choose the “ATM: select for e.g. ADSL1, ADSL2, ADSL2+."" item with the Per-packet Overhead set to 44 if you use any kind of DSL/ADSL connection to the Internet (that is, if you get your internet service through a telephone line).

* Choose “Ethernet with overhead: select for e.g. VDSL2."" and set the Per-packet Overhead to 8 if you know you have a VDSL2 connection.

* Choose “None (default)” if you use Cable modem, Fiber, direct Ethernet, or another kind of connection to the Internet. All the other parameters will be ignored.

If you are not sure what kind of link you have, first try using ""None"", then run the [[Quick Test for Bufferbloat]]. If the results are good, you’re done. Next,  try the ATM choice, then the Ethernet choice to see which performs best. Read the **Details** (below) to learn more about tuning the parameters for your link. 

**Link Layer Adaptation - the details…**

It is especially important to set the Link Layer Adaptation on links that use ATM framing (almost all DSL/ADSL links do), because ATM adds five additional bytes of overhead to a 48-byte frame. Unless CeroWrt can account correctly for the ATM framing bytes, short packets will appear to take longer to send than expected, and CeroWrt will penalize that traffic. CeroWrt can also account for the overhead imposed by ""Ethernet with overhead"" (mostly VDSL) links. Cable Modem, Fiber, and direct Ethernet connections generally do not need any kind of link layer adaptation.

The ""Advanced Link Layer"" choices are relevant if you are sending packets larger than 1500 bytes. This would be unusual for most home setups, since ISPs generally limit traffic to 1500 byte packets.

Unless you are experimenting, you should use the tc_stab (not the htb_private) choice for the link layer adaptation mechanism.

**Conclusion**

The Link Layer recommendations above reflect “good enough” settings, and should work quite well for virtually all connections. 

You may be able to improve your performance by adjusting the parameters above to the specifics of your connection to the internet through your ISP. If you want to experiment, read [[Everything you wanted to know about Link Layer Adaptation]]. And join the ""CeroWrt-Devel mailing list"":https://lists.bufferbloat.net/listinfo/cerowrt-devel and let us know what you learn!

h3. SQM Settings using new Bootstrap theme

CeroWrt 3.10.32 and newer have a new design that uses a clean Bootstrap3 inspired look. You can select it by going to the **System** tab, clicking the **System sub-tab**, and finding the **Language and Style** sub-sub-sub tab. These Web pages are the equivalent of the ones above shown in the Bootstrap design

!CeroWrtTorontoBasic.png!
!CeroWrtTorontoQDisc.png!
!CeroWrtTorontoLinkLayer.png!","",2015-04-15 20:16:48.621372,27
283,283,213,"h1. Automated Configuration of CeroWrt

CeroWrt uses the LuCi GUI (from OpenWrt) to make it easy to tweak most every part of the CeroWrt configuration. 

However, when testing the software, it's convenient to have a script that will issue the same set of configuration commands so that a fresh firmware installation can be brought to a consistent state in a single step. The following script will configure a number of interesting aspects of CeroWrt, including:

* Set up the ge00/WAN interface to connect to your provider
* Update the software packages
* Update the root password
* Set the time zone
* Enable SNMP for traffic monitoring and measurements
* Enable NetFlow export for traffic analysis
* Enable mDNS/ZeroConf on the ge00 (WAN) interface 
* Change default IP addresses and subnets for interfaces
* Change default DNS names
* Set the SQM (Smart Queue Management) parameters
* Set the radio channels
* Set wireless SSID names
* Set the wireless security credentials

The script has a set of lines for each task. They're all optional, because they're all commented out. If you wish to perform one of these, fill in any of the values, then uncomment the affected lines.

h2. How can I get this script?

The _config-cerowrt.sh_ script is now part of the [[CeroWrtScripts|CeroWrtScripts bundle.]] A direct link to the script is: https://github.com/richb-hanover/CeroWrtScripts/blob/master/config-cerowrt.sh But it's easier to use the script if you @git clone@ it to your router as described on the [[CeroWrtScripts|CeroWrtScripts page.]]","",2014-05-29 13:06:27.307413,4
306,306,213,"h1. Debugging CeroWrt

If you wish to help us debug CeroWrt, we recommend that you use the _cerostats.sh_ script to collect configuration and diagnostic information from the router. This script is part of the [[CeroWrtScripts|CeroWrtScripts bundle.]]

The easiest way to use the script is to clone the [[CeroWrtScripts|bundle]] onto the router ahead of time, so you can run the script when trouble arises. The [[CeroWrtScripts|CeroWrtScripts page]] describes how to clone those files into your router. When it's there, you can enter these commands:

<pre>
$ ssh root@gw.home.lan        # or whatever you need to do to ssh to CeroWrt
# cd /usr/lib/CeroWrtScripts  # this is the recommended directory for the scripts
# sh cerostats.sh
Done... Stats written to /tmp/cerostats_output.txt (cerostats.sh)
#
</pre>

The _cerostats.sh_ script writes its output to @/tmp/cerostats_output.txt@ which you can copy/paste into your trouble report.","",2014-05-29 13:49:51.991053,1
230,230,3,"h1. Release Strategy

Cerowrt has followed multiple release strategies and naming schemes since its inception, and even the primary author finds it all rather confusing. This page is about the current release strategy. As for how to access older builds, please see the [[Pre-3.3 Releases]] page.

Goals going forward for the source trees and binaries:

* Have a clear development/release split
* Be easily build-able by those with little or no openwrt experience
* Produce reproducible results
* Make possible other architecture support
* Make possible to do at least some (particularly security) in-field updates
* Make more possible to feed changes upstream
* Make doing R&D faster and more productive

h2. Naming scheme (binaries)

Future releases will be named after the kernel they are based on. Using 'codenames' like [[OCEAN CITY]] or [[Paris]] will be dropped.

One of the core goals of cerowrt is to track the main kernel trees as closely as possible. This simplifies maintenance and essential R&D by making it easy to develop code on mainstream architectures (x86,x86_64)
and bring the patches 'right' over to embedded - and vice versa. It also makes reproducing and fixing bugs much simpler. The kernel is on roughly a 3 month development cycle.

So what we will see are versions that look like

cerowrt-3.3-rc3-X - where 'X' is the build number, and is otherwise meaningless. The 3.3-rc3 part mirrors the existing kernel naming scheme, and thus a 'final' cerowrt release will probably look like:

cerowrt-3.3.1-X. We will not track the 'stable' releases of the kernel too closely unless there is stuff that is explicitly broken that needs to be fixed.

There will be 'topic' branches, much like the existing 'bql' branch, where some particular problem is being fixed or explored. Rather than confuse people, 'topic' branches will go under some other subdirectory.

The biggest problem this scheme induces is that it is in conflict with openwrt's release schedule. 

h2. Field updates

There's no real plan to do field updates aside from migrating towards something that might work, more often,
at this time. 

h2. Naming scheme (repositories)

Because integrating with upstream openwrt has been problematic, requiring frequent rebasing, a given series (3.3 in this example) will end up in its own repositories when its development cycle formally starts. No rebasing will be performed during the formal development cycle. Conflicting commits will be reverted, or merged, instead. (maybe). Commits will be exclusively pulled from the existing git mirrors such as nbd's, pushed into the current development tree, and patches made available after testing on both the mailing list and in a 'topic' branch that people can pull from.

This is modeled on the present-day kernel development process where the middle-tier maintainer asks
the primary maintainer to just pull from a topic branch. It would be my preference from a patch mangling
standpoint for 'pulls' from a topic branch rather than commits from the mailing list happen, but we'll see.

The git repos will try to enforce openwrt's commit policies as well. (I don't know what they are and need to find out)

At the start of a new development cycle, cerowrt will be rebased on openwrt head, the patch sets that didn't make it upstream will be folded in, with the merges and conflicting commits stripped out, and we'll start again.

We will do continuous integration over that cycle up until something major changes (like a toolchain change),
then freeze, continuing continuous integration in a topic branch until or if it proves out. 

I would prefer to keep stuff in git branches rather than explicitly named repos (cerowrt-3.3, ceropackages-3.2), etc, if it weren't for the rebasing problem and inexperienced git users. 

At the moment I plan on explicitly named repos.

h2. Upstream work

The fastest and best way to get patches into openwrt has been to work upstream beyond it. 

So periodically core utilities or applications that need an update or surgery will be forked off into the ceropackages repo, worked on, tested, and patches submitted upstream to the application developer. The out of tree package will be maintained out of tree until the new version makes it back to openwrt.

It has generally been too painful to bother submitting updates to core utilities to openwrt's own upstream,
except for trivial stuff, but we should at least, try harder. A good way to approach this may be to have
explicit 'patch review' days on the openwrt patchwork tree. (and to make sure our tested patches are upstream
at that point). It would be a goodness to get more stuff in general out of patchwork and into openwrt that isn't 'ours' as a way of contributing back to the community.

However several core utilities (iproute2, iptables) are very kernel dependent and need to fork off in order
to more closely track their 'head' versions. Perhaps a separate 'openwrt-next' tree, similar to the 'net-next'
tree could serve as a staging area for those and for patchwork.

The existing ceropackages 'application-latest' convention will be dropped, and the openwrt feeds 'preference' option adopted, instead. This minimizes the delta between the next generation of the package and the old package.

h2. Web site

A virtual host will be established somewhere to shorten the urls.

h2. Roadmaps

The existing roadmap and bug lists consist of many man-years worth of work, which is unfunded and un-resourced. Much of that work continues to happen organically, and having the bug lists so public helps to focus our huge herd of cats. Coming up with a better way to track the openwrt buglist would be useful too. 

And: coming up with a way to get the herd of cats funded and fed on a regular basis would best.

The existing roadmaps will be cut down to goals that are achievable on a 3 month cycle on the resources we have, so we can at least give people (especially ourselves!) a clue as to what we plan to do.

We will take advantage of opportunities that come up, of course.

In terms of picking a release date, somewhere around the projected arrival of a linux-X.Y.1 seems best.

In terms of picking a 'start of new development date', sometime after patches arrive for a new kernel that prove out (in a topic branch), is the trigger point. 

Finding a way to reduce the delta between openwrt's kernel patch set and the device's specific patch set
should become a higher priority than it has been, in order to further speed up the cycle.

h2. Core feature set

When development came to a standstill back in November, our core feature set was the most advanced set of ideas in the industry, in building a ipv6 capable box that actually worked the way a geek would want things to work.

While that entire feature set now 'works' it's still a little 'too geeky', and we have some new requirements in the coming year.

* Tons of Gui work
* IPv6 support
* DHCP-PD support

The core feature set is sufficiently different from openwrt as to cause problems with integration,guis, etc, etc.

Also it would be good to be testing more openwrt-like configurations in the general case.

The core feature set needs to be nailed down for each release and stay nailed down.

h2. Long term support

There still is no plan for long term support! The goal is to do R&D and get new stuff working and pushed upstream!
","",2012-02-13 17:34:02.348136,14
308,308,3,"h1. Wifi Stack Rework

None of the aqm and packet scheduling algorithms apply very well to aggregated macs, notably those in wifi 802.11n and 802.11ac. We anticipate that the work on improving the performance of these will also apply to other aggregated packet delivery technologies, notably cable, 3g and 4g, and 802.14 and 6lowpan, but fixing wifi is up first. (incidentally a better title for this section is needed)

this wiki page is out of date, the full description of everything we have fixed or have fixes in the pipeline for is in the battlemesh talk and pdf

https://www.youtube.com/watch?v=-vWrFCZXOWk

and there is a much larger document, currently in word format, that goes deeper than the below.

h2. Goals

# Reduce latency on a single AP, single station connected at the lowest rate (6mbits) to under 30ms under load, down from the commonly observed 600ms or more, while not sacrificing peak throughput under real world conditions
# Develop new packet scheduling and AQM techniques applicable to aggregated, parking lot network types
# Improve the stack sufficiently for 802.11ac MU-MIMO to actually work
# Save the world

h2. AP, mesh, mode rework

h3. Improvements to the minstrel rate selection algorithm

The minstrel rate selection algorithm was originally developed against wireless-g technologies in an era (2006) when competing access points were far less prevalent. While updated significantly for wireless-n a thorough analysis has not been performed in the wide variety of rates and modern conditions. Also, some new mathematical techniques have been developed since 2009 that might make for better rate control overall. A new ns3 model will be developed to mirror these potential changes and a sample implementation produced for the ath9k chipset (at minimum). Minstrel2, tenatively named ""BARD"", will do a much better job on agreggation and in MU-MIMO conditions.

h3. Sort on dequeue

An aggregate of packets arrives and is decoded all at once, and then delivered in FIFO order at a high rate (memory speeds) to another device, usually ethernet. However that high rate is often still too slow for a fq_codel qdisc attached to that ethernet device  to actually do any good, so it would be better to sort on the dequeue (of up to 42 packets), then deliver them to the next device.

We believe that if the delivery is sorted (fair queued), that more important packets will arrive first elsewhere and achieve better flow balance for multiple applications. Multiple chipsets deal with packet aggregation in different ways, as does firmware - some can't decode any but the entire aggregate when encrypted, for example, they arrive as a binary blob, and there are numerous other chipset and stack specific problems. 

h3. Reducing retransmits

Retransmit attempts should move from a counter based to a time and other workload based scheduler. This will help keep bad stations from overwhelming the good, and reduce latencies overall. Losing more packets is fine in the pursuit of lower latency for all. 

h3. Selective retransmit

Currently all Linux wifi drivers are dumb when it comes to retransmitting portions of an aggregate that fail, attempting to perfectly transmit the entire aggregate. In the general case, not all packets need to be retransmitted - examples include all but the final tcp ack in a flow, all but the last voip packet in a flow, and so on. 

h3. Single queue promotion to 802.11e and per station queueing

The current structure of the linux wifi stack exposes only the 802.11e wifi queues, not multicast, and not the queues needed for multiple stations to be sanely supported. Repeated tests of the 802.11e mechanism shows it to be poorly suited for a packet aggregation world. By reducing the exposed QoS queue to one, we can instead expose a per-station queue (including a multicast queue) and manage each TXOP far more sanely. 

There are a few other options as to what layer this sort of rework goes into. Given the current structure of the mac80211 stack, it may be that all this work (exposure of the station id), has to take place at that layer, rather than the higher level qdisc layer.  

h3. Power aware scheduling

It may be possible to do transmits at ""just the right power"" for the receiving station. Code for this exists but has not been tried outside academia.

h3. codel

While codel appears to be a great start in managing overall queue length, it is apparent that modifications would be needed to manage txops rather than packets, and the parking lot half duplex topology in wifi leads to having to manage the target parameter (at least) as a function of the number of active stations, and closer integration into minstrel for predictive scheduling seems needed also.

h3. fq_codel

See above. A perhaps saner approach than a stochastic hash is merely to attempt to better ""pack"" aggregates with different flows whenever possible, taking into account loss patterns, etc. Setting aside 42 buckets for each station is not a lot of overhead. 

h3. MU-MIMO support

Nearly all of the changes above have potentally great benefit in a MU-MIMO world, and are in fact, needed in that world. Regrettably none of the major chipset makers nor router makers seem to be co-ordinating on a standard api structure for doing this right, and it is hoped that by finding and targetting at least one MU MIMO chipset that progress will be made.

h2. Station improvements

While many of the above improvements also apply to stations, the benefits are more limited. The overall approach should be to do better mixing and scheduling of the aggregates that a station generates, and to hold the queue size below 2 full aggregates whenever possible. Further improvements in station behavior include predictive codel-ing for measuring the how and when EDCA scheduling opportunities are occuring, and so on.

h2. Better Benchmarks and tools

Leveraging the netperf-wrapper test suite, we hope to encourage industry and users to look at the real problems of wifi on voip, videoconferencing, gaming, and web traffic. There are other benchmarks being developed that look hard at the problems in bursty traffic as well. ","",2015-10-14 04:20:05.39769,5
244,244,213,"h1. Oprofiling Cerowrt

When digging into core OS problems, running oprofile can be revealing.

(for example see bugs #195 #216 and #352 - 195 and 352 are/were serious problems) 

As you have limited amount of flash and ram, you can't run oprofile for very long unless you have external disk, but it's
generally ok to run it for brief periods out of ram. Here's how:
 
<pre>
# you only have to do this once to put the needed packages on flash.
opkg update
opkg install oprofile

# you will need to do this on every boot/oprofile cycle
cd /tmp
mkdir session
wget http://huchra.bufferbloat.net/~cero1/3.3/3.3.1-4/vmlinux

# note that this last line just happens to be where this kernel is for this version.
# you can find it in your_cerowrt_dir/build_dir/linux-ar71xx_generic/linux-the.kernel.version/vmlinux

opcontrol --setup --vmlinux=/tmp/vmlinux --session-dir=/tmp/session

# Then you can cycle here repeatedly until you run out of ram
# setup a test (in my case I setup a netperf to run over wireless)
opcontrol --start
# run the test
opcontrol --stop
opcontrol --dump
opreport -c --session-dir=/tmp/session | less
</pre>

(this is a healthy looking oprofile)

<pre>
CPU: MIPS 24K, speed 676 MHz (estimated)
Counted INSTRUCTIONS events (1-0 Instructions completed) with a unit mask of 0x00 (No unit mask) count 100000
samples  %        app name                 symbol name
-------------------------------------------------------------------------------
611       8.4451  mac80211                 /mac80211
  611      100.000  mac80211                 /mac80211 [self]
-------------------------------------------------------------------------------
453       6.2612  ath9k                    /ath9k
  453      100.000  ath9k                    /ath9k [self]
-------------------------------------------------------------------------------
408       5.6393  vmlinux                  csum_partial
  408      100.000  vmlinux                  csum_partial [self]
-------------------------------------------------------------------------------
396       5.4734  vmlinux                  __copy_user
  396      100.000  vmlinux                  __copy_user [self]
-------------------------------------------------------------------------------
352       4.8652  ip_tables                /ip_tables
  352      100.000  ip_tables                /ip_tables [self]
-------------------------------------------------------------------------------
320       4.4229  vmlinux                  lzma_main
  320      100.000  vmlinux                  lzma_main [self]
-------------------------------------------------------------------------------
257       3.5522  nf_conntrack             /nf_conntrack
  257      100.000  nf_conntrack             /nf_conntrack [self]
-------------------------------------------------------------------------------
253       3.4969  vmlinux                  __do_softirq
  253      100.000  vmlinux                  __do_softirq [self]
-------------------------------------------------------------------------------
237       3.2757  libuClibc-0.9.33.so      /lib/libuClibc-0.9.33.so
  237      100.000  libuClibc-0.9.33.so      /lib/libuClibc-0.9.33.so [self]
-------------------------------------------------------------------------------
141       1.9489  vmlinux                  __bzero
  141      100.000  vmlinux                  __bzero [self]
-------------------------------------------------------------------------------
125       1.7277  ath9k_hw                 /ath9k_hw
  125      100.000  ath9k_hw                 /ath9k_hw [self]
-------------------------------------------------------------------------------
109       1.5066  vmlinux                  finish_task_switch.constprop.62
  109      100.000  vmlinux                  finish_task_switch.constprop.62 [self]
-------------------------------------------------------------------------------
102       1.4098  cfg80211                 /cfg80211
  102      100.000  cfg80211                 /cfg80211 [self]
-------------------------------------------------------------------------------
89        1.2301  ld-uClibc-0.9.33.so      /lib/ld-uClibc-0.9.33.so
  89       100.000  ld-uClibc-0.9.33.so      /lib/ld-uClibc-0.9.33.so [self]
-------------------------------------------------------------------------------
89        1.2301  vmlinux                  __rmemcpy
  89       100.000  vmlinux                  __rmemcpy [self]
-------------------------------------------------------------------------------
89        1.2301  vmlinux                  nf_iterate
  89       100.000  vmlinux                  nf_iterate [self]
-------------------------------------------------------------------------------
76        1.0504  busybox                  /bin/busybox
  76       100.000  busybox                  /bin/busybox [self]
-------------------------------------------------------------------------------
74        1.0228  vmlinux                  tick_nohz_idle_exit
  74       100.000  vmlinux                  tick_nohz_idle_exit [self]
-------------------------------------------------------------------------------
72        0.9952  vmlinux                  local_bh_enable
  72       100.000  vmlinux                  local_bh_enable [self]
-------------------------------------------------------------------------------
67        0.9261  vmlinux                  tick_nohz_idle_enter
  67       100.000  vmlinux                  tick_nohz_idle_enter [self]
-------------------------------------------------------------------------------
66        0.9122  oprofiled                /usr/bin/oprofiled
  66       100.000  oprofiled                /usr/bin/oprofiled [self]
-------------------------------------------------------------------------------
62        0.8569  vmlinux                  __slab_alloc.isra.60.constprop.63
  62       100.000  vmlinux                  __slab_alloc.isra.60.constprop.63 [self]
-------------------------------------------------------------------------------
62        0.8569  vmlinux                  do_select
  62       100.000  vmlinux                  do_select [self]
-------------------------------------------------------------------------------
62        0.8569  vmlinux                  mix_pool_bytes_extract
  62       100.000  vmlinux                  mix_pool_bytes_extract [self]
-------------------------------------------------------------------------------
60        0.8293  iptable_nat              /iptable_nat
  60       100.000  iptable_nat              /iptable_nat [self]
-------------------------------------------------------------------------------
59        0.8155  vmlinux                  r4k_dma_cache_inv
  59       100.000  vmlinux                  r4k_dma_cache_inv [self]
-------------------------------------------------------------------------------
59        0.8155  wpad                     /usr/sbin/wpad
  59       100.000  wpad                     /usr/sbin/wpad [self]
-------------------------------------------------------------------------------
56        0.7740  nf_conntrack_ipv4        /nf_conntrack_ipv4
  56       100.000  nf_conntrack_ipv4        /nf_conntrack_ipv4 [self]
-------------------------------------------------------------------------------
53        0.7326  vmlinux                  __alloc_skb
  53       100.000  vmlinux                  __alloc_skb [self]
-------------------------------------------------------------------------------
53        0.7326  vmlinux                  lzma_len
  53       100.000  vmlinux                  lzma_len [self]
-------------------------------------------------------------------------------
46        0.6358  vmlinux                  fget_light
  46       100.000  vmlinux                  fget_light [self]
-------------------------------------------------------------------------------
45        0.6220  vmlinux                  tcp_v4_rcv
  45       100.000  vmlinux                  tcp_v4_rcv [self]
-------------------------------------------------------------------------------
44        0.6082  vmlinux                  __wake_up_sync_key
  44       100.000  vmlinux                  __wake_up_sync_key [self]
-------------------------------------------------------------------------------
42        0.5805  vmlinux                  r4k_wait
  42       100.000  vmlinux                  r4k_wait [self]
-------------------------------------------------------------------------------
40        0.5529  xt_conntrack             /xt_conntrack
  40       100.000  xt_conntrack             /xt_conntrack [self]
-------------------------------------------------------------------------------
39        0.5390  vmlinux                  datagram_poll
  39       100.000  vmlinux                  datagram_poll [self]
-------------------------------------------------------------------------------
38        0.5252  vmlinux                  getnstimeofday
  38       100.000  vmlinux                  getnstimeofday [self]
-------------------------------------------------------------------------------
38        0.5252  vmlinux                  rcu_sched_qs
  38       100.000  vmlinux                  rcu_sched_qs [self]
-------------------------------------------------------------------------------
38        0.5252  vmlinux                  tcp_rcv_established
  38       100.000  vmlinux                  tcp_rcv_established [self]
-------------------------------------------------------------------------------
36        0.4976  babeld                   /usr/sbin/babeld
  36       100.000  babeld                   /usr/sbin/babeld [self]
-------------------------------------------------------------------------------
36        0.4976  vmlinux                  __slab_free.isra.58
  36       100.000  vmlinux                  __slab_free.isra.58 [self]
-------------------------------------------------------------------------------
36        0.4976  vmlinux                  ring_buffer_consume
  36       100.000  vmlinux                  ring_buffer_consume [self]
-------------------------------------------------------------------------------
34        0.4699  vmlinux                  ip_rcv
  34       100.000  vmlinux                  ip_rcv [self]
-------------------------------------------------------------------------------
33        0.4561  iptable_mangle           /iptable_mangle
  33       100.000  iptable_mangle           /iptable_mangle [self]
-------------------------------------------------------------------------------
32        0.4423  vmlinux                  dict_repeat.part.4
  32       100.000  vmlinux                  dict_repeat.part.4 [self]
-------------------------------------------------------------------------------
32        0.4423  vmlinux                  nf_hook_slow
  32       100.000  vmlinux                  nf_hook_slow [self]
-------------------------------------------------------------------------------
31        0.4285  vmlinux                  kfree
  31       100.000  vmlinux                  kfree [self]
-------------------------------------------------------------------------------
31        0.4285  vmlinux                  kmem_cache_alloc
  31       100.000  vmlinux                  kmem_cache_alloc [self]
-------------------------------------------------------------------------------
30        0.4147  libnl-tiny.so            /usr/lib/libnl-tiny.so
  30       100.000  libnl-tiny.so            /usr/lib/libnl-tiny.so [self]
-------------------------------------------------------------------------------
29        0.4008  vmlinux                  tcp_transmit_skb
  29       100.000  vmlinux                  tcp_transmit_skb [self]
-------------------------------------------------------------------------------
28        0.3870  vmlinux                  kmem_cache_free
  28       100.000  vmlinux                  kmem_cache_free [self]
-------------------------------------------------------------------------------
27        0.3732  vmlinux                  __netif_receive_skb
  27       100.000  vmlinux                  __netif_receive_skb [self]
-------------------------------------------------------------------------------
26        0.3594  vmlinux                  __udelay
  26       100.000  vmlinux                  __udelay [self]
-------------------------------------------------------------------------------
25        0.3455  vmlinux                  ip_route_input_common
  25       100.000  vmlinux                  ip_route_input_common [self]
-------------------------------------------------------------------------------
25        0.3455  vmlinux                  tcp_event_data_recv
  25       100.000  vmlinux                  tcp_event_data_recv [self]
-------------------------------------------------------------------------------
24        0.3317  vmlinux                  sock_poll
  24       100.000  vmlinux                  sock_poll [self]
-------------------------------------------------------------------------------
22        0.3041  nf_nat                   /nf_nat
  22       100.000  nf_nat                   /nf_nat [self]
-------------------------------------------------------------------------------
22        0.3041  vmlinux                  put_cpu_partial
  22       100.000  vmlinux                  put_cpu_partial [self]
-------------------------------------------------------------------------------
22        0.3041  vmlinux                  skb_release_data
  22       100.000  vmlinux                  skb_release_data [self]
-------------------------------------------------------------------------------
21        0.2903  vmlinux                  fput
  21       100.000  vmlinux                  fput [self]
-------------------------------------------------------------------------------
21        0.2903  vmlinux                  link_path_walk
  21       100.000  vmlinux                  link_path_walk [self]
-------------------------------------------------------------------------------
20        0.2764  vmlinux                  __inet_lookup_established
  20       100.000  vmlinux                  __inet_lookup_established [self]
-------------------------------------------------------------------------------
20        0.2764  vmlinux                  ksize
  20       100.000  vmlinux                  ksize [self]
-------------------------------------------------------------------------------
20        0.2764  vmlinux                  skb_copy_datagram_iovec
  20       100.000  vmlinux                  skb_copy_datagram_iovec [self]
-------------------------------------------------------------------------------
20        0.2764  vmlinux                  skb_release_head_state
  20       100.000  vmlinux                  skb_release_head_state [self]
-------------------------------------------------------------------------------
19        0.2626  vmlinux                  __pollwait
  19       100.000  vmlinux                  __pollwait [self]
-------------------------------------------------------------------------------
19        0.2626  vmlinux                  netif_receive_skb
  19       100.000  vmlinux                  netif_receive_skb [self]
-------------------------------------------------------------------------------
19        0.2626  vmlinux                  skb_put
  19       100.000  vmlinux                  skb_put [self]
-------------------------------------------------------------------------------
19        0.2626  vmlinux                  tcp_recvmsg
  19       100.000  vmlinux                  tcp_recvmsg [self]
-------------------------------------------------------------------------------
18        0.2488  vmlinux                  __kmalloc_track_caller
  18       100.000  vmlinux                  __kmalloc_track_caller [self]
-------------------------------------------------------------------------------
18        0.2488  vmlinux                  crc32_le
  18       100.000  vmlinux                  crc32_le [self]
-------------------------------------------------------------------------------
18        0.2488  vmlinux                  ewma_add
  18       100.000  vmlinux                  ewma_add [self]
-------------------------------------------------------------------------------
17        0.2350  vmlinux                  skb_push
  17       100.000  vmlinux                  skb_push [self]
-------------------------------------------------------------------------------
16        0.2211  vmlinux                  __d_lookup_rcu
  16       100.000  vmlinux                  __d_lookup_rcu [self]
-------------------------------------------------------------------------------
16        0.2211  vmlinux                  core_sys_select
  16       100.000  vmlinux                  core_sys_select [self]
-------------------------------------------------------------------------------
16        0.2211  vmlinux                  tcp_send_ack
  16       100.000  vmlinux                  tcp_send_ack [self]
-------------------------------------------------------------------------------
14        0.1935  vmlinux                  __nla_reserve
  14       100.000  vmlinux                  __nla_reserve [self]
-------------------------------------------------------------------------------
14        0.1935  vmlinux                  dev_queue_xmit
  14       100.000  vmlinux                  dev_queue_xmit [self]
-------------------------------------------------------------------------------
14        0.1935  vmlinux                  skb_queue_tail
  14       100.000  vmlinux                  skb_queue_tail [self]
-------------------------------------------------------------------------------
13        0.1797  vmlinux                  add_wait_queue
  13       100.000  vmlinux                  add_wait_queue [self]
-------------------------------------------------------------------------------
13        0.1797  vmlinux                  dev_hard_start_xmit
  13       100.000  vmlinux                  dev_hard_start_xmit [self]
-------------------------------------------------------------------------------
13        0.1797  vmlinux                  local_bh_disable
  13       100.000  vmlinux                  local_bh_disable [self]
-------------------------------------------------------------------------------
13        0.1797  vmlinux                  mips_dma_map_page
  13       100.000  vmlinux                  mips_dma_map_page [self]
-------------------------------------------------------------------------------
12        0.1659  oprofile                 /oprofile
  12       100.000  oprofile                 /oprofile [self]
-------------------------------------------------------------------------------
12        0.1659  vmlinux                  __copy_skb_header
  12       100.000  vmlinux                  __copy_skb_header [self]
-------------------------------------------------------------------------------
12        0.1659  vmlinux                  __queue_work
  12       100.000  vmlinux                  __queue_work [self]
-------------------------------------------------------------------------------
12        0.1659  vmlinux                  ip_queue_xmit
  12       100.000  vmlinux                  ip_queue_xmit [self]
-------------------------------------------------------------------------------
12        0.1659  vmlinux                  remove_wait_queue
  12       100.000  vmlinux                  remove_wait_queue [self]
-------------------------------------------------------------------------------
11        0.1520  iptable_filter           /iptable_filter
  11       100.000  iptable_filter           /iptable_filter [self]
-------------------------------------------------------------------------------
11        0.1520  vmlinux                  __skb_checksum_complete_head
  11       100.000  vmlinux                  __skb_checksum_complete_head [self]
-------------------------------------------------------------------------------
11        0.1520  vmlinux                  ip_finish_output
  11       100.000  vmlinux                  ip_finish_output [self]
-------------------------------------------------------------------------------
11        0.1520  vmlinux                  ip_local_deliver
  11       100.000  vmlinux                  ip_local_deliver [self]
-------------------------------------------------------------------------------
11        0.1520  vmlinux                  skb_checksum
  11       100.000  vmlinux                  skb_checksum [self]
-------------------------------------------------------------------------------
10        0.1382  ipv6                     /ipv6
  10       100.000  ipv6                     /ipv6 [self]
-------------------------------------------------------------------------------
10        0.1382  libnetsnmp.so.15.1.2     /usr/lib/libnetsnmp.so.15.1.2
  10       100.000  libnetsnmp.so.15.1.2     /usr/lib/libnetsnmp.so.15.1.2 [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  __schedule
  10       100.000  vmlinux                  __schedule [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  fsnotify
  10       100.000  vmlinux                  fsnotify [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  handle_pte_fault
  10       100.000  vmlinux                  handle_pte_fault [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  ip_local_deliver_finish
  10       100.000  vmlinux                  ip_local_deliver_finish [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  ip_output
  10       100.000  vmlinux                  ip_output [self]
-------------------------------------------------------------------------------
10        0.1382  vmlinux                  ktime_get_ts
  10       100.000  vmlinux                  ktime_get_ts [self]
-------------------------------------------------------------------------------
9         0.1244  ath                      /ath
  9        100.000  ath                      /ath [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  __kfree_skb
  9        100.000  vmlinux                  __kfree_skb [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  __strncpy_from_user_nocheck_asm
  9        100.000  vmlinux                  __strncpy_from_user_nocheck_asm [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  mod_timer
  9        100.000  vmlinux                  mod_timer [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  netlink_recvmsg
  9        100.000  vmlinux                  netlink_recvmsg [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  tcp_rcv_rtt_update
  9        100.000  vmlinux                  tcp_rcv_rtt_update [self]
-------------------------------------------------------------------------------
9         0.1244  vmlinux                  unix_dgram_poll
  9        100.000  vmlinux                  unix_dgram_poll [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  blast_dcache32
  8        100.000  vmlinux                  blast_dcache32 [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  eth_type_trans
  8        100.000  vmlinux                  eth_type_trans [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  get_slab.isra.52
  8        100.000  vmlinux                  get_slab.isra.52 [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  led_trigger_event
  8        100.000  vmlinux                  led_trigger_event [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  poll_select_copy_remaining
  8        100.000  vmlinux                  poll_select_copy_remaining [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  process_one_work
  8        100.000  vmlinux                  process_one_work [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  r4k_dma_cache_wback_inv
  8        100.000  vmlinux                  r4k_dma_cache_wback_inv [self]
-------------------------------------------------------------------------------
8         0.1106  vmlinux                  sch_direct_xmit
  8        100.000  vmlinux                  sch_direct_xmit [self]
-------------------------------------------------------------------------------
7         0.0968  netserver                /usr/bin/netserver
  7        100.000  netserver                /usr/bin/netserver [self]
-------------------------------------------------------------------------------
7         0.0968  vmlinux                  __hrtimer_start_range_ns
  7        100.000  vmlinux                  __hrtimer_start_range_ns [self]
-------------------------------------------------------------------------------
7         0.0968  vmlinux                  do_last.isra.37
  7        100.000  vmlinux                  do_last.isra.37 [self]
-------------------------------------------------------------------------------
7         0.0968  vmlinux                  skb_pull
  7        100.000  vmlinux                  skb_pull [self]
-------------------------------------------------------------------------------
7         0.0968  vmlinux                  sock_rfree
  7        100.000  vmlinux                  sock_rfree [self]
-------------------------------------------------------------------------------
7         0.0968  vmlinux                  sys_select
  7        100.000  vmlinux                  sys_select [self]
-------------------------------------------------------------------------------
6         0.0829  nf_defrag_ipv4           /nf_defrag_ipv4
  6        100.000  nf_defrag_ipv4           /nf_defrag_ipv4 [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __ip_local_out
  6        100.000  vmlinux                  __ip_local_out [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __kmalloc
  6        100.000  vmlinux                  __kmalloc [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __sys_recvmsg
  6        100.000  vmlinux                  __sys_recvmsg [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __tcp_ack_snd_check
  6        100.000  vmlinux                  __tcp_ack_snd_check [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __tcp_select_window
  6        100.000  vmlinux                  __tcp_select_window [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  __tcp_v4_send_check
  6        100.000  vmlinux                  __tcp_v4_send_check [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  dev_ioctl
  6        100.000  vmlinux                  dev_ioctl [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  do_lookup
  6        100.000  vmlinux                  do_lookup [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  handle_sys
  6        100.000  vmlinux                  handle_sys [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  hrtimer_try_to_cancel
  6        100.000  vmlinux                  hrtimer_try_to_cancel [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  ip_local_out
  6        100.000  vmlinux                  ip_local_out [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  path_openat
  6        100.000  vmlinux                  path_openat [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  skb_copy_bits
  6        100.000  vmlinux                  skb_copy_bits [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  tasklet_action
  6        100.000  vmlinux                  tasklet_action [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  tcp_options_write
  6        100.000  vmlinux                  tcp_options_write [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  unmap_vmas
  6        100.000  vmlinux                  unmap_vmas [self]
-------------------------------------------------------------------------------
6         0.0829  vmlinux                  worker_thread
  6        100.000  vmlinux                  worker_thread [self]
-------------------------------------------------------------------------------
5         0.0691  ath9k_common             /ath9k_common
  5        100.000  ath9k_common             /ath9k_common [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  __do_fault
  5        100.000  vmlinux                  __do_fault [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  __rtl8366_smi_write_reg
  5        100.000  vmlinux                  __rtl8366_smi_write_reg [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  ip_rcv_finish
  5        100.000  vmlinux                  ip_rcv_finish [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  ipv4_dst_check
  5        100.000  vmlinux                  ipv4_dst_check [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  ipv4_validate_peer
  5        100.000  vmlinux                  ipv4_validate_peer [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  nla_put
  5        100.000  vmlinux                  nla_put [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  rtnl_fill_ifinfo
  5        100.000  vmlinux                  rtnl_fill_ifinfo [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  schedule
  5        100.000  vmlinux                  schedule [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  select_estimate_accuracy
  5        100.000  vmlinux                  select_estimate_accuracy [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  snmp_fold_field64
  5        100.000  vmlinux                  snmp_fold_field64 [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  sock_def_readable
  5        100.000  vmlinux                  sock_def_readable [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  tcp_rcv_space_adjust
  5        100.000  vmlinux                  tcp_rcv_space_adjust [self]
-------------------------------------------------------------------------------
5         0.0691  vmlinux                  vm_normal_page
  5        100.000  vmlinux                  vm_normal_page [self]
-------------------------------------------------------------------------------
4         0.0553  dropbear                 /usr/sbin/dropbear
  4        100.000  dropbear                 /usr/sbin/dropbear [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  __dentry_open.isra.15
  4        100.000  vmlinux                  __dentry_open.isra.15 [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  filemap_fault
  4        100.000  vmlinux                  filemap_fault [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  filp_close
  4        100.000  vmlinux                  filp_close [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  find_vma
  4        100.000  vmlinux                  find_vma [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  ktime_get_real
  4        100.000  vmlinux                  ktime_get_real [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  memcmp
  4        100.000  vmlinux                  memcmp [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  memcpy_toiovec
  4        100.000  vmlinux                  memcpy_toiovec [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  memmove
  4        100.000  vmlinux                  memmove [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  memset
  4        100.000  vmlinux                  memset [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  netif_skb_features
  4        100.000  vmlinux                  netif_skb_features [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  netlink_unicast
  4        100.000  vmlinux                  netlink_unicast [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  ovl_permission
  4        100.000  vmlinux                  ovl_permission [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  packet_poll
  4        100.000  vmlinux                  packet_poll [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  poll_freewait
  4        100.000  vmlinux                  poll_freewait [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  put_page
  4        100.000  vmlinux                  put_page [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  raw_local_deliver
  4        100.000  vmlinux                  raw_local_deliver [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  ring_buffer_event_length
  4        100.000  vmlinux                  ring_buffer_event_length [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  schedule_hrtimeout_range_clock
  4        100.000  vmlinux                  schedule_hrtimeout_range_clock [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  sk_filter
  4        100.000  vmlinux                  sk_filter [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  skb_copy
  4        100.000  vmlinux                  skb_copy [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  sock_recvmsg
  4        100.000  vmlinux                  sock_recvmsg [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  tcp_cleanup_rbuf
  4        100.000  vmlinux                  tcp_cleanup_rbuf [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  timespec_add_safe
  4        100.000  vmlinux                  timespec_add_safe [self]
-------------------------------------------------------------------------------
4         0.0553  vmlinux                  vfs_write
  4        100.000  vmlinux                  vfs_write [self]
-------------------------------------------------------------------------------
3         0.0415  ip6_tables               /ip6_tables
  3        100.000  ip6_tables               /ip6_tables [self]
-------------------------------------------------------------------------------
3         0.0415  iptable_raw              /iptable_raw
  3        100.000  iptable_raw              /iptable_raw [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  __fsnotify_parent
  3        100.000  vmlinux                  __fsnotify_parent [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  __lshrdi3
  3        100.000  vmlinux                  __lshrdi3 [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  __nla_put
  3        100.000  vmlinux                  __nla_put [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  __rcu_process_callbacks
  3        100.000  vmlinux                  __rcu_process_callbacks [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  __wake_up
  3        100.000  vmlinux                  __wake_up [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  alloc_fd
  3        100.000  vmlinux                  alloc_fd [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  anon_vma_clone
  3        100.000  vmlinux                  anon_vma_clone [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  blast_icache32
  3        100.000  vmlinux                  blast_icache32 [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  copy_skb_header
  3        100.000  vmlinux                  copy_skb_header [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  do_filp_open
  3        100.000  vmlinux                  do_filp_open [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  do_gettimeofday
  3        100.000  vmlinux                  do_gettimeofday [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  do_page_fault
  3        100.000  vmlinux                  do_page_fault [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  dup_mm
  3        100.000  vmlinux                  dup_mm [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  generic_permission
  3        100.000  vmlinux                  generic_permission [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  get_empty_filp
  3        100.000  vmlinux                  get_empty_filp [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  harmonize_features.isra.41
  3        100.000  vmlinux                  harmonize_features.isra.41 [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  iowrite32
  3        100.000  vmlinux                  iowrite32 [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  mips_dma_mapping_error
  3        100.000  vmlinux                  mips_dma_mapping_error [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  move_addr_to_user
  3        100.000  vmlinux                  move_addr_to_user [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  mutex_lock
  3        100.000  vmlinux                  mutex_lock [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  page_waitqueue
  3        100.000  vmlinux                  page_waitqueue [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  path_init
  3        100.000  vmlinux                  path_init [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  path_put
  3        100.000  vmlinux                  path_put [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  prepare_to_wait
  3        100.000  vmlinux                  prepare_to_wait [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  radix_tree_lookup_element
  3        100.000  vmlinux                  radix_tree_lookup_element [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  release_sock
  3        100.000  vmlinux                  release_sock [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  rtl8366_smi_read_reg
  3        100.000  vmlinux                  rtl8366_smi_read_reg [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  rtnl_dump_ifinfo
  3        100.000  vmlinux                  rtnl_dump_ifinfo [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  set_normalized_timespec
  3        100.000  vmlinux                  set_normalized_timespec [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  sk_wait_data
  3        100.000  vmlinux                  sk_wait_data [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  sockfd_lookup_light
  3        100.000  vmlinux                  sockfd_lookup_light [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  stack_done
  3        100.000  vmlinux                  stack_done [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  strnlen
  3        100.000  vmlinux                  strnlen [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  tcp_send_delayed_ack
  3        100.000  vmlinux                  tcp_send_delayed_ack [self]
-------------------------------------------------------------------------------
3         0.0415  vmlinux                  unlink_anon_vmas
  3        100.000  vmlinux                  unlink_anon_vmas [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  __skb_recv_datagram
  2        100.000  vmlinux                  __skb_recv_datagram [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  __strnlen_user_nocheck_asm
  2        100.000  vmlinux                  __strnlen_user_nocheck_asm [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  __update_tlb
  2        100.000  vmlinux                  __update_tlb [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  __vm_enough_memory
  2        100.000  vmlinux                  __vm_enough_memory [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  _cond_resched
  2        100.000  vmlinux                  _cond_resched [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  bitbang_work
  2        100.000  vmlinux                  bitbang_work [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  c0_hpt_read
  2        100.000  vmlinux                  c0_hpt_read [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  complete_walk
  2        100.000  vmlinux                  complete_walk [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  copy_user_highpage
  2        100.000  vmlinux                  copy_user_highpage [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  cpu_idle
  2        100.000  vmlinux                  cpu_idle [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  csum_partial_copy_nocheck
  2        100.000  vmlinux                  csum_partial_copy_nocheck [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  do_ade
  2        100.000  vmlinux                  do_ade [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  do_mmap_pgoff
  2        100.000  vmlinux                  do_mmap_pgoff [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  do_sys_open
  2        100.000  vmlinux                  do_sys_open [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  expand_files
  2        100.000  vmlinux                  expand_files [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  file_free_rcu
  2        100.000  vmlinux                  file_free_rcu [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  find_vma_prepare
  2        100.000  vmlinux                  find_vma_prepare [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  get_page_from_freelist
  2        100.000  vmlinux                  get_page_from_freelist [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  getname_flags
  2        100.000  vmlinux                  getname_flags [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  handle_mm_fault
  2        100.000  vmlinux                  handle_mm_fault [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  inet_dump_ifaddr
  2        100.000  vmlinux                  inet_dump_ifaddr [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  inet_fill_link_af
  2        100.000  vmlinux                  inet_fill_link_af [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  inet_gifconf
  2        100.000  vmlinux                  inet_gifconf [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  mips_dma_unmap_page
  2        100.000  vmlinux                  mips_dma_unmap_page [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  mutex_unlock
  2        100.000  vmlinux                  mutex_unlock [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  number.isra.6
  2        100.000  vmlinux                  number.isra.6 [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  page_remove_rmap
  2        100.000  vmlinux                  page_remove_rmap [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  put_pid
  2        100.000  vmlinux                  put_pid [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  r4k_blast_dcache_page_dc32
  2        100.000  vmlinux                  r4k_blast_dcache_page_dc32 [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  rb_event_data_length
  2        100.000  vmlinux                  rb_event_data_length [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  rb_insert_color
  2        100.000  vmlinux                  rb_insert_color [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  rcu_bh_qs
  2        100.000  vmlinux                  rcu_bh_qs [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  rcu_idle_enter
  2        100.000  vmlinux                  rcu_idle_enter [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  run_ksoftirqd
  2        100.000  vmlinux                  run_ksoftirqd [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  run_timer_softirq
  2        100.000  vmlinux                  run_timer_softirq [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  skb_checksum_help
  2        100.000  vmlinux                  skb_checksum_help [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  skb_free_datagram
  2        100.000  vmlinux                  skb_free_datagram [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  strlen
  2        100.000  vmlinux                  strlen [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  sys_gettimeofday
  2        100.000  vmlinux                  sys_gettimeofday [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  sys_recvfrom
  2        100.000  vmlinux                  sys_recvfrom [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  sys_write
  2        100.000  vmlinux                  sys_write [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  tcp_established_options
  2        100.000  vmlinux                  tcp_established_options [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  tcp_v4_do_rcv
  2        100.000  vmlinux                  tcp_v4_do_rcv [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  unlock_page
  2        100.000  vmlinux                  unlock_page [self]
-------------------------------------------------------------------------------
2         0.0276  vmlinux                  write_pool
  2        100.000  vmlinux                  write_pool [self]
-------------------------------------------------------------------------------
1         0.0138  libdns.so.93.1.0         /usr/lib/libdns.so.93.1.0
  1        100.000  libdns.so.93.1.0         /usr/lib/libdns.so.93.1.0 [self]
-------------------------------------------------------------------------------
1         0.0138  libisc.so.90.1.0         /usr/lib/libisc.so.90.1.0
  1        100.000  libisc.so.90.1.0         /usr/lib/libisc.so.90.1.0 [self]
-------------------------------------------------------------------------------
1         0.0138  libnetsnmpagent.so.15.1.2 /usr/lib/libnetsnmpagent.so.15.1.2
  1        100.000  libnetsnmpagent.so.15.1.2 /usr/lib/libnetsnmpagent.so.15.1.2 [self]
-------------------------------------------------------------------------------
1         0.0138  libnetsnmphelpers.so.15.1.2 /usr/lib/libnetsnmphelpers.so.15.1.2
  1        100.000  libnetsnmphelpers.so.15.1.2 /usr/lib/libnetsnmphelpers.so.15.1.2 [self]
-------------------------------------------------------------------------------
1         0.0138  libpthread-0.9.33.so     /lib/libpthread-0.9.33.so
  1        100.000  libpthread-0.9.33.so     /lib/libpthread-0.9.33.so [self]
-------------------------------------------------------------------------------
1         0.0138  samba_multicall          /usr/sbin/samba_multicall
  1        100.000  samba_multicall          /usr/sbin/samba_multicall [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __alloc_pages_nodemask
  1        100.000  vmlinux                  __alloc_pages_nodemask [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __d_alloc
  1        100.000  vmlinux                  __d_alloc [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __d_lookup
  1        100.000  vmlinux                  __d_lookup [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __down_read
  1        100.000  vmlinux                  __down_read [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __down_write_nested
  1        100.000  vmlinux                  __down_write_nested [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __flush_dcache_page
  1        100.000  vmlinux                  __flush_dcache_page [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __get_free_pages
  1        100.000  vmlinux                  __get_free_pages [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __lru_cache_add
  1        100.000  vmlinux                  __lru_cache_add [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __ndelay
  1        100.000  vmlinux                  __ndelay [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __page_cache_release.part.11
  1        100.000  vmlinux                  __page_cache_release.part.11 [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __pte_alloc
  1        100.000  vmlinux                  __pte_alloc [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __put_anon_vma
  1        100.000  vmlinux                  __put_anon_vma [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __sk_dst_check
  1        100.000  vmlinux                  __sk_dst_check [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __split_vma
  1        100.000  vmlinux                  __split_vma [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __srcu_read_lock
  1        100.000  vmlinux                  __srcu_read_lock [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __strncpy_from_user_asm
  1        100.000  vmlinux                  __strncpy_from_user_asm [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  __update_cache
  1        100.000  vmlinux                  __update_cache [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  add_to_page_cache_locked
  1        100.000  vmlinux                  add_to_page_cache_locked [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ag71xx_poll
  1        100.000  vmlinux                  ag71xx_poll [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  anon_vma_prepare
  1        100.000  vmlinux                  anon_vma_prepare [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  arch_get_unmapped_area_common
  1        100.000  vmlinux                  arch_get_unmapped_area_common [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  blast_icache32_page
  1        100.000  vmlinux                  blast_icache32_page [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  cap_file_mmap
  1        100.000  vmlinux                  cap_file_mmap [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  cdev_get
  1        100.000  vmlinux                  cdev_get [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  cdev_put
  1        100.000  vmlinux                  cdev_put [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  chrdev_open
  1        100.000  vmlinux                  chrdev_open [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  consume_skb
  1        100.000  vmlinux                  consume_skb [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  copy_pte_range
  1        100.000  vmlinux                  copy_pte_range [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  d_lookup
  1        100.000  vmlinux                  d_lookup [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  dev_get_stats
  1        100.000  vmlinux                  dev_get_stats [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  do_exit
  1        100.000  vmlinux                  do_exit [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  do_munmap
  1        100.000  vmlinux                  do_munmap [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  do_vfs_ioctl
  1        100.000  vmlinux                  do_vfs_ioctl [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  do_wp_page.isra.77
  1        100.000  vmlinux                  do_wp_page.isra.77 [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  dput
  1        100.000  vmlinux                  dput [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  drop_file_write_access
  1        100.000  vmlinux                  drop_file_write_access [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  extract_buf
  1        100.000  vmlinux                  extract_buf [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  fd_install
  1        100.000  vmlinux                  fd_install [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  find_get_page
  1        100.000  vmlinux                  find_get_page [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  find_next_zero_bit
  1        100.000  vmlinux                  find_next_zero_bit [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  format_decode
  1        100.000  vmlinux                  format_decode [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  free_pgtables
  1        100.000  vmlinux                  free_pgtables [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  generic_make_request_checks
  1        100.000  vmlinux                  generic_make_request_checks [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  get_pageblock_flags_group
  1        100.000  vmlinux                  get_pageblock_flags_group [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  get_work_gcwq
  1        100.000  vmlinux                  get_work_gcwq [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  hrtimer_init
  1        100.000  vmlinux                  hrtimer_init [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  inet_create
  1        100.000  vmlinux                  inet_create [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  inet_recvmsg
  1        100.000  vmlinux                  inet_recvmsg [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  inode_permission
  1        100.000  vmlinux                  inode_permission [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  install_special_mapping
  1        100.000  vmlinux                  install_special_mapping [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ioread32
  1        100.000  vmlinux                  ioread32 [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  kfree_skb
  1        100.000  vmlinux                  kfree_skb [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ktime_add_ns
  1        100.000  vmlinux                  ktime_add_ns [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ktime_add_safe
  1        100.000  vmlinux                  ktime_add_safe [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  load_elf_binary
  1        100.000  vmlinux                  load_elf_binary [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  lock_sock_nested
  1        100.000  vmlinux                  lock_sock_nested [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  locks_remove_flock
  1        100.000  vmlinux                  locks_remove_flock [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  locks_remove_posix
  1        100.000  vmlinux                  locks_remove_posix [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  md5_transform
  1        100.000  vmlinux                  md5_transform [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  memcpy
  1        100.000  vmlinux                  memcpy [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  mmap_region
  1        100.000  vmlinux                  mmap_region [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  mntget
  1        100.000  vmlinux                  mntget [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  mntput_no_expire
  1        100.000  vmlinux                  mntput_no_expire [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  module_put
  1        100.000  vmlinux                  module_put [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  netdev_run_todo
  1        100.000  vmlinux                  netdev_run_todo [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  netlink_lookup.isra.16
  1        100.000  vmlinux                  netlink_lookup.isra.16 [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  netlink_table_ungrab
  1        100.000  vmlinux                  netlink_table_ungrab [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  netlink_trim
  1        100.000  vmlinux                  netlink_trim [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  nla_reserve
  1        100.000  vmlinux                  nla_reserve [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ovl_entry_real
  1        100.000  vmlinux                  ovl_entry_real [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  pagevec_lru_move_fn
  1        100.000  vmlinux                  pagevec_lru_move_fn [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  path_get
  1        100.000  vmlinux                  path_get [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  pgd_init
  1        100.000  vmlinux                  pgd_init [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  poll_schedule_timeout
  1        100.000  vmlinux                  poll_schedule_timeout [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  poll_select_set_timeout
  1        100.000  vmlinux                  poll_select_set_timeout [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  prio_tree_insert
  1        100.000  vmlinux                  prio_tree_insert [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  queue_delayed_work_on
  1        100.000  vmlinux                  queue_delayed_work_on [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  r4k_flush_cache_page
  1        100.000  vmlinux                  r4k_flush_cache_page [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  rcu_idle_exit
  1        100.000  vmlinux                  rcu_idle_exit [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  release_pages
  1        100.000  vmlinux                  release_pages [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  release_task
  1        100.000  vmlinux                  release_task [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  remove_vma
  1        100.000  vmlinux                  remove_vma [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  ret_from_exception
  1        100.000  vmlinux                  ret_from_exception [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  round_jiffies_common
  1        100.000  vmlinux                  round_jiffies_common [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  rtnl_dump_all
  1        100.000  vmlinux                  rtnl_dump_all [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  rw_verify_area
  1        100.000  vmlinux                  rw_verify_area [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  schedule_timeout
  1        100.000  vmlinux                  schedule_timeout [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sha_transform
  1        100.000  vmlinux                  sha_transform [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  shmem_getpage_gfp
  1        100.000  vmlinux                  shmem_getpage_gfp [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sk_free
  1        100.000  vmlinux                  sk_free [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  skb_dequeue
  1        100.000  vmlinux                  skb_dequeue [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  skip_atoi
  1        100.000  vmlinux                  skip_atoi [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sock_close
  1        100.000  vmlinux                  sock_close [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sock_wfree
  1        100.000  vmlinux                  sock_wfree [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  spi_async_locked
  1        100.000  vmlinux                  spi_async_locked [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  squashfs_read_metadata
  1        100.000  vmlinux                  squashfs_read_metadata [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  strchr
  1        100.000  vmlinux                  strchr [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sys_close
  1        100.000  vmlinux                  sys_close [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sys_open
  1        100.000  vmlinux                  sys_open [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sys_read
  1        100.000  vmlinux                  sys_read [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sys_recv
  1        100.000  vmlinux                  sys_recv [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  sys_sendto
  1        100.000  vmlinux                  sys_sendto [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  tcp_collapse
  1        100.000  vmlinux                  tcp_collapse [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  tcp_v4_send_check
  1        100.000  vmlinux                  tcp_v4_send_check [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  unix_peer_get
  1        100.000  vmlinux                  unix_peer_get [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  user_path_at_empty
  1        100.000  vmlinux                  user_path_at_empty [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  vfs_fstatat
  1        100.000  vmlinux                  vfs_fstatat [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  vfs_read
  1        100.000  vmlinux                  vfs_read [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  vm_get_page_prot
  1        100.000  vmlinux                  vm_get_page_prot [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  vma_merge
  1        100.000  vmlinux                  vma_merge [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  vsnprintf
  1        100.000  vmlinux                  vsnprintf [self]
-------------------------------------------------------------------------------
1         0.0138  vmlinux                  xz_dec_lzma2_run
  1        100.000  vmlinux                  xz_dec_lzma2_run [self]
-------------------------------------------------------------------------------
</pre>
","",2012-04-17 17:26:31.704205,6
301,301,3,"h1. Enable ECN

ECN (Explicit congestion notification) is a means to signal congestion without dropping packets. It uses 2 bits in
the IP packet header that can be modified by routers along the path. A ""2"" in this field indicates that the protocol
on the other side (usually TCP) is prepared to respond to congestion notifications, and a ""3"" observed in this field
means that congestion occured and the other side of the link should take action.

See ""Stuart Cheshire and Dave Taht's presentation at ietf 89"":http://www.ietf.org/proceedings/89/slides/slides-89-tsvarea-1.pdf

for some tcp trace analysis of how ECN works and can smooth delivery of tcp data under congestion.

Enabling ECN does not much good unless both hosts on the path have it enabled, and the congested router on the path is running [[SQM]] and supports ECN. But see above for how good the end result can be...

Many servers do support ECN negotiation already, but few clients do.

h2. Enabling ECN on OSX

<pre>
sudo sysctl -w net.inet.tcp.ecn_initiate_out=1	
sudo sysctl -w net.inet.tcp.ecn_negotiate_in=1	
</pre>

To make the settings persistent,  put the following lines in /etc/sysctl.conf:	

<pre>
net.inet.tcp.ecn_initiate_out=1 
net.inet.tcp.ecn_negotiate_in=1
</pre>

h2. Enabling ECN on Windows

netsh interface tcp set global ecncapability=enabled

h2. Enabling ECN on Linux

<pre>
sudo sysctl -w net.ipv4.tcp_ecn=1	
</pre>

Like Mac OS X, to make setting persistent,  add line in /etc/sysctl.conf

h1. Using ECN in CeroWrt

All the interfaces have ECN enabled by default for most queues. It is disabled for the wireless voice queue (better to lose a packet than suffer extra delay). 

In CeroWrt, at least, is presently recommended that ECN be disabled on low bandwidth links, and enabled for high bandwidth ones. Thus the [[SQM]] system in CeroWrt, typically used in scenarios where there is a high rate down and a slow rate up, enables ECN asymmetrically by default - ECN is on on the high speed down, and off on the slow speed up.","",2014-03-23 00:43:45.503829,3
187,187,121,"h1. Information Filter Bubbles

h2. Overview

This is a project for understanding and quantifying ""information filter bubbles"":http://www.thefilterbubble.com,  using a distributed measurement infrastructure like Bismark.

h2. Intro

Filter bubbles focus on the impact of web personalization based on
regional and personal characteristics. A user is exposed to things
that he will probably like and be interested to. This creates a
virtual environment which looks very familiar and friendly, removing
""irrelevant"" and/or ""unpopular"" content, where relevance and
popularity is based on a rich vector of personal, regional, technical
characteristics, and limits the breadth of user's experience.

The argument so far is on a relatively high-level. A more systematic
and detailed study could help us understand and quantify how these
reflects to the experience users perceive.

Using a distributed measurement platform like Bismark we can generate
identical search requests from different regions to study such behaviors.

h2. Design Ideas

* Home Gateways act as clients. They issue search requests in multiple
  search engines (Bing, Google, Yahoo, - anything we could do with
  Facebook?), and report the results back to a central server.

* Requests should not be hardcoded in the image. We don't expect a
  query to have time variance, even if it has we can't predict it. The
  clients can fetch a queriy from the server every day and then issue the
  requests to the search engines (aka the ""tip of the day"")

h2. Other Notes

* What sort of requests would reveal differences? Should it be up-to-date information like news, or static content?
* Get personalized behavior seems more difficult. It requires fake profiles, but how do you build history on this?
* What other things can we detect? Censorship, ...?
* Another way to do this would be using Tor and selecting the exit node.","",2011-07-15 12:17:56.605154,6
231,231,3,"h1. Getting time from gpsd

One concern with bufferbloat is that we would like to analyze the current performance of ntp's filtering system for 'getting good time', and also be able to more directly compare the performance of the internet at the edge to other sampling boxes.

This concept we call 'the cosmic background bufferbloat detector'

A way to do that is to integrate ntp and a set of monitoring tools with a non-network based timed source, such as gps. 

We have got a setup where gpsd can be used to feed time data into a cerowrt box. We are not at the point where we can actually process that data, and we have an issue in that getting hyper-accurate time requires PPS support which so as we can tell, 100% of all gpses no longer provide... but we're getting there. Regrettably the jitter we get without PPS support is kind of poor.

To configure gps as a time source...

# Get a supported gps
# Locate it near a window that can 'see' enough sats to get a lock
# install gpsd on a recent cerowrt
<pre>
opkg update
opkg install gpsd
opkg install cgps # this is optional - you can use this to monitor gpsd on the router itself
opkg install kmod kmod-usb-serial-ftdi # note - some gpses use kmod-usb-serial-pl2303
# edit /etc/config/gps and enable listen_globally (and then you can use cgps from anywhere on the network, even over ipv6)

</pre>
# Add it as a network time source to /etc/ntp.conf and enable stats collection
<pre>
statsdir /tmp/ntpstats/

statistics loopstats peerstats clockstats rawstats
filegen loopstats file loopstats type day enable
filegen peerstats file peerstats type day enable
filegen clockstats file clockstats type day enable
filegen rawstats file rawstats type day enable

server 127.127.28.0 prefer # this is for a non-pps reference
fudge 127.127.28.0 time1 0.420 refid GPS
server 127.127.28.1 # prefer if PPS is working
fudge 127.127.28.1 refid GPS1
</pre>

# Edit /etc/init.d/ntp and add the following lines near the top
<pre>
mkdir -p /tmp/ntpstats
chown ntp.ntp /tmp/ntpstats
</pre>

# Restart ntp, restart gpsd
<pre>
/etc/init.d/ntpd restart
/etc/init.d/gpsd restart
</pre>

There will be two ways to see if it is working. The first is to run cgps to see if you are getting time, and the second is to look at ntpq to see if ntp considers it valid. It will take many seconds before it will do so.

A valid connection will look something like this, where reach is non-zero.

<pre>
ntpq> peers
     remote           refid      st t when poll reach   delay   offset  jitter
==============================================================================
xSHM(0)          .GPS.            0 l    7   64  377    0.000  -9584.2 187.194
 SHM(1)          .GPS1.           0 l    -   64    0    0.000    0.000   0.000
 shipka.bufferbl .STEP.          16 -    -  512    0    0.000    0.000   0.000
*montblanc.arbor 208.66.175.36    2 u   28   64    7   34.027  -24.421   6.790
-jefferson.mattw 13.92.113.222    3 u   25   64   17   80.645  -30.243   8.527
+you.dontlike.us 128.4.40.12      3 u   24   64   17   13.073  -25.993   8.616
 javanese.kjsl.c .STEP.          16 -    -  512    0    0.000    0.000   0.000
+w1-wdc.ipv4.got 10.0.77.54       4 u   21   64   17   10.738  -28.668   8.759
-208.94.240.2    108.76.168.146   2 u   20   64   17   53.232  -33.752   8.709
 data0213-1-pt.t .STEP.          16 -    -  512    0    0.000    0.000   0.000
</pre>

This setup logs data to /tmp/ntpstats which will need to be uploaded and cleaned out
periodically.","",2012-03-01 11:13:36.376537,2
214,214,3,"h1. Wiki

h2. Team Members

[[reggani ahlem]]
[[schneider fabian]]
[[teixeira renata]]
[[taht dave]]

h2. Milestone Plans

[[Home Deployment Test]]
[[Home Deployment to Real Users]]

h2. meeting notes

    regular meeting wednesdays!

h2. Infrastructure

[[Network Design]]

h2. test stuff

[[test page]]

","",2011-10-17 07:38:17.657688,6
242,242,3,"h1. Using the Networking Test Tools in CeroWrt

h2. Alttcp

The alttcp package makes it possible to change the default congestion control algorithm on the fly, as well as make other algorithms available to user programs.

The list of available algorithms is in /etc/config/alttcp
You can enable a change with /etc/init.d/alttcp start

It could use a gui.

h2. Netperf (installed by default)

[[CeroWrt]] contains an advanced version of netperf which is capable of exercising socket prioritization, diffserv (tos) setting, and tcp congestion control algorithm selection. For the first time, these options can be set and controlled via remote control, thus making objective evaluations of the effect of these options in the real world, possible.

However using it on, to, or from a non-cerowrt device requires building it from svn sources at this time.

Example:

<code>
netperf -l 60 -Y AF31,EF -H 172.30.42.1 -t TCP_MAERTS -- -K westwood,ledbat
</code>

The above runs a test for 60 seconds, using AF31 classification in one direction, EF in the other, talking to a router on 172.30.42.1, using a reverse stream (TCP_MAERTS is the reverse of TCP_STREAM, both are valid tests). The '--' ends the options to the test in particular, and the -K controls what TCP algorithm is used on the local,remote sides.

Note: detecting bufferbloat generally requires running tests for considerably longer than netperf's 10 second default.

h2. Iperf (installed by default)

h2. Rsync (installed by default)

CeroWrt contains a patched version of rsync that also supports Diffserv classification and user selectable tcp algorithms.

h2. ShaperProbe (installed by default)

This tool is used to probe the available upstream bandwidth. It is still imperfect (inaccuracies of over 20% as to the real bandwidth available have been observed), and interacts badly with wireless hops, but seems useful for directly connected wired uplinks.

h2. httpping

h2. bwping

h2. lft

h2. fping

h2. fprobe

For more details, see [[Monitoring CeroWrt]]

h2. snmpd

For more details, see [[Monitoring CeroWrt]]

h2. DitG (user installable)

h2. Bismark related tools (user installable)

We co-operate with this project, although their focus is on measuring the internet, and ours is on fixing it. As they use the same hardware as cerowrt, we plan to make available at least some of the [[Bismark Tools]].
","",2012-04-02 09:36:57.020138,9
247,247,145,"h1. Sonicwall firewall

The Sonicwall firewall suffers from bloat.

You can mitigate bloat on layer-2 devices upstream for regular operation by traffic shapping to 95% of real bandwidth.

However, this does not reduce the buffering for VPN links.  No solution has been found for this.
","",2012-04-11 04:32:27.990907,1
271,271,3,"h1. Why 42?

42 is is the answer to ""life, the universe, and everything"". What was the question, nobody knows. A really, really, really big computer was built to figure that out, and failed...

42 is also how old I was when I came up with a way to try to change my life for the better.

42 is also the ""babel protocol's magic number"":http://tools.ietf.org/html/draft-chroboczek-babel-routing-protocol-05 . I ended up picking 172.30.42.x as the default ip address set for cero, to add to the magic.

42 has shown up in multiple other places during the development of this effort.

At the time we started this effort, we needed all the magic we could get.
","",2012-09-07 18:43:18.308708,5
253,253,3,"h1. Rory Doolin's initial idea

>  Hello Dave. Per our conversation in the kitchen on Saturday, here's a
> little bit about my earthquake warning idea.
>  Origin: When i was ten years old or so, I was listening to a San Jose
> radio station while laying on my bed in Redwood City. The announcer
> was saying something and suddenly went ;""whooaaa *that* was a strong
> one!"" and after a pause started talking about the quake he was
> feeling. About 20 seconds or so later, there was a thump! and
> rattle-shake as the front wave rolled under me. I thought at the time,
> ""that was enough time for me to get under the table if i knew to do
> it"".
>  Many years later, a couple years ago a friend was showing me this new
> iPhone thing. Good as a phone and communication device, but really fun
> as a toy. One of it's interesting components was an accelerometer
> which allowed it to interact with your movements. One of my first
> thoughts when I combined the networking, locational awareness(GPS) and
> sensing components was using these as an array to detect earthquakes
> and give advanced warning to other users.
>  The way it would work is:
> all smart phones would have this app by default. Maybe turned on by
> default, maybe opt-in.
>
> When a phone sensed a possible earthquake, it would send a notice with
> GPS and estimated strength and exact time signature to a central
> source. This would be a ""vote"" indicating a possible quake. An
> algorithm would be developed to eliminate false positives. With the
> high concentration of smart phones this should be very accurate.
>
> Central source would map time, location and strength and send out a
> warning to subscribers. Their phone would ring, using a tone related
> to timing and intensity. An example would be more rapid, higher
> frequency, higher pitch ring, depending on time-to-impact and
> estimated strength. With the computing power and level of connectivity
> on many phones now, this could trigger a mapping program graphically
> showing the approaching quake on a map with the user location and
> origin location marked.
>
>  The first(P) wave can travel between 1 and 3 miles a second. That is
> very little time for people right at the epicenter, but in a very
> large quake, there can be severe damage at 100 miles and that is
> probably about a minute out in most geologies.
>
>  The tones can mean:
> expect a shake
> get out if you can
> yell to everyone to brace,
> or, get the f**k under cover NOW.
> It should be obvious by tone which *you* should do.
>
> You wouldn't have to have a smart phone to receive the warnings. This
> could feed into existing warning systems and any other instant
> messaging or email facilities who are willing to participate.
>
> That's the basics, Dave. I can help you work it through in more detail
> if you like.
> Rory
> ps have you watched a video of the Japanese tsunami from last year and
> heard the warning siren? The tone is very good at getting a visceral
> response. Your body responds to the tone and you know there is danger.
> http://www.youtube.com/watch?v=ceym2c18OQM&feature=related","",2012-05-26 18:51:36.866836,1
251,251,3,"h1. Wiki

Look! a blank page! What on earth are we trying to do that is different or an improvement on what already exists?

[[scratch]]

[[an enormous backlog of email]]

[[Existing Earthquake related projects]]","",2012-05-26 18:59:21.132645,3
255,255,3,"h1. Existing Earthquake related projects

Here is a core dump of what I know is going on in this area:


Last month, the monthly public lecture at the USGS in Menlo Park covered this
area.
 ShakeAlert!
 --building an earthquake early warning system for California
 by Doug Given, USGS Earthquake Early Warning Coordinator
   * Millions of Japanese citizens received advance warning of the 2011
magnitude 9.0 Tohoku earthquake -- can such a system be built for use in
California?
   * University researchers and government agencies are working together to
create an Earthquake Early Warning system in California to reduce earthquake
losses
   * April is Earthquake Awareness Month in California -- how could you and
your family best prepare for severe ground shaking using 30 seconds of
advance warning?

The video is online.  It's an hour and a half.
 http://online.wr.usgs.gov/calendar/2012/apr12.html

It's pretty good.  I think anybody interested in this topic should watch it.
If nothing else, it will be a reference.

Numbers:
 S waves travel at 3 miles/second.  P waves (the destructive ones) travel at
2 miles/second.

 It takes about 10 seconds to verify that a quake exists and estimate how
big it is.

 They think they can get a 20-30 second warning.  That's for a big enough
quake, and far enough away but not too far.  If it isn't big, nobody cares.
If it's too far away nobody cares.  If it's too close, you don't get enough
warning time to be useful.  Quakes on the San Andreas Fault near Los Angeles
are likely to fit.  (The USGS people doing the work are located in Pasadena.)

Half (or more) of the work is making contact with the people who want to
know.  BART wants to stop their trains.  (BART trains can carry 1000 people.
A serious wreck would overload the emergency response system even without any
other earthquake damage.)

He had lots of info from Japan.  They have a lot more sensors than we do.
The USGS is looking for $10 or $20 million to install more sensors.  (I think
the numbers are in the video.)

-----------

The Moore foundation gave $6 million to CalTech, Berkeley, and Univ of
Washington for work in this area.
 http://www.usgs.gov/newsroom/article_pf.asp?ID=3041
They are cooperating with the USGS.

----------

The Quake Catcher Network (QCN) has a low cost sensor.
 http://qcn.stanford.edu/

I think they are interested in the general earthquake education area rather
than generating warnings.

The sensor is USB, 3 axis.  They are selling them for $50.  I don't know what
they would charge for a batch and/or what they would cost for a large
production run.

It comes with a small compass glued on the top.  Their installation
directions request that it be oriented correctly and bolted down.  I'm not
sure how important that is.  I assume somebody thinks it's worth the effort.

I think their software will run off the accelerometers built into some
laptops.

-----------

The USGS has some sort of seismometer at home program.  I don't have any URLs
handy.  It wasn't cheap.  I can probably get more info if you are interested.","",2012-05-26 18:59:58.760771,1
262,262,3,"h1. Minstrel Wireless Rate Selection

<pre>
root@davesroof:/sys/kernel/debug/ieee80211/phy0/netdev:wlan0/stations/00:27:22:a8:a3:1a# cat rc_stats
    type      rate     throughput  ewma prob   this prob  this succ/attempt   success    attempts
    HT20/LGI    MCS0        3.6       58.0      100.0          0(  0)        306         384
    HT20/LGI    MCS1        8.8       75.4       19.9          0(  0)        731        1185
    HT20/LGI    MCS2        5.1       31.0        0.0          0(  0)       1578        2538
    HT20/LGI  t MCS3       14.4       69.2      100.0          0(  0)      21405       26086
    HT20/LGI T PMCS4       27.4       97.6      100.0          0(  0)     153050      185927
    HT20/LGI    MCS5       14.0       41.4        0.0          0(  0)       1827        4486
    HT20/LGI    MCS6        0.0        0.0        0.0          0(  0)         10        1426
    HT20/LGI    MCS7        0.0        0.0        0.0          0(  0)          0        1428
    HT20/LGI    MCS8        8.4       71.5      100.0          0(  0)        528         784
    HT20/LGI    MCS9        5.3       25.7        0.0          0(  0)       9196       12302
    HT20/LGI    MCS10      10.4       37.1        0.0          0(  0)      18929       28297
    HT20/LGI    MCS11      14.1       41.7      100.0          0(  0)      23875       35908
    HT20/LGI    MCS12       0.0        0.0        0.0          0(  0)        591        2410
    HT20/LGI    MCS13       0.0        0.0        0.0          0(  0)          0        1428
    HT20/LGI    MCS14       0.0        0.0        0.0          0(  0)          0        1433
    HT20/LGI    MCS15       0.0        0.0        0.0          0(  0)          0        1431
     
    Total packet count::    ideal 217212      lookaround 14954
    Average A-MPDU length: 1.0
</pre>

<pre>

root@davesroof:/sys/kernel/debug/ieee80211# cd phy0/
    root@davesroof:/sys/kernel/debug/ieee80211/phy0# ls
    ath9k                    ht40allow_map            netdev:wlan0             reset                    total_ps_buffered
    channel_type             hwflags                  power                    rts_threshold            user_power
    fragmentation_threshold  keys                     queues                   short_retry_limit        wep_iv
    frequency                long_retry_limit         rc                       statistics
    root@davesroof:/sys/kernel/debug/ieee80211/phy0# cd ath9k/
    root@davesroof:/sys/kernel/debug/ieee80211/phy0/ath9k# ls
    base_eeprom    dma            gpio_led       ignore_extcca  modal_eeprom   qlen_vi        regdump        reset          tx_chainmask
    chanbw         dump_nfcal     gpio_mask      interrupt      qlen_be        qlen_vo        regidx         rx_chainmask   xmit
    disable_ani    eeprom         gpio_val       misc           qlen_bk        recv           regval         stations
    root@davesroof:/sys/kernel/debug/ieee80211/phy0/ath9k# cat xmit
    Num-Tx-Queues: 10  tx-queues-setup: 0x10f poll-work-seen: 36206
                                BE         BK        VI        VO
     
    MPDUs Queued:            27436        174     15066     12730
    MPDUs Completed:         27322        174     15062     12708
    MPDUs XRetried:            114          0         4        22
    Aggregates:              94194          5         0         0
    AMPDUs Queued HW:       620975         49     21536         0
    AMPDUs Queued SW:       438841          7         0         0
    AMPDUs Completed:      1045702         34      6476         0
    AMPDUs Retried:         438217        728    413300         0
    AMPDUs XRetried:         14114         22     15059         0
    FIFO Underrun:               0          0         0         0
    TXOP Exceeded:               0          0         0         0
    TXTIMER Expiry:              0          0         0         0
    DESC CFG Error:              0          0         0         0
    DATA Underrun:               0          0         0         0
    DELIM Underrun:              0          0         0         0
    TX-Pkts-All:           1087252        230     36601     12730
    TX-Bytes-All:        712792668      12570   3244394   1330716
    hw-put-tx-buf:               1          1         1         1
    hw-tx-start:           1430422        953    449902     12730
    hw-tx-proc-desc:       1430422        953    449901     12730
    TX-Failed:                   0          0         0         0
    txq-memory-address:   81f1a174   81f1a1f0  81f1a0f8  81f1a07c
    axq-qnum:                    2          3         1         0
    axq-depth:                   0          0         1         0
    axq-ampdu_depth:             0          0         1         0
    axq-stopped                  0          0         0         0
    tx-in-progress               0          0         0         0
    pending-frames               0          0         1         0
    txq_headidx:                 0          0         0         0
    txq_tailidx:                 0          0         0         0
    axq_q empty:                   0          0         0         0
    axq_acq empty:                 1          1         1         1
    txq_fifo[0] empty:             1          1         1         1
    txq_fifo[1] empty:             1          1         1         1
    txq_fifo[2] empty:             1          1         1         1
    txq_fifo[3] empty:             1          1         1         1
    txq_fifo[4] empty:             1          1         1         1
    txq_fifo[5] empty:             1          1         1         1
    txq_fifo[6] empty:             1          1         1         1
    txq_fifo[7] empty:             1          1         1         1

</pre>","",2012-07-08 12:42:28.295884,1
307,307,3,"h1. Solving the Home Router Disaster... Annotated

{{>toc}}

In may of 2011, Jim Gettys and Dave Taht got together (for the first time ever in person), to try to come up with a project plan that we could pitch to various interested parties in search of larger comprehensive approaches to the problems home routers had, to find funding... We circulated the following document widely - and while funding for various bits and pieces (dnssec, build cluster, package signing, various subcontracts for various other bits) did arrive, but what worked - was engaging the unbelievable number of volunteers to contribute where they could, when they could, tons of press, and the support and enthusiasm of the linux and openwrt community... and most importantly - visible progress and success at beating every problem on all fronts.

We never got around to actually posting what we'd written then, so perhaps this is of historical interest.

h1. Tackling the Internet Edge Problems

Jim Gettys and Dave Taht
Version 0.0, July 21, 2011

h2. Solving the Home Router Disaster

Home routers are a mostly unrecognized major problem for the Internet. Home routers have serious problems with bufferbloat, IPv6, and security.

Commercial firmware for most of the market is based upon Linux kernels and other open source projects, but the firmware is generally un-maintained after release; worse yet, the code base they use is over five years old! This dysfunctional behavior is all-too-common in the embedded Linux market, which both of us helped spark over a decade ago in our respective careers, but failed to prevent despite our attempts. 

The incumbent vendor's current code bases are therefore useless as a platform for research and development as any patches for problems are impossible to integrate easily into the upstream projects. Competitive pressures among vendors make it hard for major vendors to want to contribute to solving the problems if their competition will benefit.

There is an alternative bleeding edge and open code base available in the OpenWrt project. OpenWrt is already good enough that older versions of OpenWrt are shipped in some of the smaller commercial home routers.

Home routers using firmware from OpenWrt have matured to where modest amounts of labor can succeed in a such a technology demonstration, providing the “proof of principle” to encourage the embedded network industry to move quickly to address these issues.

CeroWrt is an OpenWrt router platform for use by individuals, researchers, and students interested in advancing the state of the art of the Internet. Specifically, it is aimed at investigating the problems of latency under load, bufferbloat wireless-n, QoS, security and the effects of various TCP algorithms on shared networks.
CeroWrt is motivated by the following observations:

# A standardized test platform is needed for testing AQM algorithms. Duplicatable results are needed from diverse wireless environments, which presents a much harder problem than Internet core routers. AQM algorithms which work in this environment may or may not be applicable to broadband devices and core routers. To solve both bufferbloat and IPv6 problems, we need an inexpensive test platform on which we can perform tests in diverse environments.
# Bufferbloat, IPv6 and security problems are most severe in home routers.
# IPv6 is not deployable without name services:the addresses are effectively impossible to type by mere mortals and management of a home network is untenable
# The home router market is typical of the embedded Linux market:it is dysfunctional, often shipping firmware five or more years obsolete at FRS. While we can fix upstream Linux and other projects relatively quickly, the dysfunctional embedded market leaves home routers crippled indefinitely unless the market can be shifted.
￼￼￼￼￼￼￼￼# A few of the smaller home network vendors already ship OpenWRT based products.
# An existence proof of a home router working well will enable the ISP's to exert full pressure on the home router market; but without an existence proof, it is unlikely the market place will quickly provide one.
# Security of home network devices is anywhere from poor to horrific; firmware is not updated once it is stable in a device, and then moulders until that hardware is retired, inviting attacks on the routers; we await the day the first major disaster occurs, but it is only a matter of time.
# End users do not have any assurance of DNS lookup integrity: DNSSEC needs deployment all the way to the edge of the network

_In essence, this proposal is to augment the OpenWRT project to tackle the modern home router disaster, to take OpenWrt from a niche for wireless enthusiasts to a real proof of principle meeting the needs of researchers, and then the mass market, enabling rapid adoption of the needed solutions for IPv6, bufferbloat and security in the home router market._

All work will be open source and be in and with the upstream projects to enable the existing home router industry to pick up improvements as rapidly as possible, whether or not they directly use the OpenWRT/CeroWrt code base. Fixes will be routinely pushed “upstream” to the key open source projects from which OpenWrt is derived: e.g. kernel.org, ISC bind, busybox, etc. Thus, even if vendors never directly use the results of CeroWrt, at least the results may eventually trickle into their firmware when they belatedly upgrade to new versions of those packages.

h2. Features

CeroWrt is a OpenWrt build specifically tailored to meet the observations above, initially targeted for the Netgear WNDR3700v2, a modern dual radio 802.11n home router for which there is 100% open source Linux support, enabling debugging of all parts of the system. This router also has sufficient flash memory to lift some of the size constraints that have made some potential solutions difficult, such as using ISC's Bind, which already supports DNSsec, which dnsmasq does not..These routers are widely available for about $130, putting them in reach of almost anyone, and we can expect the price point of such routers to drop. To be confident in solutions for bufferbloat and IPv6 both, we must build a large community of contributors, developers, researchers and users.

CeroWrt currently includes:
• Current Linux kernel (2.6.39), with additional TCP (westwood+, reno, veno, cubic, bic) and AQM algorithms (SFB, DRR) that are not normally enabled.
• Preliminary debloating of excessive buffering in the wired and wireless stacks
• A number of recent ECN fixes that have been pushed upstream into the latest Linux
releases for testing. ECN is enabled in these routers.
• ISC Bind enables “plug and play” IPv6 naming and publication of names into the global DNS; plugging a named system into a home network should enable it's named access from anywhere, without any manual configuration or intervention from the user.
• ISC BIND to enable end-to-end name service integrity using DNSsec
• Extensive network test tools for debugging/instrumentation/benchmarking of home network behavior
• IPv6 support: 6to4 and 6in4 is available and 6to4 is enabled by default if a globally routable IP address is available.
• Web server (lighttpd) and polipo caching web proxy.
• Luci web interface
While the CeroWrt distribution has (just) been integrated to the point of demonstration, the work has only just begun. The integration was relatively easy: the reduction to near production use and widespread deployment and testing will be hard. Funding is needed to move the project along in the following areas:
• QA and systematic testing of the distribution
• Development of scripts and test tools for evaluating AQM algorithms such as SFB and RED Light has yet to begin; these will require extensive testing and validation before deployment. This testing must be made in real diverse environments. Asking everyone to “roll their own” router distribution is more work than most people can do; installing a prebuilt image onto standard hardware enables much wider testing.
• 3g and 4g support and testing via USB dongles; the problems here are both similar and different than 802.11, due to the technology similarities and differences.
• Appropriate classification and shaper scripts; Diffserv support in wireless and in the router to control marking of packets and interact properly with 802.11 QOS features
• DNSSEC requires having valid time for it to function: solving this “chicken and egg” problem is required to have DNSSEC enabled at all times.
• IPsec based VPN support, with support for two factor authentication
• The experiences of since January show that any code in the networking stack that has never been used or deployed has bugs. We've help fix multiple bugs in ECN present for a decade. There will be more...
• Wireless drivers themselves are problematic, attempting much too aggressive retransmission in the face of packet loss, increasing effective bloat
• Performance and feature work in general: any “proof of concept” router needs competitive performance and essential features found in existing commercial firmware to be seen as credible to exert market pressure. There are known and unknown problems in this area to be overcome.
• User interface work for DNS & DHCP, and for providing a “simple” flag in the Luci interface in general, to enable a larger user base and project. Most users should not be presented with all the ways you can tweak a home router, which is needed to meet the overall goal of the OpenWRT project, which includes enthusiasts in community networking with additional requirements that are beyond most users
• OpenWrt is already a package based system which allows for updating of devices in the field: however, its package system (opkg) does not as yet have support for digital signatures on those packages
• Over time, additional hardware devices will need support both for the base system IPv6 and bufferbloat work, but also to enable supporting a larger community of users

h2. Oversight and Organization

The stakeholders include:
• The OpenWrt project
• ISOC?
• Funders (Google? Major ISP's?)
• Researchers, who need a platform for development in these areas
• Router vendors, if/when they choose to become involved
• The community of internet users

An advisory committee is needed to express the needs of these communities to the project.

The budget below is focused on the particular goals expressed above, and to provide the development infrastructure and framework to enable funding to be used wisely and rapidly to address the issues at hand. As in any open source project, constituencies desiring particular features beyond the immediate bufferbloat, security and IPv6 goals should provide sweat equity in the OpenWRT/CeroWRT project more than regarding this project as a consortium that is directed by its members.

Avoiding mission creep is necessary.

In addition to developing a platform capable of repeatable results there are multiple sub- projects that can spin independently, the development of a testbed that can be built at scale, improvements to existing test tools, and the engagement with researchers and students in academia.

h2. The Testbed Problem

Van Jacobson notes that it's a huge gulf between minimum publishable unit and mass deployment. How do we get rigorous testing of AQM/ECN etc? With 802.11 driver and technology problems mixed in, this is non-trivial. Open source developers can't easily test at scale with many devices and multiple routers. Doing preperatory work at for testing at scale needs to get moving as it takes time to setup. We're nearly ready to start testing... Emulab may be an answer here: but they'll need to update their hardware and probably need some funding. If not Emulab, UNH IOL? How do we get researcher's engaged on the issue? Who to talk to? I knew Jay Lepreau, but don't know any of the others? How to find someone to lead the testing charge? Funding for upgrade and someone to lead the testing effort? How to spark such research? What meetings should CeroWrt get pitched to? How to ensure the Linux community's involvement?

h2. The Test Tools Problem

Better bufferbloat/ECN detection/debugging tools are needed.In addition to tools that are effectively orphaned, such as pathchar/pchar, and there are many, such as netperf, that can be improved. Government funding currently has no model to follow through on research tools that are successful (examples: pathchar, or netalyzr). Can this be fixed? Or is it easiest to seek other funding? M-labs? The tools to debug the network are not seeing proper development and maintenance (with a few notable exceptions, such as wireshark). Who is the right person to lead a focussed charge here?

h2. Dataset Problem

How do we collect and thoroughly analyze what we are seeing? How do we get engagement from the research community? How do we bridge the gap between that community and the open source community? End-to-end systems testing and debugging is hard, particularly if you don't happen to stumble into a simple test case as Jim Gettys did for bufferbloat. I knew just enough, and happened to know the right people, to send the weird traces I took to people who could confirm the problem. And, with Netalyzr, we knew how widespread the problem was. Bufferbloat has been a significant problem for at least seven years, but no action has resulted due to insufficient analysis, and similar problems encountered again and again since the development of the ARPAnet. When weirdness is detected, how do the experts get called in?

h2. Budget

Approx 2m/yr for 3 years

A project lead for CeroWrt - Dave Täht AQM testing lead

AQM research funding

Probably a few others full time. Budget for the related organizations.

Much of the rest of the work is naturally able to be done via contract. Various other roles such Sysadmins, build engineers, packagers, test designers, QA, device driver developers, web developers, etc, can be hired or contracted on an as needed basis, and pulled from the 260 volunteers currently participating in the ongoing Bufferbloat effort.

There will be travel and lab expenses as well.

","",2015-01-20 09:27:15.207256,13
252,252,3,"h1. An enormous backlog of email

I'm just tossing the backlog of ideas into here until it can get sorted out - dtaht

[[Earthquake Sensing with network delay tomography]]

[[The initial idea]]

[[Using CPE, home gateways and settop boxes]]

Andrew McGregor:

In Christchurch, we've gotten really good at estimating S-wave
strength from the P-waves and taking cover in the ~400 ms we get...
that's enough warning to beat stuff falling out of the ceiling to the
floor, just.  That's what ten thousand aftershocks of experience gives
you.

But more warning would be really good.  To see what can be done with a
good seismograph network, take a look at http://beta.geonet.org.nz/,
which gets a magnitude and location estimate within about a minute
(the NZ seismograph network is truly excellent and doesn't really need
improving in this way, although the warning system doesn't exist right
now).

Just last night I had the experience of talking to someone much closer
to the epicenter on the phone, and hearing the time difference.  It
was enough for a couple of sentences, even though it was only ~15km
distance.  This event, btw:
http://beta.geonet.org.nz/quakes/region/canterbury/2012p379213

Fortunately, by now the biggest aftershocks we're getting are like
this one, small enough not to cause problems:
http://beta.geonet.org.nz/quakes/region/canterbury/2012p378954

Doing it with home routers is a good idea because, unlike phones, they
don't get moved often.  That would make it much easier to tell the
difference between 'cat knocked the router off the shelf' and
'P-wave!!!!'.
","",2012-05-26 18:53:31.15819,2
293,293,3,"{{>toc}}

h1. Wondershaper Must Die (editorial by Dave Taht)

_Note: This editorial was written in December 2013, and has been updated from time to time. But what should you use instead of Wondershaper? CeroWrt's full suite of SQM shaping is now available in OpenWrt Barrier Breaker and Chaos Calmer builds - http://openwrt.org Use SQM - it works great._

Wondershaper was great for its time (2002). It was one of the first integrated [[Smart Queue Management]] systems, incorporating packet scheduling (SFQ), rate limiting, policing, and QoS in a tiny amount of easily understandable code.  It spread around the internet like wildfire back then. Nearly every cybercafe I've been in, from the US to Sri Lanka to Nicaragua, deploys it or some variant thereof to keep latencies low and web/gaming/voice traffic optimal for dozens of users. Dozens of more sophisticated [[Smart Queue Management]] scripts are descended from it. It worked well in its target environments. And yet, WonderShaper's currently wrong, so wrong, for today's internet. Much better alternatives exist. 

To a huge extent the eventual development of fq_codel was driven by systematically addressing the faults in wondershaper, and coming up with new techniques to handle today's wider variety of environments and bandwidths. Our thinking ultimately led to the publication of the ""smart queue-ing manifesto"":http://gettys.wordpress.com/2013/07/10/low-latency-requires-smart-queuing-traditional-aqm-is-not-enough/ .

Recently I've seen new activity making wondershaper (wondershaper ""NG"") easier to use, and getting it into more distros, without addressing the underlying faults. I am VERY GLAD people are trying to update it, as it has a well-deserved reputation, and I sure wish we could update the original definition of it, or create a wondershaper2, that was actually more correct for today's environments, AND fix all the web references to it.

But: the flaws are so legion and in nearly every line of code, that the best I can hope for is to get the newer maintainers to at least address the low lying fruit in it, and for my own efforts to continue with the alternate line of work that is in CeroWrt's [[SQM]] system. 

Wondershaper is a fine example of tight, well written, undercommented code that doesn't work right anymore. So I'm going to paste the original code here and comment on it in the hope that one day a better example emerges, and as an object lesson that a smart network queue-ing system that worked well yesterday may not work tomorrow.

Ironically... when the bufferbloat project started in 2011, I'd called up Jim Gettys, told him I understood him, and volunteered to write this article explaining all that was wrong with wondershaper (that I had learned from a decade of using derivatives) I also agreed to loan him a server... It's now 3 years of nearly full time work on bufferbloat later and I'm just now getting around to writing the original intended rant. My comments on the code are in ##s.

h1. Wondershaper annotated source code

<pre><code class=""bash"">
#!/bin/bash
# Wonder Shaper
# please read the README before filling out these values 
#
# Set the following values to somewhat less than your actual download
# and uplink speed. In kilobits. Also set the device that is to be shaped.

DOWNLINK=800
UPLINK=220
DEV=ppp0

## At the time wondershaper was developed, DSL MTUs were typically 584 bytes
## and encapsulation-aware techniques that compensated for ATM and PPPoE didn't
## exist. An entire masters thesis got written by Jesper Brouer on fixing htb to
## to work right with ATM framing and the code landed in the kernel in 2005.
## http://www.adsl-optimizer.dk/

## Wondershaper was pretty optimal at 800kbit down 220 up, in 2002. That was when
## IW2 (Sending 2 584 byte packets in TCP's Initial Window) was used... and
## web pages averaged in size of 70k, and coexisted with ssh traffic and voip.
## It didn't scale up then, and doesn't work well at all now, at any bandwidth.
## See the plots at the bottom of this set of comments

# low priority OUTGOING traffic - you can leave this blank if you want
# low priority source netmasks
NOPRIOHOSTSRC=

## NAT was not widely deployed at the time. Optimizing for source addresses
## doesn't WORK for Natted hosts in this code.

# low priority destination netmasks
NOPRIOHOSTDST=

# low priority source ports
NOPRIOPORTSRC=

## Same problem with NAT as the above

# low priority destination ports
NOPRIOPORTDST=

# Now remove the following two lines :-)

echo Please read the documentation in 'README' first
exit

## Wondershaper was *demo* code intended to be READ and understood before
## using.

if [ ""$1"" = ""status"" ]
then
	tc -s qdisc ls dev $DEV
	tc -s class ls dev $DEV
	exit
fi


# clean existing down- and uplink qdiscs, hide errors
tc qdisc del dev $DEV root    2> /dev/null > /dev/null
tc qdisc del dev $DEV ingress 2> /dev/null > /dev/null

if [ ""$1"" = ""stop"" ] 
then 
	exit
fi


###### uplink

# install root HTB, point default traffic to 1:20:

tc qdisc add dev $DEV root handle 1: htb default 20

## I have seen variants that use an incorrect default. Some use 0, which
## bypasses htb entirely for packets that aren't classified correctly.
## Doesn't handle ATM or PPPoE framing correctly as per the linklayer
## code in newer versions of htb

# shape everything at $UPLINK speed - this prevents huge queues in your
# DSL modem which destroy latency:

tc class add dev $DEV parent 1: classid 1:1 htb rate ${UPLINK}kbit burst 6k

## The burst size was correct for 2002 internet which used TCP in IW2 and IW4
## (2 or 4 initial packets), at 584 bytes each.
## Today's internet is migrating to IW10, with a MTU of 1500 bytes prevailing,
## leading to a burst size far greater than 6k. And for all that, the ""htb"" 
## burst is actually a function of how fast your processor can schedule packet
## delivery. If you can schedule packets at 1.5k per burst, that's better than 6k. 

# high prio class 1:10:

tc class add dev $DEV parent 1:1 classid 1:10 htb rate ${UPLINK}kbit \
   burst 6k prio 1

## burst size wrong. Furthermore packets that match the highest priority 
## class can starve all the other classes.

# bulk & default class 1:20 - gets slightly less traffic, 
# and a lower priority:

tc class add dev $DEV parent 1:1 classid 1:20 htb rate $[9*$UPLINK/10]kbit \
   burst 6k prio 2

## Same problem with burst size. Also, shaping at 90% for best effort made 
## sense if you were trying to reserve space for a classifiable VOIP call or
## ssh or dns when you only had 220kbit uploads... 
## but if you have a fatter uplink, say 10Mbit, you are just wasting
## available bandwidth for no reason. 

tc class add dev $DEV parent 1:1 classid 1:30 htb rate $[8*$UPLINK/10]kbit \
   burst 6k prio 2

# all get Stochastic Fairness:

tc qdisc add dev $DEV parent 1:10 handle 10: sfq perturb 10
tc qdisc add dev $DEV parent 1:20 handle 20: sfq perturb 10
tc qdisc add dev $DEV parent 1:30 handle 30: sfq perturb 10

## SFQ was a breakthrough and why wondershaper became so popular so fast.
## However, the perturbation idea causes fat TCP flows
## to deliver out of order packets, often triggering a window reduction at the
## very least, costing bandwidth and latency. Perturbation was ""improved"" to 
## not deliver out of order packets in Linux 3.6. We didn't realize until much
## later that this rehashing was acting as a ""poor man's AQM"" - reordering/scrambling 
## fat tcp flows, which on most OSes, causes a reduction or reset of cwnd.
## (Linux TCP, around 3.9, gained much more robust reordering compensation
##  as well, mostly negating the scrambling of perturb 10)
## Comparing SFQ pre 3.2 to SFQ now would be a worthwhile exercise.

## (?) Still, periodically
## rehashing a stable system every 10 seconds seems to be a bad idea.
## fq_codel merely uses a unique hash per invocation, and shoots at
## latency causing flows to make them slow down

## Furthermore SFQ by default is limited to a buffer depth of
## 127 packets, which is too short for higher bandwidths.
## We ""fixed that"" allowing for larger flows and depth parameters
## but that led to too much buffering for lots of flows, and not
## enough for only one, at higher bandwidths. It was clear that
## to get SFQ to scale, we needed an aqm component, and thus
## SFQRED was born... and that also proved hard to tune.

## Also...
## I have seen people trying 7 bands of sfq queueing, which leads
## to the worst case buffering for the lowest priority flow to be 889 packets.
## To translate that into time, at 1Mbit, that translates to over 11 seconds
## of potential buffering in that case, well over any sane timeout for most
## protocols.

## If you impose a maximum depth of X on a flow, it might be too short
## if that flow is all you have. Or X will be inevitably too large
## if you have lots of flows... and if max-packets-in-queue is your
## only way of ever dropping packets, using multiple bands of 
## separate queues gradually makes your worst case results worse...

## After that exercise it was obvious that ""X"" needed to be an
## equation, and buffer space needed to be shared among queues.

## We later worked on ""sfqred"" which combined the RED AQM with SFQ
## which tried to hold queue depth to saner levels.

## It worked pretty good! Never got around to finishing the ARED version
## because then codel arrived...

## fq_codel automatically manages depth. It looks directly at the latency
## in the flow(s) and shoots at the fattest flows to get them to slow down.
## Codel can be combined with many other packet scheduling techniques to
## achieve the desired results, but so far the fq_codel variant is the winner.

## It's not perfect yet! At lower rates it helps to 
## fiddle with fq_codel's target and quantum. A smaller quantum (300)
## is useful for giving smaller packets a slight boost over bigger packets.

## You can easily swap out fq_codel for sfq in wondershaper and get a benefit.
## Between Linux 3.4 and Linux 3.6 Eric Dumazet did a lot of work implementing 
## ideas in SFQ that had been discarded as too hard back in 1992. See:
## http://www.rdrop.com/~paulmck/scalability/paper/sfq.2002.06.04.pdf‎

# TOS Minimum Delay (ssh, NOT scp) in 1:10:

tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
      match ip tos 0x10 0xff  flowid 1:10

## the 0xff only matches against non-ecn enabled flows. I think a correct version
## is 0xfc (or is it 0xcf?). IF you are going to use ECN, it's a good idea to use
## it on your latency and loss sensitive flows. ECN was standardized in 2002.
## Furthermore many ssh's don't use this marking.
## and this filter (and those that follow) do not apply against ipv6! Sure, go
## ahead, make ipv6 behave worse than ipv4 than it already does! 

# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
tc filter add dev $DEV parent 1:0 protocol ip prio 10 u32 \
        match ip protocol 1 0xff flowid 1:10

## Impressing your friends is good for a demo, but in the real world you want
## to *deprioritize* icmp, not prioritize it. Putting it in your priority flow
## list, as is done here leaves you subject to ping flood attacks among other things
## Change to flowid 1:30.

# To speed up downloads while an upload is going on, put ACK packets in
# the interactive class:

tc filter add dev $DEV parent 1: protocol ip prio 10 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   match u8 0x10 0xff at 33 \
   flowid 1:10

## There have been a lot of variants of this line in various implementations.
## One variant only prioritized 64 byte packets, which, as the TCP timestamp
## became common over the last decade, missed those (66 bytes).
## This also doesn't work against ipv6, nor against protocols like mptcp or sctp or QUIC.
## In reading this bit of magic today, I'm not sure what the whole string in this version
## really does. (?) ACK prioritization is very common in many devices and I'm pretty
## sure it's wrong in nearly all of them.

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

# some traffic however suffers a worse fate
for a in $NOPRIOPORTDST
do
	tc filter add dev $DEV parent 1: protocol ip prio 14 u32 \
	   match ip dport $a 0xffff flowid 1:30
done

## Explicitly deprioritizing some stuff is still a pretty good idea. However
## in an age where everything runs over port 80 and 443, not helpful.

for a in $NOPRIOPORTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 15 u32 \
	   match ip sport $a 0xffff flowid 1:30
done

## doesn't work with NAT or ipv6

for a in $NOPRIOHOSTSRC
do
 	tc filter add dev $DEV parent 1: protocol ip prio 16 u32 \
	   match ip src $a flowid 1:30
done

## doesn't work with NAT or ipv6. Note that some tc filters have gained
## the ability to look at pre-natted values in modern linux releases

for a in $NOPRIOHOSTDST
do
 	tc filter add dev $DEV parent 1: protocol ip prio 17 u32 \
	   match ip dst $a flowid 1:30
done

## Still reasonable but not very useful

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

tc filter add dev $DEV parent 1: protocol ip prio 18 u32 \
   match ip dst 0.0.0.0/0 flowid 1:20

## No IPv6. And it's not necessary in light of the catchall rule
## for htb tossing unmatched packets into flowid 1:20

## Wondershaper needed this for the non-htb version.

########## downlink #############
# slow downloads down to somewhat less than the real speed  to prevent 
# queuing at our ISP. Tune to see how high you can set it.
# ISPs tend to have *huge* queues to make sure big downloads are fast
#
# attach ingress policer:

tc qdisc add dev $DEV handle ffff: ingress

# filter *everything* to it (0.0.0.0/0), drop everything that's
# coming in too fast:

tc filter add dev $DEV parent ffff: protocol ip prio 50 u32 match ip src \
   0.0.0.0/0 police rate ${DOWNLINK}kbit burst 10k drop flowid :1

## The ingress policer doesn't work against ipv6, so if you have mixed traffic
## you are not matching all of it, and the policer fails entirely
## A correct, modern line for this would be:
## tc filter add dev ${DEV} parent ffff: protocol all match u32 0 0 \
## police rate ${DOWNLINK}kbit burst 100k drop flowid :1
## 
## Even if it did work, the police burst size is too small for higher speed 
## connections and what I suggest above for a burst size needs to be 
## a calculated figure.(that one works ok at 100mbit)

## My tests at 20Mbit showed the wondershaper default burst cut transfer rates in HALF.
## The modern day replacement for this is the IFB and mirred commands, tied
## to a htb implementation with fq_codel.
## Inbound policing was a useful idea made bad by the available technologies at the time.
## I have come to understand that we can, actually make better policers now, 
## and that inbound shaping is not the answer to all things. I call the core idea ""bobbie""
## as that's what the unarmed police in England are called, and as it uses ideas from fq_codel that
## will make the actual rate ""bob"" up and down, in a kinder, gentler fashion, hopefully
## lighter weight than shaping, and support ECN - so it doesn't need to shoot packets, just tap them.
## That said, I despair of even writing it, given that where it needs to deploy is in places
## that linux does not currently touch.
</code></pre>

I could sit here and rewrite wondershaper to keep the strength of it as a coding example of how to use filtering, etc. OR: I could point you at the [[SQM]] code in cerowrt, or the ""traffic shaping example in gentoo"":https://wiki.gentoo.org/wiki/Traffic_shaping . 

Or I could show you a benchmark of what happens if you naively run wondershaper rather than a modern fq_codel based shaper. All benchmarks were run on CeroWrt 3.10.24-4 or later.

h1. Benchmarking Wondershaper vs CeroWrt's SQM

h2. WonderShaper at 25Mbit down, 4Mbit up

!http://www.bufferbloat.net/attachments/198/149.20.63.30.rrul_noclassification-wondershaper-fixedecn.svg!

The black line is an average of the fat streams and does not account for acks in the opposite direction or the measurement flows. In the latency test (third part of the chart), the black line is also an average, and each measurement stream stops at the first packet loss. (See [[codel:RRUL_test_suite]] for more details on this benchmark and these plots.

Using wondershaper at this speed inbound bandwidth is less than HALF of what has been specified, and the outbound streams - despite being optimized, still get 12ms of extra induced latency. The SFQ tail drop buffering scheme causes huge swings in data delivery, too. Somewhere around here I have an example of what permutation used to do to tcp in older Linux versions. It isn't pretty.

h2. CeroWrt's fq_codel based SQM at 25Mbit down, 4Mbit up

!http://www.bufferbloat.net/attachments/199/149.20.63.30.rrul_noclassification-ethernet.svg!

Here you can see over twice the incoming bandwidth, 60% less induced latency in the measurement streams,
and much ""tighter"" behavior of the tcp streams. Note this is also against the simplest shaper in CeroWrt, were this
to be against the three band one, the EF and ICMP streams would be prioritized.

In short: Wondershaper is thoroughly obsolete. Yes, it can be improved. But if you improve it you end up with something else entirely.

h1. Some additional graphs:

h2. WonderShaper configured at 800kbit down 220kbit up on the same test.

!http://www.bufferbloat.net/attachments/200/wshaper-800-220.svg!

The graph is spotty as tcp up is really, really hurting, and downloads aren't as good as they could be. And you can see the buffer depth in sfq causing nearly 300ms latency for the measurement streams. But ping? Ping, oh man, that's optimized. Just what you need to impress your friends, right?

h2. 800x220, with CeroWrt fq_codel SQM
 
Note: fq_codel here has target of 60ms and is ecn enabled.

!http://www.bufferbloat.net/attachments/201/3band-800-220.svg!

We still have problems with the graphing tool... but we do considerably better across the board. However we still lose the measurement streams due to collateral damage from ecn and the DRR based system fq_codel uses.

h2. 800x220 nfq_codel based CeroWrt SQM

(nfq_codel is fq_codel modified to behave more like SFQ for lower bandwidths. Despite the filename ecn was disabled)

!http://www.bufferbloat.net/attachments/202/nfq_codel-800-220-ecn.svg!

(nfq_codel, because it is more sfq-like is better at preserving low rate flows than fq_codel is.)

NOTE: It would be good for me to re-run these benchmarks at wondershaper's original speed range and mtu.
A comparison vs htb with and without atm compensation would be good too.","",2015-05-25 18:37:25.741133,61
303,303,3,"h1. Tuning your CeroWrt default gateway (External Gateway Router - EGR)

CeroWrt *routes* by default, not bridges. This brings in some complexity in setup but large improvements in latency and jitter.

If you want multiple routers see also: [[Setting up an interior gateway router]].

For information on bridging, rather than routing, see [[Setting up CeroWrt to bridge]]. 

This section is about tuning a cerowrt box to work better as a default gateway and working better with internal routers.

h2. CHANGE THE PASSWORD

There is no point in running things over SSL or secure sockets if you have a default password. Change it. Also upload an ssh key.

h2. Renumber & rename

For starters, you need to renumber so each router is on a unique IP address, and serves up unique IP addresses to hosts connected to it.

What I typically do is pick a subnet (172.20.0.0/16 in this example) and renumber EVERYTHING by this scheme (this makes it easy to add more routers)

I strongly encourage everybody to renumber their networks in this way, and get off the tyranny of everything being on 192.168.0.1 and double and triple nat. If you get off the 172.30.42 network for everything but newly flashed CeroWrt routers, it makes booting up more routers easy, they will boot and mesh automagically.

You need a unique DNS subdomain, and SSID, and to disable the avahi's mdns forwarding. The gui makes this tedious; the sed command and default ip address scheme in cerowrt makes this a snap:

<pre>
sed -i s/172.30.42/172.20.0/g /etc/config/* # my main router is 172.20.0 the next router would be 172.20.1, 172.20.2, etc
sed -i s/home.lan/mygw.hm.example.org/g /etc/config/* # use your vanity domain name for something!
sed -i s/CEROwrt/MYGW/g /etc/config/wireless # ""Daaaaad... CEROwrt"" is down... ""Which Cerowrt, son?"" the ""MYGW.""
/etc/init.d/avahi-daemon disable # regrettably mdns does not work yet
</pre>

You can elide the snarky comments after the ""#"". And don't copy/paste unless you really want to be living in example.org and on that subnet.
(valid ranges are slices of 10.0.0.0/8, 192.168.0.0/16 and 172.16.0.0/12)

The way the above domain naming scheme works is that you would have example.org and things like www.example.org hosted somewhere else,
and delegate dns naming for hm.example.org to your main router, and then create subdomains off of that for each router.

h2. Rename the router and set the correct timezone

/etc/config/system has the default name of the router and the timezone (it's easiest to change this via the web interface)

/etc/config/dhcp has various names and aliases for the router (and other devices on your network)

h2. Fix Firewall rules

The default firewall rules are designed to work on your external gateway router with no modification. 

h2. Tell the routing daemon to supply a default route to other routers.

In /etc/config/babel change these two stanzas from true to false.

<pre>
config filter                                                                   
        option 'ignore' 'false' # change from the default ""true"" to false 
        # Type                                                                  
        option 'type' 'redistribute'                                            
        # Selectors: ip, eq, le, ge, neigh, id, proto, local, if                
        option 'ip' '0.0.0.0/0'                                                 
        option 'le' '0'                                                         
        option 'proto' '0'                                                      
        # Action                                                                
        option 'action' 'metric 96'                                             
                                                                                
# if you are an ipv6 source specific gateway un-ignore                          
config filter                                                                   
        option 'ignore' 'false' # change from the default ""true"" to false.                                             
        # Type                                                                  
        option 'type' 'redistribute'                                            
        # Selectors: ip, eq, le, ge, neigh, id, proto, local, if                
        option 'src_ip' '::/0'                                                  
        option 'src_ge' '0'                                                     
        option 'proto' '0'                                                      
        # Action                                                                
        option 'action' 'metric 96'                                             
#       These distribute all the routes on all the interfaces                   
#       For both ipv6 and ipv4   

</pre>

Don't do this on interior routers, only on routers with direct access to the internet. Since the advent of [[source specific routing]] you can actually have multiple connections to the internet and each one can provide a default route to the rest of your network, which is cool, but...

If you supply a default route from an interior router, routing loops happen. Never supply default routes from interior routers.

h2. Reboot

You should reboot at this point. No matter how everything is connected, be it wifi or ethernet or both, the router will pick the best path to
the gateway and you should be able to ssh or access the web configuration interface to the new IP address you assigned it and the new domain
name you assigned it. 

h2. Further tuning

Install the box wherever it goes.

h2. Configure [[SQM]]

Can't stress that more. Fix your bufferbloat! see: [[Setting up SQM for CeroWrt 310]].

You can make your network perform ""like this"":http://snapon.lab.bufferbloat.net/~cero2/jimreisert/results.html

h2. Tune ssh access

The default access policy for some router services is in /etc/xinetd.conf. I use a jump box in the cloud (never mind where),
with a fixed IP, so I can ssh into the routers I maintain from there. It is generally not a good idea to allow generic
ssh access to your router from the whole internet. 

You will end up attracting ssh dictionary attackers tediously pounding away at common logins and password. 

h2. Make dns subdomains match

In /etc/config/dhcp there is support for adding each internal subdomain to your network and the correct resolving nameserver.

h2. Select unique wifi channels

Do a scan of your neighborhood via the gui and choose channels not in use nearby.

IF you are not meshing via wifi, choose a new unique channel for the wireless interfaces, one of 1,6, or 11 for the 2.4ghz radio, and whatever is legal for the 5ghz radio for your country. In the usa, legal 5ghz channels for HT40+ modeare 36, 44, 157, and 165. If you are using ht20 mode more channels are available but only half the bandwidth. 

If you are meshing via wifi, whatever you choose to connect the routers together on needs to be on the same channel. IF you have enough signal
strength it makes more sense to mesh together over 5ghz than 2.4. You can do both, babel will pick the best one. You can even do all three, 
wired, 2.4ghz, and 5ghz, the routing protocol will pick the best route for you.

h2. IPv6

h3. Stable IPv6 addressing

If you are fortunate enough to have stable IPv6 addressing (for example via a HE tunnel), you can allocate ipv6 addresses for each internal router out
of your /48 subnet easily in /etc/config/network:

config interface wan6           
        option ifname   @ge00                    
        option proto    dhcpv6                   
        option 'broadcast' '1'                   
        option 'metric' '2048'                   
        option 'reqprefix' '60' # by default cerowrt wants 6 networks
        option 'ip6prefix' '2001:db8:0:0::/61' # this is an example address! use whatever given you, and get 8 /64s for your second router.
        # increase the 4th stanza by 8 for every new router.

h3. Unstable IPv6 addressing

CeroWrt supports the dhcpv6-pd protocol for getting an IPv6 subnet from providers such as comcast, and it is enabled by default.
If your provider supports dhcp-pd, the below should hopefully ""just work""!

config interface wan6           
        option ifname   @ge00                    
        option proto    dhcpv6                   
        option 'broadcast' '1'                   
        option 'metric' '2048'                   
        option 'reqprefix' '60' # by default cerowrt wants 6 networks. Comcast provides 16. Other providers do more. Feel free to agitate for more.

h2. Known problems with routing in the home

Plenty! (although a lot less than when we started)

h3. Nobody remembers how the internet works

Internet addressing without nat requires unique IP addresses. Always has. Don't forget. If you have two machines on the same IP address bad things happen. If you have two natted networks on the same ip address range, bad things happen. Don't do that. Renumber, always.

h3. UPNP only works on the main router

Gaming consoles, etc, like to try and open ports via the upnp protocol. This works fine on the
main router, but not on internal routers.

h3. Scanning for resources outside the local network does not work

If you scan for a printer that is upstairs while you are downstairs, scanning does not work. You should
make a static IP entry for it, give it a name, and use that instead.

There is a new protocol on its way for fixing browsing across multiple subnets, it's called 
""mdns hybrid proxy"":http://tools.ietf.org/html/draft-cheshire-mdnsext-hybrid-02

There is an optional package for this in the cerowrt packages database called ""ohybridproxy""
but it isn't fully baked yet.

h3. Some devices don't like /27 subnets

The sony line of blue-ray players are known to not like the /27 subnets cerowrt uses. This is discussed on the [[Sony BlueRay Bugs]] page.
","",2014-03-26 10:46:49.583119,14
302,302,6,"h1. Setting up an interior gateway router (IGR)

CeroWrt *routes* by default, not bridges. This brings in some complexity in setup but large gains in latency.

For information on bridging, rather than routing, see [[Setting up CeroWrt to bridge]]. See also [[Tuning your CeroWrt default gateway]].

Nobody remembers how the Internet works. _Internet addressing without NAT requires unique IP addresses._ Always has. Don't forget.

Let's say you want a second router upstairs in your home, where you have run an ethernet cable, what do you do? (Wireless only meshes, or failover from ethernet to wireless is also possible, in CeroWrt).

h2. CHANGE THE PASSWORD

A default password is an invitation to be pownd, and existing malware sometimes does target home routers. Change it! Even better, upload an ssh key.

h2. Renumber & rename

First, renumber so each router is on a unique IP address, and serves up unique IP addresses to hosts connected to it.

By renumbering EVERYTHING to a subnet (172.20.0.0/16 in this example) you can make it easy to add more routers. If you get off the 172.30.42 network for everything but new CeroWrt routers, it makes booting up more routers easy... 

We strongly encourage everybody to renumber their networks in this way, and get off the tyranny of everything being on 192.168.0.1 using double and triple nat. 

You need a unique DNS subdomain, and SSID, and to disable the Avahi's MDNS forwarding. The GUI makes this tedious; the sed command and default ip address scheme in CeroWrt makes this a snap:

<pre>
sed -i s/172.30.42/172.20.1/g /etc/config/* /etc/firewall.user # my main router is 172.20.1 the next router would be 172.20.2, 172.20.3, etc
sed -i s/home.lan/upstairs.hm.example.org/g /etc/config/* # use your vanity domain name for something!
sed -i s/cerowrt/upstairs-gw/g /etc/config/* /etc/avahi/avahi-daemon.conf # rename the router to something unique
sed -i s/CEROwrt/UPSTAIRS/g /etc/config/wireless # ""Daaaaad... cerowrt is down!""... ""Which Cerowrt, son?"" ""Upstairs.""
/etc/init.d/avahi-daemon disable # regrettably mdns does not work yet across multiple routers
</pre>

You can elide the snarky comments after the ""#"". Don't copy/paste unless you really want to be living in example.org and on that subnet. (valid ranges are slices of 10.0.0.0/8, 192.168.0.0/16 and 172.16.0.0/12)

h2. Fix Firewall rules

On an interior router you can disable the firewall rules almost entirely and let your external router take care of partitioning internal versus public networks. 

cp /etc/config/firewall /etc/config/firewall.old first and make /etc/config/firewall look like this:

<pre>
config defaults
        option input 'ACCEPT'
        option output 'ACCEPT'
        option forward 'ACCEPT'

config include
        option path '/etc/firewall.user'

config include 'bcp38'
        option type 'script'
        option path '/usr/lib/bcp38/run.sh'
        option family 'IPv4'
        option reload '1'
</pre>

At a minimum, disable NAT masquerading.

While ""BCP38"":http://tools.ietf.org/html/bcp38 is in theory optional on interior routers, we find it suppresses enough traffic from mdns names that it is worth keeping.

So leave bcp38 support on on your internal routers, but you must add your local subnet choices to it as exceptions to the /etc/config/bcp38 ruleset. In this example we chose 172.20.0.0/16 as our ""networks"", so we add a line in /etc/config/bcp38 on your interior router

<pre>
        list nomatch '172.20.0.0/16'
</pre>

You may want to add a line to allow access to your cable modem, and don't forget that if you have other networks that you will have to allow their use.  For example, jg adds the following two lines as well:
<pre>
        list nomatch '192.168.1.0/24'
        list nomatch '192.168.100.1/32'
</pre>
since he has been foolish enough to not renumber his gateway network away from 192.168.1; his cable modem is located at 192.168.100.1 and it is convenient to be able to monitor its management page.

DO NOT do this on an external router (it defeats the purpose).

h3. No need for a default route

Disable the default route fetching in /etc/config/network, since we are distributing routes via the babel protocol.

<pre>
config interface ge00
        option 'ifname' 'ge00'
        option 'proto'  'dhcp'
        option 'defaultroute' '0'
</pre>

h2. Tell the routing daemon to listen on everything

DO NOT connect the routers together via their LAN ports (you will end up with conflicting dhcp addresses), connect a LAN port of the main router to the WAN port of the interior router.

Change /etc/config/babeld for ge00 from true to false for this stanza. Leave all the other lines the same. 
 
<pre>
config interface ge00                                    
option 'ignore' 'false'  
</pre>

The main gateway needs to be supplying a default route, (which is disabled by default in the babel config; adding this is covered in the main gateway router case).

h3. If you really want some firewall rules

This section needs to move and become a more philosophical page. The point of connecting to the internet is to have good connectivity, and the point of a firewall is to protect machines within network boundaries. Firewalling reduces connectivity, routing increases it, and there are many times where a interior firewall creates difficult to debug problems, and other times where having a firewall is a lifesaver. So here are some basic tips, if you really want some firewall rules on the interior gateway...

If you are meshing via WiFi, you should change the guest network in the firewall to be just the gw10 and gw00 interfaces, and move the gw11 and gw01 to the ""secure"" firewall zone... and hard code in DNS servers.

You can use your internal DNS server via specifying the ip number(s) in a ""dns"" line  for ge00. 

(we used to use the [[AHCP]] protocol to distribute DNS servers. The [[HNETD]] replacement is not yet ready)

If you are going to connect your second router via the WAN port, you would definitely need to disable NAT (masq 0) and need to go through it's babel ruleset and enable ge00, which is a good idea anyway.

It is sanest to run internal routers with few firewall rules, at least to start with. 

IPv6 brings in new headaches...

h3. Set Name Server

We previously used the [[AHCP]] protocol to distribute DNS servers. The [[HNETD]] replacement is not yet ready, unfortunately. So you have to manually configure your name services by editing the file /etc/config/dhcp and add the line:

<pre>
        option server '/gw.example.org/172.20.1.1/'
</pre>
to the ""config dnsmasq"" stanza at the beginning of the file, where gw.example.org is the name of your external router followed by its IP address.  It is faster to use your external router's cache for lookup, possibly avoiding a trip to your external router's DNS server.

h2. Reboot

You should reboot at this point. If you do anything else, it will end up hopelessly confused, anyway. Just reboot.

No matter how everything is connected, be it WiFi or ethernet or both, the router will pick the best path to the gateway and you should be able to ssh or access the web configuration interface to the new IP address you assigned it.

h2. Further tuning

Install the box wherever it goes. Remember NOT to plug in a router to another router via its LAN port, but via its WAN port, or dhcp chaos can ensue.

h2. Make DNS subdomains match

In /etc/config/dhcp there is support for adding each internal sub-domain to your network and the correct resolving name server.

(we are working on making this saner)

h2. Select unique WiFi channels

Do a scan of your neighborhood via the CeroWrt GUI and choose channels not in use nearby.

IF you are not meshing via WiFi, choose a new unique channel for the wireless interfaces, one of 1,6, or 11 for the 2.4ghz radio, and whatever is legal for the 5ghz radio for your country. In the USA, legal 5ghz channels for HT40+ mode are 36, 44, 157, and 165. If you are using ht20 mode more channels are available but only half the bandwidth each; this can be a good trade-off in dense wireless areas. 

If you are meshing via WiFi, whatever you choose to connect the routers together on needs to be on the same channel. If you have enough signal strength it makes more sense to mesh together over 5ghz than 2.4. You can do both since babel will pick the best one. You can even use all three networks: wired, 2.4ghz, and 5ghz wireless, as the babel routing protocol will pick the best route for you.

h2. IPv6

h3. Stable IPv6 addressing

If you are fortunate enough to have stable IPv6 addressing (for example via a HE tunnel), you can allocate ipv6 addresses for each internal router out of your /48 subnet easily in /etc/config/network:

<pre>
config interface wan6           
        option ifname   @ge00                    
        option proto    dhcpv6                   
        option 'broadcast' '1'                   
        option 'metric' '2048'                   
        option 'reqprefix' '61' # by default cerowrt wants 6 networks
        option 'ip6prefix' '2001:db8:0:8::/61' # this is an example address! use whatever given you, and get 8 /64s for your second router.
        # increase the 4th stanza by 8 hex for every new router. There is also a new hint feature which we should document...
</pre>

h3. Unstable IPv6 addressing

We plan to make interior routers work dynamically via the new hnetd protocol. Until then, it is hard to get a subnet from a dynamically changing ipv6 prefix.

h2. Known problems with routing in the home

Plenty! (although a lot less than when we started)

h3. upnp does not work

Gaming consoles, etc, like to try and open ports via the upnp protocol, which does not work. We hypothesize that port forwarding the upnp requests to the main router might work.

h3. Scanning for resources outside the local network does not work

If you scan for a printer that is on one router while you are on another router, MDNS scanning will not work. You should make a static IP entry for it, give it a name, and use that instead. There is work underway to build a DNS hybrid proxy that should eventually solve this problem. We cannot use Avahi on interior, as routing loops and packet storms can occur if you try!

h3. Some devices don't like /27 subnets

The Sony line of blue-ray players are known to not like the /27 subnets CeroWrt uses. This is discussed on the [[Sony BlueRay Bugs]] page.

h3. Chromecast only works on the local WiFi interface

If you are using Chromecast you must connect to the WiFi interface it is on. This is another instance that the DNS hybrid proxy will solve.

h3. May be problem with pimd

You may need to kill and disable pimd as it has been seen to loop.  See bug #448.
",add pimd issue.,2014-09-12 13:23:36.844848,36
67,67,3,"h1. Useless or difficult to utilize wireless hardware 

h2. Netgear's ""Open Source Routers""

All 5 of netgear's marketed-as-""open source"" routers to date are not fully open source, as the broadcom wifi chip is a binary blob that is VERY hard to deal with. There is as yet incomplete openwrt support for the most current model(s).

Yet... The *not-marketed-as-open-source* NETGEAR [[bismark:wndr3700v2]] is MUCH easier to deal with. It has full openwrt support in git head. Go figure!? Would it hurt to market the good and truly open source router to the open source folk? The [[bismark:wndr3700v2]] is best in class for quality, speed, functionality and open-sourceness, and is our first choice for [[cerowrt:wiki|Cerowrt]], [[iscwrt:wiki|ISCwrt]], [[wisp6:wiki|Wisp6]], and [[bismark:wiki|Bismark]] development.

But: Avoid the other ""open source"" models like the plague they are.

h2. Linksys e3000

*AVOID*

h2. Linksys e4000

Not a lot is known at present on this hardware. It is being used, with some success, by comcast, in their 6rd trials.

h2. Broadcom based chipsets

Most broadcom based products are using a binary blob. Although broadcom is trying to work better with the community on creating a usable open source driver, the work progresses slowly.

*Re-evaluate in Nov, 2012*

h2. Marvell based chipsets

h3. Guruplug

With terrible thermals and a very loud fan, this is unusable.

*AVOID*

h3. Dreamplug

While otherwise excellent hardware (512MB of ram, 512MB of flash), and kernel support for the remainder of the CPU's features is rock solid... the wireless chip is not dual band and is presently a binary blob. If marvell can free up the source to this chip, and it's not too horrible, we can put it back on the table. 

The freedombox project plans to use this hardware and have high hopes of doing this.

After dealing with marvell's wireless stuff for a decade now we're decidedly more pessmistic.","",2011-09-27 02:54:58.698412,7
215,215,3,"h1. Network Design

The testbed network is setup as follows

!networkdesign.png!","",2011-10-17 07:18:09.130129,1
273,273,213,"h1. Using Bonjour, mDNS, or ZeroConf with CeroWrt

CeroWrt ships with the Avahi daemon enabled to act as a mDNS reflector. mDNS is an extension to the DNS concept that allows resources such as printers, file servers, web servers, iTunes, etc. to advertise a name along with a description, and of course, the machine's IP address. You can browse your local network to see what resources are available, then configure your computer to use that resource. For example, CeroWrt advertises its SSH and Web services using mDNS/Bonjour. 

CeroWrt's default configuration does not to reflect mDNS requests out the ge00 (WAN) port. This is the proper configuration when CeroWrt is the primary router in a household. However, if you're using CeroWrt as a secondary router, it is convenient to enable the mDNS reflector so you can access resources on your ""regular"" network. 

The configuration is saved in the @/etc/avahi/avahi-daemon.conf@ file. To allow the avahi-daemon to send queries into the ge00 network, ssh into the router, open @/etc/avahi/avahi-daemon.conf@ in an editor, then find the @deny-interfaces=ge00@ line and comment it out by placing a ""#"" at the front, like this:

@#deny-interfaces=ge00@

Then restart the avahi-daemon with this command:

@/etc/init.d/avahi-daemon restart@

mDNS resources on the ge00 port should now be visible and usable. 

*NB:* These steps are included in the script at ""Automated Configuration of CeroWrt"":http://www.bufferbloat.net/projects/cerowrt/wiki/Automated_Configuration_of_CeroWrt

h2. Resources

* Avahi project website: http://avahi.org
* Avahi on Wikipedia: http://en.wikipedia.org/wiki/Avahi_%28software%29
* Bonjour Browser: A Macintosh tool for browsing the Bonjour/mDNS services on the local network http://www.tildesoft.com/
* Bonjour Print Services for Windows: A Windows program that makes it easy to find printers on the local network. http://support.apple.com/kb/DL999","",2013-03-16 12:05:08.093409,11
294,294,213,"h1. SQM

See: [[Smart Queue Management]] for a description of why we're adopting the name SQM.

See: [[Setting up SQM for CeroWrt 310|Setting up SQM for CeroWrt 3.10]] if you just want to set up your CeroWrt router.","",2014-03-18 11:04:13.318496,2
216,216,3,"h1. Home Deployment Test

h2. Pre-requisites

# Encrypted Wireless #285
# Nat on or off? #287 (what devices will these gateways be plugged into?)
# Coherent IP naming & VPN?
# Web server?
# Authentication/Credentials?

h2. Preparation - testbed tests

h2. Deployment

h2. Deployment tests

h2. Needed outcomes

# reliability?
# Useful results?
# Guide for future experimentation","",2011-10-17 07:31:05.718076,5
232,232,213,"h1. Cerowrt router configuration

h2. Setting QoS Properly

*Note:* This process is no longer needed in CeroWrt. See the [[Setting up AQM]] page for a better procedure.

Open the Web LuCI interface. Go to the Network -> QoS page. 

# Uncheck the Enable box to turn off QoS
# Use a speed test (such as http://speedtest.net) to get your network's speed.
# Set Upload and Download to a value a value 95% of the speeds you measured.
# Check the Enable box to turn QoS back on again
# Click Save and Apply button at the lower right.

The image below shows the controls

!CeroWrt-QoS-steps.png!","",2013-03-27 17:00:16.364188,4
248,248,3,"h1. Experimental Features & Solving problems

h2. [[Routing]]

All interfaces are routed, not bridged. 

h2. [[ECN]]

h2. [[Diffserv Marking]]

h2. [[SFQ and SFQRED]]

h2. [[TCP Protocols]]

The default TCP protocol is CUBIC. Despite testing Westwood extensively we found that CUBIC won in every benchmark. It wasn't even close. 
See also: [[Core Differences from OpenWRT]]

h2. [[DNSSEC]] and BIND

h2. Experimental packages

[[ccnx]], [[scamper]], and many of the [[Test Tools]] should be considered highly experimental
","",2012-04-14 12:57:40.358929,2
123,123,3,"h1. Testlab

All external IP addresses are of the form: 172.31.16.Y. For router's main addresses, Y=33.
The NETworks are the 172.31.X.Z networks they serve.

[[What's the naming scheme]]? Some more details on the [[machines|testlab machines]]

Note this document becomes inaccurate about 5 minutes after written.

See also [[using the testlab]]

h2. Servers

|Name|IP|NET|MAC|STATUS|Purpose|PDU PORT|
|[[Jupiter]]||16||UP|GW||
|[[Metis]]||22||IN Progress|X86 GW||
|[[Callisto]]|||IN progress|DNS server||
|[[Sol]]||||MIA|PDU|||

h2. Clients

|Name|IP|NET|MAC|STATUS|Purpose|PDU|Assigned|
|[[Thebe]]||17||UP||||
|[[Io]]||18||IGW|||
|[[Leda]]||19||UP||||
|[[Elara]]||20||UP||||
|[[Carpo]]||21||DOA||||
|[[Aitne]]||22 ||UP||Testgw|Dtaht|
|[[Cero]]| |||||||


h2. TBD

|Name|IP|NET|MAC|STATUS|
|TBD||||NETGEAR stock Firmware|
|TBD||||Buffalo Stock Firmware|


!attached_t.svg!

","",2011-08-02 16:20:57.129132,29
309,309,3,"h1. Manifesto - Wifi need not be slow!

Focusing on reducing latency throughout the wifi stack, firmware, and hardware seems likely to result in the same sort of performance improvements the bufferbloat project has already seen in ethernet based systems.
","",2014-08-09 10:22:28.834775,3
233,233,3,"h1. Pure IPv6 based networking

This is as yet, a draft.

IPv6 has been 'the future' for over a decade now. Making it work right, in time for the 'World IPv6 launch', June 6, 2012, is one of the many goals of cerowrt.

This is how to setup a pure ipv6 based network behind the router itself. While useful as an academic exercise, it is also useful in exposing what, exactly, needs to be done in order to have a working ipv6 based network. 

h2. Get IPv6 working

There are multiple ways to get ipv6 working. The best, of course, is native ipv6, which is coming available from multiple providers, notably comcast. You can also tunnel (6in4), or use 6to4. As cerowrt has 6 default interfaces it is best to get at least a /60, preferably a /56 or better, ipv6 network to play with. 

Present versions of cerowrt try really hard to come up automatically in 6to4 mode. This functionality will be disabled by default
in the near future.

For purposes of this discussion I'm merely going to document how [[bloatlab 1]] is configured. The bloatlab has a /60 ipv6 delegation from isc.org, thus leading to the possibility of 16 distinct ipv6 networks. There is also a 'main' network on which an array of routers and test equipment are configured. 

The internal address range we're using is: 2001:4f8:3:aa00::/60. Any time you see addresses in this range in this document, please substitute your own. 

h2. Configure cerowrt on the right ipv6 addresses

This is in the case of a native ipv6 enabled network. For 6to4 or 6in4 instructions, there will be some more notes soon.

<pre>
config interface 'ge00'
        option ifname 'ge00'
        option proto 'dhcp'
        option accept_ra '1'
        option send_rs '1'

config interface 'se00'
        option ifname 'se00'
        option proto 'static'
        option ipaddr '172.29.6.1'
        option netmask '255.255.255.224'
        option ip6addr '2001:4f8:3:aa0c::1/64'
</pre>

The first stanza for 'ge00' accepts whatever ipv6 address is assigned by the 'RA' protocol and may not be what you need - dhcp-pd is being worked on at present. I note that your should be setting 'ipaddr' to whatever you want to have for your network, not the above.

Add the ip6addr option to each additional interface, incrementing the 4th field appropriately. Note that the /64 is not actually required... In the case of the two meshed interfaces (gw01, gw11), the correct approach is to use the same, single /128 for both (e.g. 2001:4f8:3:aa0e::1/128).

It's simplest just to reboot at this point. Radvd will automatically pick up the ipv6 addresses, and hopefully the default gw will be supplied by the upstream ipv6 router....

h3. Check to see if you have ipv6 addresses on clients after the reboot

And, do you have a default gw?

If so, awesome. Things like ping6 huchra.bufferbloat.net should 'just work'. If they don't, a horde of other problems could be happening and are currently beyond the scope of this document.

h2. Cope with security issues

h3. Get DNS to work right

The integral bind9 server in cerowrt is fully capable of doing DNS over ipv6. However it makes a difference between 'internal' and 'external' views of its database that need to be managed via access control lists (acl)s. Edit /etc/chroot/named/etc/bind/conf/acls.local.conf to have a line in it that matches the address ranges you are using

acl mylan {
        192.168/16;
        172.16/12;
        2001:4f8:3:aa00::/60;
//        2002:XXXX:YYYY::/48; if you are using a 6to4 address
};


IF you have a local forwarder that is ipv6 and dnssec enabled, you can edit the forwarders.conf file in this directory to suit, and uncomment the forwarder line in named.conf.

then restart bind 
<pre>
killall bind; 
nslookup ::1
nslookup ipv6.google.com
</pre>

You can go much further with this than this, notably doing reverse dns, etc, but not today. It is certainly my hope to get to where ipv6 is as transparent to use as ipv4 at some point. I note that most of google's services when bind9 is operating over ipv6, automatically come up on ipv6, so there is generally no need to use 'ipv6.google.com' when things are working properly.

h3. Enable the polipo web proxy

Web proxies have been a standard component of the http protocol since the early days, and despite falling into disuse of late, are the simplest way to retain universal to-the-web access, by using the proxy to translate between ipv6 internally to ipv4 or ipv6 based websites externally. However polipo needs to be reconfigured slightly to accept connections within your network over ipv6. Add the following two lines (Again, substituting your own ipv6 address range) to /etc/config/polipo

<pre>
        option 'dnsNameServer' '::1'
        list 'allowedClients' '2001:4f8:3:aa00::/60'
</pre>

It is also useful to use polipo as a caching web proxy, by putting a flash drive into the cerowrt box and enabling the cache option, but for now

<pre>
/etc/init.d/polipo restart
</pre>

h3. Enable the web proxy on the clients

there are a few ways to do this, the most straightforward is merely to put the ipv6 address of the polipo proxy in your 'network connections->proxies' entry for your web browser. A more 'right' way might be to use the 'wpad' auto proxy configuration facility,
which would be able to supply the right configuration information automatically...

At this point you should be able to surf the web with only minor breakage. In my own tests the only thing that broke was the macromedia protocol used in some TED talks. That is not to say this is perfect....

h3. Enable ipv6 nameservice lookup on clients

Easiest way is to just stick the appropriate 

nameserver 2001:4f8:3:aa0c::1

in /etc/resolv.conf. In an ideal world, a service such as rdnssd or dibbler-client, will do this bit of grunt work for you.

h3. I use git and have to proxy it through polipo

While a few git services already have ipv6 support, github (my main one) does not, so I do this:

https://gist.github.com/49288#file_gitproxy_socat


h3. Samba

Samba 'just works' on ipv6. However there are some firewall rules that will affect getting from the 'guest' networks to the 'secure' networks contained in /etc/firewall.user that should probably be examined.

h3. Try to use ipv6 enabled services. 

For example, ipv6.google.com, and irc chat services such as freenode, are already on ipv6. My primary email servers are also on ipv6, as well as my jabber server. Admittedly, that's me. It is not terribly hard to get this stuff running on various servers, but I'll leave that for another document.

h2. Turn off ipv4 entirely

So you have all the above working and want to go beyond the bleeding edge?

Turn off ipv4 entirely on a client and see what happens. On Linux, it's straightforward:

<pre>
ip -4 addr show dev whatever
# take that address
ip -4 addr del dev whatever that_address
</pre>

And at least until your dhcp refreshes, you will be purely ipv6 and can experience all the pleasures (if any exist) and pain (plenty) that ipv6 can bring to your network.

h2. Known Problems

h3. DNSSL

Having a dns search list was a late addition to the RA protocol and is still not widely adopted. This (as one example), makes implementing wpad support difficult. A test patch is in progress on the router itself, but as for clients...

h3. Security with polipo

The polipo web proxy is a single tier proxy, in that it has no means of discriminating between 'allowed' and 'restricted' networks. By making it available across the entire allocated ipv6 range as done above, the concept of local secure internal and guest networks has been bypassed, anyone that can connect to the proxy can access various web-like services on both 'guest and secure'. This is probably not what you want, but at least the above restriction keeps people from outside your lans, out. Without finer grained access controls in polipo such as what squid has, I don't know how to fix this....

h3. Security with ip6tables

The ip6tables rules have not been fully evaluated as to their effectiveness and thoroughness.","",2012-03-08 09:24:04.990461,8
295,295,213,"h1. Make Wi-Fi Fast Wiki

WiFi may be the single most successful internet access technology. It is used by over a billion people. Unregulated use has enabled an explosion of products and deployments using WiFi. Individuals can take immediate action as no network operator has to be asked to install or extend a WiFi network, and this contrasts strongly with centrally managed and deployed systems such as the cellular telephone based communications systems. One WiFi hop is between any company and a large fraction of its users; yet we have paid scant attention to how well WiFi functions, and nearly none at all at how it will continue to scale to the next 300 million hotspots, and 10 billion new users and devices in the next 4 years. WiFi devices now cost as little as $3, Linux WiFi devices as little as $9. A large fraction of these devices run/will run Linux, and the current Linux WiFi stack and drivers are far from optimal.

There has been little cross-fertilization between the participants of the IETF, who understand how the Internet's end to end protocols function, and the IEEE participants in the 802.11 standards process who are primarily radio and hardware engineers. WiFi downward compatibility constraints causes increasing complexity and problems with every succeeding generation of the technology. We must attack the problems in today's WiFi as it is between us and almost all devices, much or all of the time.

h2. Manifesto - Wi-Fi does not need to be slow!

We are focusing on reducing latency throughout the wifi stack, firmware, and hardware. We believe that we can achieve the same sort of performance improvements (an order of magnitude or more) that the Bufferbloat project has already seen in Ethernet based systems.

See the latest presentation and status of ""the make-wifi-project here"":https://www.youtube.com/watch?v=-vWrFCZXOWk

h2. Goals

* Reduce latency on a single AP, single station connected at the lowest rate (6mbits) to under 30ms under load, down from the commonly observed 600ms or more, while not sacrificing peak throughput under real world conditions
* Develop new packet scheduling and AQM techniques applicable to aggregated, parking lot network types
* Improve the stack sufficiently for 802.11ac MU-MIMO to actually work
* Save the world

h2. The Make Wi-Fi Fast Plan

The current working draft is at: https://docs.google.com/document/d/1Se36svYE1Uzpppe1HWnEyat_sAGghB3kE285LElJBW4/edit

h2. Other LInks

* *The Hardware:* Presently the most open wifi drivers are those based on the ath9k and mt76 chipsets. All other drivers contain binary blobs in precisely the places we need to hack on, and are currently unsuitable for further development. We MAY acquire a firmware license to deal with one or more 802.11ac chips. Read more in the [[Hardware Plan]] and the [[RFP]] pages.
* *BQL on Everything:* It really doesn't fit into the context of make-wifi-fast, but an active effort to get BQL on more hardware that can support it, and to get it better documented so that more new drivers use it, would be good.
* *Re-working Wi-Fi:* Read the [[Wifi Stack Rework]] page.
","",2015-10-16 13:26:14.284531,14
304,304,3,"h1. Sony BlueRay player bugs with non /24 networks

Despite ""CIDR"":http://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing being an internet standard since 1993, most sony blueray players we've tried do not like anything besides a /24 (255.255.255.0) netmask and network. The flaw shows up in particular when attempting firmware updates. Other blueray applications like netflix appear to work ok...

The only workaround is to present the sony device with a /24 network. For example, if the sony blueray player is on the se00 ethernet interface,
you will need to give that entire interface a distinct /24 to play in.

<pre>
config interface se00
        option 'ifname' 'se00'
        option 'proto'  'static'
        option 'ipaddr' '172.20.4.1' # must be unique across the network
        option 'netmask'        '255.255.255.0'
        option 'ip6assign' '64'
</pre>

For wifi on the 2.4ghz network instead:

<pre>

config interface gw00
        option 'ifname' 'gw00'
        option 'proto'  'static'
        option 'ipaddr' '172.20.5.1' # must be unique across the network
        option 'netmask'        '255.255.255.0'
        option 'ip6assign' '64'

</pre>


You should also change the allowable dhcp range so you can have up to 254 devices by changing the ""start"" and ""limit"" 
parameters appropriately in /etc/config/dhcp. For se00:

<pre>

config dhcp 'se00'
        option interface 'se00'
        option start '20' # save some room below 20 for static addresses
        option limit '220' # serve up 200 possible addresses
        list dhcp_option '42,0.0.0.0'
        list dhcp_option '44,0.0.0.0'
        list dhcp_option '45,0.0.0.0'
        list dhcp_option '46,8'
        option leasetime '24h'
        option domain 'mygw.hm.example.org' # whatever subdomain you wish to serve
        option ra 'server'
        option dhcpv6 'server'

</pre>

And so on. After making these changes you will need to reboot, and probably reboot every device on this network to get the right address and netmask.


Note 1: IPv6 appears to work just fine with modern players with a /64 netmask.

Note 2: most everything else we've tried, including the sony playstation and microsoft xbox and google chromecast products, work with a /27 just fine. 
If you want more than 30 devices on a given network you can also do the same as above for getting 254 devices","",2014-03-26 10:41:21.446562,3
291,291,213,"h1. Quick Test for Bufferbloat

Does the quality of your web browsing, voice call, or gaming degrade when someone's downloading or uploading files? It may be that your router has ""bufferbloat"" - unnecessary latency/lag created by your router buffering too much data.

**_Easy_ Tests for Bufferbloat**

* The speed test at ""DSL Reports.com"":http://DSLReports.com/speedtest measures the download and upload speeds along with the latency _during_ the test. The ""Results + Share"" button lets you see numerical results or pass along a link to your friends. Watch the ""Bloat"":https://youtu.be/EMkhKrXbjxQ / ""No Bloat"":https://youtu.be/Fq9nQf1yEm4 videos at ""Youtube"":https://youtu.be/EMkhKrXbjxQ to see how the test works. 

* The speed test at ""ThinkBroadBand"":http://www.thinkbroadband.com/speedtest.html provides latency measurements during the download and upload, also with sharable links. 

**A Quick Test for bufferbloat:**

Other speed test sites only measure latency when the link is idle - but that only tells part of the story. You *can* measure bufferbloat with those other sites if you run a ping test simultaneously. To do this:
# Start a ping to google.com. You'll see a series of lines, one per ping, typically with times in the 20-100 msec range.
# Run a speed test simultaneously. To do this, go to one of the speed test services below and start the test.
** http://speedtest.net 
** http://testmy.net
** http://speedof.me
# Watch the ping times while the speed test is running. 

h2. The Best Tests for bufferbloat:

The suite of tests we developed to diagnose bufferbloat and other connectivity problems are good to 40GigE, but require the ""netperf-wrapper rrul test suite"":https://github.com/tohojo/netperf-wrapper . Using the tools therein it is possible to get a good feel for how the connection is behaving while ""you tune a shaper to fix it"":http://snapon.lab.bufferbloat.net/~cero2/jimreisert/results.html.

**Is My Router Bufferbloated?**

* A good router that protects against bufferbloat will hold the induced latency (extra latency above the no-traffic latency) below 30 msec. 
* Above 100 msec, people will notice that the network feels slow: voice calls will begin to sound bad, web browsing feels sticky, and you start to lag out when gaming. 
* If ping times get high while the speed test is running and drop back down when the speed test completes, it means your router is bloated. You have probably noticed that the network feels draggy or slow when other people use the network. 
* What can you do? Read on...

h2. What can I do about Bufferbloat?

We have created a set of recommendations for eliminating Bufferbloat at [[What to do about Bufferbloat]]

h2. Other tools for measuring network performance and latency

# The *Quick Test* (described above) does a rudimentary job of measuring performance. Although it doesn't run long enough to avoid the effects of Powerboost or other special cases implemented by ISPs, it can definitely point out situations where you're ""bufferbloated"".
# *[[CeroWrtScripts|betterspeedtest.sh]]* is a script you can run on your computer or on CeroWrt to get concrete, repeatable tests of your network. It performs the same kind of download/upload test that is available from speedtest.net. It is better, though, because it continually monitors your ping latency, and thus lets you know the performance and latency of each direction of data transfer. It is part of the [[CeroWrtScripts|CeroWrtScripts bundle.]] 
# The *netperfrunner.sh* script (also part of the [[CeroWrtScripts|CeroWrtScripts bundle]]) simulates the ""RRUL test"":https://www.bufferbloat.net/projects/codel/wiki/RRUL_test_suite by creating four simultaneous upload and download streams. This measures latency during heavy load. 
# Both betterspeedtest.sh and netperfrunner.sh use the ""*netperf*"":http://netperf.org/netperf/ program (built into CeroWrt) to drive traffic to see its performance. 
# ""*netperf-wrapper*"":https://github.com/tohojo/netperf-wrapper is a handy tool for running the RRUL test and producing attractive graphs of the results. (RRUL specifies that multiple netperf sessions run simultaneously to heavily load the network in both directions.) 
# *Netalyzr* from icsi.berkeley.edu. This is a powerful network measurement and diagnostic tool that contributes its data to a large survey of network conditions. However, its estimate of bufferbloat is often inaccurate: even though netalyzr measures a 1000 msec ""buffer measurement"", a concurrent ping test does not show an appreciable change to the responsiveness. Try it at http://netalyzr.icsi.berkeley.edu/
	","",2015-05-16 11:09:17.195441,39
256,256,3,"h1. Scratch

[[FAQ]]

[[HOWTO]]

[[Good OpenWrt Devices]]

[[Benchmarking Codel and FQ_Codel]]

[[Best practices for benchmarking Codel and FQ_Codel]]

[[RRUL Rogues Gallery]]

[[Cake]]
[[Bobbie]]
[[CakeFAQ]]

[[Quotes]]","",2015-11-19 03:11:42.991144,8
320,320,3,"h1. Janitorial Tasks to clean up the bufferbloat

{{>toc}}

There are a ton of tiny code improvements that can be made across the tens of thousands of applications ""out there"" to reduce their bufferbloat, far more than any one person can do. But it is extremely simple for someone to pick up a given codebase, make a small, basically mechanical change, test it, and submit back to mainline. It had generally been my hope that this would happen on everything - or that many, many folk, would ""scratch their itch"" to fix something right in front of them. A worldwide bufferbloat-reducing hackathon, with 1000 people participating, would knock out a goodly chunk of the problem in a day!

A daydream was to see an university class (or dozens) tackle a dozen applications with bufferbloat-fighting measures like the below, do them, and measure before and after. 
 
h2. [[BQL]] on everything

BQL has generally been shown to be a win on every driver it has been implemented on. It is a very few lines of code to add, however that code requires having the device in front of you and rigorous testing, thus BQL support entering the kernel has been fairly slow, with only a few dozen [[BQL enabled drivers]] out of the hundreds of devices ""out there"". Scratching this itch is a good introduction to kernel programming, and a net win for fighting bufferbloat, and thus folk doing a teeny bit of work on this here and there will gradually make a difference (especially by fixing the driver(s) you are actually using in front of you).

h2. TCP_NOTSENT_LOWAT on interactive tcp applications

The ""TCP_NOTSENT_LOWAT"":https://lwn.net/Articles/560082/ option has been shown to improve interactivity on quite a few application types, notably ""screen sharing"":https://developer.apple.com/videos/wwdc/2015/?id=719 and ""interactive web traffic"":https://insouciant.org/tech/prioritization-only-works-when-theres-pending-data-to-prioritize/

It is a matter of a few minutes coding to add to various apps and services that could use it, but more than a few minutes to see if it is useful or not.

It is not a standard socket option as yet in Linux and only recently exported in OSX. A good setting is in the range 16-128k.

It can also be set globally to a good figure for all applications. This is useful on desktops and servers that have few context switch related issues: 

And: See #450

h2. TCP Congestion control selection

Most applications do not allow for setting what congestion control algorithm is used. Being able to select a lower priority, delay based CC, is of benefit to some apps - for example, file uploads to flickr or facebook. You can enable a different congestion control algorithm via:

<pre>
#ifdef TCP_CONGESTION
    char  cong_have[16];
    int my_len = 15;
    const char cong_control[] = ""cdg""; // others might be reno, vegas,westwood, dctcp, cubic, etc
    setsockopt(socket, protocol, TCP_CONGESTION, cong_control, strlen(cong_control));
    if(getsockopt(socket, protocol, TCP_CONGESTION, cong_have, &my_len) ==
           SOCKET_ERROR) { perror(""can't get cong control""); } 
    if (strncmp(cong_control,cong_have,strlen(cong_control)) != 0) {
           perror(""can't set desired %s congestion control algorithm"",cong_control);
    }
#endif
</pre>

Most OSes do not have a wide variety of TCP congestion control algorithms available, so you should also check for success or failure as per the above. Under linux you can see and set the available and enabled congestion control algorithms via:
<pre>
cat /proc/sys/net/ipv4/tcp_available_congestion_control 
cat /proc/sys/net/ipv4/tcp_allowed_congestion_control 
</pre>

Some may need to be modprobed before being able to use. Usually that is modprobe tcp_X where X= the congestion control algorithm desired.
 

h2. Correct classification

The internet is rife with applications that actually do try to apply the diffserv field, but either select something out of the old style TOS bits, or do not work correctly with IPv6 (using IP_TOS rather than IPV6_TCLASS). 

Any place where you see IP_TOS being set, and not IPV6_TCLASS you should put in a:
<pre>
#ifdef IPV6_TCLASS
    const int dscp = 0xc0 // CS6 network control in this example, CS1 is background...
    rc = setsockopt(s, IPPROTO_IPV6, IPV6_TCLASS, &dscp, sizeof(dscp));
#endif
</pre>

It is OK if this call is applied to a IPv4 socket (and fails) - and dscp should be an int, rather than a char, as in IP_TOS.

Some OSes allow you to use ECN (2) on udp packets, which should be used very carefully, as in mosh. Extracting the received IP headers appropriately to deal with ECT is beyond the current scope of this document.

h2. ""TCP_FAST_OPEN"":https://en.wikipedia.org/wiki/TCP_Fast_Open

TCP fast open is a socket option that allows for sending data in the initial syn portion of a TCP transaction. It requires that both servers and clients ""support it properly"":https://lwn.net/Articles/508865/ - notably that the connection's intent be idempotent.

h2. ECN generation and awareness 

Over 54% of the alexa top 1m (and all modern linux distros) will enable ECN if asked for. 

Apple ""is enabling ECN support universally across iOS and OSX"":https://developer.apple.com/videos/wwdc/2015/?id=719 in the hope that this will also drive demand and deployment of network queueing algorithms that will mark, rather than drop, packets. 

ECN can be [[cerowrt:Enable ECN|easily enabled for many OSes]].

But without a qdisc on the bottleneck links that respect it, turning it on on the tcps has little effect.

fq_codel enables ECN by default, but this is presently turned off in openwrt's qos-scripts and in some circumstances in the [[cerowrt:sqm]] case, and off by default in pie and red. Particularly on higher bandwidth links, we are reasonably confident that ecn marking behaviors are sane in fq_codel, pie, and red, (but not codel by itself as presently implemented). [[codel:Cake]] does ecn marking by default with good overflow protection and is also on by default. As more ecn rolls out, we expect to have to improve ECN behaviors across all queue algorithms.

ECN has great applicability in DCTCP environments, for which a new CE_THRESHOLD option just landed for codel and fq_codel.

h2. TCP Pacing where appropriate

""TCP pacing"":http://www.ietf.org/proceedings/88/slides/slides-88-tcpm-9.pdf has become a very attractive option, especially in conditions where the new ""sch_fq"":https://lwn.net/Articles/564825/ qdisc can be applied on an outward facing server.

When the application has a fixed maximum rate, applications can ""override the (pretty reasonable) defaults"":http://www.spinics.net/lists/netdev/msg251368.html to get better behavior.
<pre>
u32 val = 1000000;
setsockopt(sockfd, SOL_SOCKET, SO_MAX_PACING_RATE, &val, sizeof(val));
</pre>

h2. Moving Quic along

A great deal of google generated traffic has moved away from tcp to the quic protocol. Standardization efforts are being started in the IETF. If you are running chrome, Quic is enabled by default in many circumstances, and can be enabled ""easily if not already enabled"":https://en.wikipedia.org/wiki/QUIC

A quic server handles thousands (millions ?) of flows. Having one kernel socket per flow would be way too expensive, so having sch_fq here does not help as much as you might want it to, but it and sch_fq or fq_codel remain a good combination. Also the rx path in UDP is not optimized for 4-tuple hashing.

Quic uses an initial burst of 10 packets (IW10) followed by 22 paced packets in it's initial configuration, all managed from userspace, no sch_fq needed. While this may seem large, quic also tends to use less distinct flows overall than http users use.

Internally to the server application there are 2 hash tables, one lookup on destination_IP:destination_port, and one on *:destination_port. For a quic server, all sockets would share same keys.

Public work on quic is in the chrome web browser codebase and public work on a ""library, client and server is taking place on github"":https://github.com/devsisters/

h2. Fq_codel or [[codel:cake]] on edge routers

We've spent tons of time on trying to get [[cerowrt:sqm|smart queue management]] ""right"":http://snapon.lab.bufferbloat.net/~d/Presos/nznog-dave-taht-bufferbloat-jan-28.pdf - most recently defeated by GRO offloads in new routers, which is only fixed in sch_tbf and [[codel:cake]], as yet.","",2015-06-16 15:06:51.172964,16
275,275,213,"h1. BQL enabled drivers

Queue Disciplines such as ""fq_codel"":http://www.bufferbloat.net/projects/codel/wiki/Wiki and fq need the underlying buffering of the device and device driver well controlled. Under Linux, the mechanism to do so is called ""Byte Queue Limits"":http://lwn.net/Articles/454390/ (BQL), which needs a small amount of driver support to enable.

This is a partial list of the known BQL-enabled device drivers for Linux as of version 3.14. Also see the list at [[codel:Best_practices_for_benchmarking_Codel_and_FQ_Codel#Enabling-Byte-Queue-Limits]]

* Intel e1000e, e1000, ixgbe, ivb40evf,i40e 
* Atheros ar71xx, alx
* Nvidia forcedeath
* Marvell sky2, skge
* Broadcom bnx2, tg3, b44
* Mellanox mlx4
* Freescale gianfar
* Realtek 8139
* Isilicon hix5hd2

h1. Highly desirable to BQL enable

* Cisco, AMD, Xilinx and other manufacturers
* Kirkwood (dreamplug, guruplug etc)
* net-usb (patch discussed on cerowrt-devel) (raspery pi uses usb to network)
* r8169 (buggy in 3.6 and earlier, currently reverted)
* niu (same problem basically as r8169, also currently reverted)

There are 7 out of tree BQL drivers here that could use testing and integration: http://www.mcmilk.de/projects/linux-bql/

h1. Other subsystems

BQL is desirable for devices running at line rate. It is not required for soft rate shapers such as hfsc and htb, which are independent of the underlying wire rate.

Similar techniques to BQL could be used at other layers in the stack, such as various forms of wireless, usb network devices, and adsl. But adding this technique is going to be ""really hard for wireless"":http://www.bufferbloat.net/projects/cerowrt/wiki/Fq_Codel_on_Wireless . ","",2015-06-26 07:09:34.63704,10
321,321,3,"h1. Advice for ISPs

h2. DO:

* Measure
* 

h2. Don't

* overuse policing
* ","",2015-06-18 10:51:28.141192,1
201,201,3,"h1. Bind9 on wndr3700v2 performance statistics

h2. Tests performed within ISC's offices against cerowrt-RC5

h3. Uncached

  Parse input file:     once
  Ended due to:         reaching end of file

  Queries sent:         9999 queries
  Queries completed:    9975 queries
  Queries lost:         24 queries
  Queries delayed(?):   0 queries

  RTT max:         	4.930541 sec
  RTT min:              0.000095 sec
  RTT average:          0.220097 sec
  RTT std deviation:    0.263616 sec
  RTT out of range:     0 queries

  Percentage completed:  99.76%
  Percentage lost:        0.24%

  Started at:           Fri Aug 26 13:56:38 2011
  Finished at:          Fri Aug 26 13:58:38 2011
  Ran for:              120.132519 seconds

  Queries per second:   83.033304 qps



h3. Cached

Statistics:

  Parse input file:     once
  Ended due to:         reaching end of file

  Queries sent:         9999 queries
  Queries completed:    9980 queries
  Queries lost:         19 queries
  Queries delayed(?):   0 queries

  RTT max:         	3.419392 sec
  RTT min:              0.000017 sec
  RTT average:          0.011003 sec
  RTT std deviation:    0.089551 sec
  RTT out of range:     0 queries

  Percentage completed:  99.81%
  Percentage lost:        0.19%

  Started at:           Fri Aug 26 13:59:32 2011
  Finished at:          Fri Aug 26 13:59:46 2011
  Ran for:              13.536720 seconds

  Queries per second:   737.253929 qps
","",2011-08-26 14:02:24.794555,1
174,174,213,"h1. Device and Interface Naming Scheme

Instead of the conventional 'ethX' and 'wlanX' device naming scheme, devices are named after their security model and type. 

This was not done to make it easier for humans, but for more efficient firewall rules, as we noted during testing that various firewall rules and classifiers using the default naming scheme cut performance by as much as 75%, and by default, about 11%. This naming scheme allows for pattern matching ('+' syntax) on the devices, and also clearly identifies when different radios are in use.

By breaking up the interface names into different classes, based on function and type, we gain (theoretically, this work isn't completed) efficiency in classification and firewalling not possible otherwise.

Also, as 2.4ghz radios, 5.x ghz radios and GigE ethernet have very different characteristics, this system lets each be played with individually. 

Lastly, the 'guest' concept lets encrypted, unencrypted, and mesh networks be tested individually. Etc. See also: [[default network numbering]].

The device naming pattern is

{g|s|d|}{e|w}{radio}{device number}

g = guest or gateway
s = secure
d = dmz

e = ethernet
w = wireless

The device and firewall mapping for the unfamiliar is:

|old name|new name|old zone|new zone|IP range|Why|
|eth1|ge00|wan|wan|DHCP|Default gateway|
|eth0|se00|lan|lan|172.30.42.0/27|First lan interface|
|wlan0|sw00|N/A(bridged)|lan|172.30.42.64/27|First 2.4 ghz wireless interface|
|wlan3|sw10|N/A(bridged)|lan|172.30.42.96/27|First 5.x ghz wireless interface|
|wlan1|gw00|N/A|guest|172.30.42.128/27|Second (guest) 2.4 ghz wireless interface|
|wlan4|gw10|N/A|guest|172.30.42.160/27|Second (guest) 5.x ghz wireless interface|
|wlan5|gw11|N/A|guest|172.30.42.192/27|Third (mesh) 5.x ghz wireless interface|
|wlan2|gw01|N/A|guest|172.30.42.192/27|Third (mesh) 2.4 ghz wireless interface|

Vlans, although they work, are not currently mapped into this naming scheme.

h3. See also:

[[Default_network_numbering|Default network numbering scheme]]
[[Changing_your_cerowrt_ip_addresses|Changing IP, DNS, and SSID]]
[[Automated Configuration of CeroWrt]]
","",2013-03-16 11:19:18.329352,12
85,85,213,"h2. Introduction to Bufferbloat

We've written an [[Introduction]] to the bufferbloat problem that we believe is both accessible to non-technical readers and informative to techies. We recommend you start there to get a feel for the nature and scope of the problem. Then, read our [[Mission|mission statement]] to find out what we're doing about it.

There's also a [[Glossary]] that goes into more technical depth on bufferbloat-related terminology. You may find an older [[TechnicalIntro|technical introduction]] interesting if you are a programmer or network engineer.

h2. More reading

Many of the [[CongestionSymptoms|symptoms]] of bufferbloat-induced congestion have an immediate, user-visible impact on performance. If you're not sure you are seeing these, there are [[Experiments|experiments]] you can perform on your home hardware to detect bufferbloat problems.  If you want to jump straight to fixing the problem, we have a [[Mitigations_and_Solutions|Mitigation and Solutions]] page.

Much of the original analysis and discussion of bufferbloat took place on technical blogs. We have collected a [[Good_blog_discussions|tasty selection of blog references]] for your reading pleasure.

You can read bufferbloat-related [[Quotes]] from the great, near-great, and and not-so-great. A page of unashamedly geeky [[Humor]] exists as well.

There is also a list of [[Product]] specific pages.

h2. Mailing lists and Participating

Our project has very active ""mailing lists"":https://lists.bufferbloat.net on which we're developing anti-bufferbloat fixes, diagnostic tools, documentation, and other fun things. You can also look at a [[ToDo]] list of projects that need work.

Please ""join the project"":http://www.bufferbloat.net/account/register and pitch in.
","",2012-12-07 22:16:22.273286,21
274,274,3,"h1. Scratch

[[BQL enabled drivers]]

[[Gathering 2013 Overview]]

[[Gathering 2013 Long Period Bloat]]

[[Upcoming Talks]]

[[Janitorial Tasks]]

[[Advice for ISPS]]

[[Daves Media Guidance]]","",2015-09-28 10:45:22.219911,6
257,257,725,"h1. HOWTO

h1. Simplest possible demo

To demonstrate the effect of the fq_codel scheduler, set up a fully saturated network and then observe fq_codel's effect on ping time latency, as follows.

The effect can be clearly observed with a 10Mbps Ethernet connection:
<pre>
sudo ethtool -s eth0 advertise 0x002   # restrict to 10Mbps for demo
</pre>

In a terminal window, run a continuous ping to some other machine on the local network (the other machine does not need to have fq_codel) and leave it running:
<pre>
ping othermachine
</pre>

In another terminal window, start up a dd pipe to the other machine to fully saturate the network -- you should see the adverse effect on the ping times:
<pre>
dd if=/dev/urandom | ssh othermachine dd of=/dev/null
</pre>

Now enable fq_codel -- observe the beneficial effect on the ping times -- about 30X reduction in latency on a saturated 10Mbps network!:
<pre>
sudo tc qdisc add dev eth0 root fq_codel
</pre>

Disable fq_codel and wait a moment for the buffers to get bloated again -- the ping times go back up again:
<pre>
sudo tc qdisc del dev eth0 root fq_codel
</pre>


Remember to remove the demonstration 10Mbps restriction when you're all done testing:
<pre>
sudo ethtool -s eth0 advertise 0xFFF
</pre>
","",2012-06-12 09:15:14.808994,4
286,286,213,"h1. Setting QoS and AQM

*Note:* The instructions for setting QoS below were relevant for CeroWrt prior to the Modena build (February 2013). We have preserved them here for historical reasons. 

h2. Setting QoS: Improve latency problems with a CeroWrt router

*Note:* These have been superseded by the [[Setting up AQM]] page. 

CeroWrt has the ability to solve latency using a number of mechanisms. One is our major focus: decreasing bufferbloat. Another technique is AQM(active queue management)  and bandwidth shaping: enabling AQM with sane values will make it more possible for you and your family to do more work simultaneously - doing uploads while your son is downloading and your daughter is making phone calls and your spouse is playing games, with fewer complaints from everyone.

AQM set to good values is best. Getting good values automatically is hard. We're working on it. 

Since it's hard to determine good values automatically, CeroWrt ships with [[QoS]] (Quality of service) turned *OFF* by default. This will make your router and network connection seem slow until you use these steps to manually measure your network's speed and set good values:

*To set up QoS for CeroWrt:*

* Go to the Network->QOS screen on to see the [[CeroWrt router configuration]] page.
* Turn off [[QoS]] by un-checking the box labeled *Enable* and clicking *Save and Apply* at the lower-right corner. (It may already be unchecked: if so, skip this step.)
* Run a suitable ""bandwidth performance test"":http://speedtest.net such as http://speedtest.net to get your network's Download and Upload Speeds. Multiply each by 1000 to get the values in kilobits/second. For example, 2.45Mbps on the Speedtest.net site would be converted to 2450 kilobits per second (kbit/sec). You can ignore the Ping times.

A HUGE problem with most network tests is that they don't run for long enough. Over a minute is required in order to get a reasonable value, most run for less than 20 seconds, and many ISPs are now gaming that. We use 
netperf to various sites supporting it to get a reasonable value.


* Use these values to fill in the Download and Upload speed fields in the [[CeroWrt router configuration|CeroWrt web GUI.]] It is best to use values a few percentage points lower than what the bandwidth test shows you. For example, if the value is 2450 kbit/sec, you could set it for 2300 kbit/sec.
* Re-enable QoS by checking the *Enable* box in the GUI.
* Click *Save and Apply* at the lower right. 

h2. AQM doesn't seem to do any good! I can't do a big upload/download and make a phone call!

Decrease the Upload and Download speeds somewhat [[CeroWrt router configuration|in the web GUI]] until you can do both. You should make adjustments in 256kb increments (or do a binary search between 60% and 100% of your provisioned bandwidth).

h2. How accurate do these speeds need to be?

The values can be approximate, in the range suggested in the previous question. AQM is ""bandwidth"" shaping, and attempts to limit the filling of queues in the broadband equipment. Unfortunately, this can miss out on the advantages of Comcast's PowerBoost, and it cannot take into account other dynamic changes in availability of bandwidth caused by your neighbors or even the temperature. We note that SPEEDTEST reports misleading results on broad band service which provides temporary bandwidth boosts such as Comcast's PowerBoost, and we are working on a better test. 

It's important to set some AQM speed settings. Although disabling AQM can (sometimes) make single stream downloads run nearly as fast as possible, it occurs at the expense of other activities. And it may not always work. 

","",2013-03-27 17:01:15.455335,2
312,312,3,"h1. BQL on everything

It really doesn't fit into the context of make-wifi-fast, but an active effort to get BQL on more hardware that can support it, and to get it better documented so that more new drivers use it, would be good.","",2014-08-09 11:01:10.05724,1
245,245,3,"h1. CeroWall

What if we started with the idea that we wanted to use more protocols than just a port 80 and 433 of tcp, and port 53 of udp, that we've been able to effectively NAT? Hip, PIM, IGMP, sctp, dccp, udp-lite, rtp, multicast, name it, it could all get tested now, and made to work with ipv6, at the very least. We could share networks, and deploy different solutions, if only we had a base to start with that didn't start with the assumptions of ipv4 + nat.

So I sat down one day last year (june, 2011), and tried to design a firewall architecture that did ipv6 first, and treated NAT as an afterthought, allowing for security within a home, but a nearly default free zone to share with guests. Part of it is the [[device naming scheme]], and the other part is the limited pattern matching facility in iptables (the ""+"" symbol for a tail match). I'd also hoped to get to where upnp and pcp could be made to work correctly, and sanely.

The big goal was to have a firewall that never had to reload its rules (and break connection tracking among other things). With the rise of highly dynamic ipv6 addressing and prefix distribution it would be nice to have the firewall just successfully add and subtract addresses without ever having to reload. Unfortunately doing that easily requires mangling interface names into one scheme to rule them all, which does not play well with naming vlans (eth0.2) or various virtual tunneled interfaces (ipv6-vtun), etc. Presently in most firewalling systems devices are named after their function, not their level of security.

I've not got a chance to finish CeroWall, and coping with 15 years of accumulated cruft around nat - port forwarding, menu driven guis, zillions of useful features, and user preconceptions, and my own workload! seems to make it unlikely I will. Perhaps nftables will make it easier, but it breaks the + syntax in favor of doing vmaps.

But this is as far as I had got a few years back.

The logic is easy to parse. With 6 interfaces it's about 1/10th as complex as what openwrt generates, and the rules are sorted by frequency of protocol, so they are very fast. And *all* protocols are supported out of the box, except for ipv4 on the natted interface. And due to the pattern match, the rules never need to be taken down and reloaded, you just create a named interface that fits the rule.

The rules work. I use them, in the lab. Where I don't have to deal with nat.

IPv6 section
<pre>
#!/bin/sh

ip6tables -t mangle -F
ip6tables -F

ip6tables -N F_TCP
ip6tables -N F_UDP
ip6tables -N F_ICMP
ip6tables -N F_LAN

# Generic Rules against ingress to the home secure zone

ip6tables -A F_TCP -p tcp -m multiport ! --ports 139,445,81 -j ACCEPT
ip6tables -A F_TCP -j REJECT

ip6tables -A F_UDP -p udp -m multiport ! --ports 137,138 -j ACCEPT
ip6tables -A F_UDP -j REJECT

ip6tables -A F_ICMP -j ACCEPT

ip6tables -A F_LAN -p tcp -g F_TCP
ip6tables -A F_LAN -p udp -g F_UDP
ip6tables -A F_LAN -p icmpv6 -g F_ICMP
ip6tables -A F_LAN -p 0 -j ACCEPT

ip6tables -A FORWARD ! -i s+ -o s+ -g F_LAN
ip6tables -A FORWARD -j ACCEPT

# Don't allow anyone from the internet to access samba or conf on the router

ip6tables -I INPUT -p tcp ! -i s+ -m multiport --ports 139,445,81 -j REJECT

# Grey areas
# SNMP should be blocked

# Classification
</pre>

The IPv4 rules are nearly identical, but I never got around to finishing the nat side

<pre>
#!/bin/sh
MASQ=ge00

[ -s ""$MASQ"" ] && iptables -t nat -F
iptables -t mangle -F
iptables -F

iptables -N F_TCP
iptables -N F_UDP
iptables -N F_ICMP
iptables -N F_LAN

# Generic Rules against ingress to the secure zone

iptables -A F_TCP -p tcp -m multiport ! --ports 139,445,81 -j ACCEPT
iptables -A F_TCP -j REJECT

iptables -A F_UDP -p udp -m multiport ! --ports 137,138 -j ACCEPT
iptables -A F_UDP -j REJECT

iptables -A F_ICMP -j ACCEPT

#no workie
#iptables -A MASQ -i $MASQ -o ! $MASQ -m state --state RELATED,ESTABLISHED -j ACCEPT
#iptables -A MASQ ! -i $MASQ -o $MASQ -j ACCEPT

iptables -A F_LAN -p tcp -g F_TCP
iptables -A F_LAN -p udp -g F_UDP
iptables -A F_LAN -p icmp -g F_ICMP
iptables -A F_LAN -p 0 -j ACCEPT

iptables -A FORWARD ! -i s+ -o s+ -g F_LAN

# Don't allow anyone from the internet to access samba on the router

iptables -I INPUT -p tcp ! -i s+ -m multiport --ports 139,445,81 -j REJECT

# But I've never finished the nat rules

if [ -s $MASQ ]
then
   iptables -t nat -A POSTROUTING -o $MASQ -j MASQUERADE
else
   iptables -A FORWARD -j ACCEPT
fi

</pre>

h2. Routing ipv6 with ipv4 natted interfaces

It is impossible at present to detect if nat is on an interface. CeroWrt assumes that ge00 is natted, and that there is nobody listening for ipv6 routes on the outside interface. In [[Bloatlab 1]], that's not the case, and uncommenting the ge00 interface in /etc/config/babel, and prepending these two lines here to the /etc/babeld.conf file

<pre>
out if ge00 ip 0.0.0.0/0 deny
in if ge00 ip 0.0.0.0/0 deny
</pre>

Lets the internal ipv6 routes 'escape' onto the same switch ge00 is on, but not the natted ipv4 routes. 

That switch in my case, has a dozen+ machines and router on it. It's darn useful to be able to share that wire. Nearly every machine in the lab is capable of routing (both with babel native and quagga-re), and if one is down, the next best one takes over.

You'll note, incidentally, that opening up ge00 for routing breaks part of the above firewall rules (blocking several ports by incoming interface) in a fairly unsolvable way. 

In a microcosm, this is one of the problems of ipv6. It would be rather awesome if two people sharing the same wire (cable modems, anyone?) could route to each other with a minimum of hops and inherent latency.
","",2014-12-01 13:19:39.943053,13
315,315,3,"h1. Example

Automagicly picks up bug #277 

and draws a line through a bug automagically when the bug is closed. Example: #442 .

Postgres is the backend (and full text search is broken right now on my system, but...

","",2014-12-09 21:30:07.82837,1
285,285,213,"h1. Setting up AQM - THIS PAGE IS DEPRECATED for current builds of CeroWrt

*If you are using CeroWrt 3.10.24-8 (December 2013) or newer,* Use the SQM setup instructions at: http://www.bufferbloat.net/projects/cerowrt/wiki/Setting_up_SQM_for_CeroWrt_310

*If you're using the older CeroWrt 3.8.8-4*, you should definitely upgrade to the current version. It offers much better performance, more features, and better stability. Nonetheless, here's the info about the new Network/SQM tab built into the GUI. If you just want to try out CeroWrt:

* Set the Queuing discipline to ""fq_codel""
* Set the Queue setup script to  ""simplest.qos"" 
* Set the up and download speeds to something less than the full rated speed of your internet provider. Entering a value that's 85% of the full speed (in each direction) is definitely safe. 

If you want to experiment, try different queueing disciplines or setup scripts, or set the link speeds to a higher percentage and the run tests to see when the latency starts to get worse.

*If you're using a 3.7 or earlier build*

CeroWrt defaults to using the Active Queue Management that comes from OpenWrt. It's pretty good. But CeroWrt provides a @simple_qos.sh@ script that's better in that it uses smaller quantums and supports ipv6 fully. You need to edit three files, then restart the router to invoke it.

*1. Edit the simple_qos.sh file* to match your actual bandwidth up and down. To do this, edit the file at @/usr/sbin/simple_qos.sh@, and find the two lines below. Change the numbers to match your link's speed. NB: The numbers are in kbps (e.g., indicate a 3 megabit link with 3000; 768kbps with 768, etc.)

If you are using some forms of ADSL, you will also need to fiddle with the overhead figure to calculate in the ATM overhead.

<pre><code>UPLINK=2000
DOWNLINK=20000
</code></pre>

*2. Edit the /etc/rc.local file* by adding the following line before the last line (@exit 0@):
 <pre><code>/usr/sbin/simple_qos.sh</code></pre>

*3. Edit the /etc/hotplug.d/iface/00-debloat file* by adding the following line to the ""ifup"" stanza. 
<pre><code>[ ""$DEVICE"" = ""ge00"" ] && /usr/sbin/simple_qos.sh</code></pre>
 It will look something like this when you're done:
<pre><code>[ ""$ACTION"" = ""ifup"" ] && {
     IFACE=$DEVICE QMODEL=nfq_codel_ll /usr/sbin/debloat >> $DEBLOAT_LOG 2>> $DEBLOAT_LOG2
     [ ""$DEVICE"" = ""ge00"" ] && /usr/sbin/simple_qos.sh
}
</code></pre>
*4. Restart your router,* and the simple_qos.sh will take effect.

We do plan to make this available as a gui option in the future, unless it gets ported into C.

Note that we default to about 5% reserved for ""background traffic"". In practice it appears reserving 20% or so is closer to correct, and you can fix that by going into /usr/sbin/debloat and changing in the egress function the background traffic calculation to be 1/6 rather than 1/9.","",2014-03-18 10:17:15.429048,20
190,190,3,"h1. Building Cerowrt on your own Linux machine

*NOTE:* These instructions are totally out of date and have been replaced with a new script.

h2. Prerequisites

You need some packages that you may download the sources. Then you need some build dependencies to be satisfied. Then you need to checkout the sources. 

<pre>
sudo apt-get install git-all subversion build-essential flex libncurses5-dev libz-dev gawk gettext bison texinfo
mkdir -p ~/src/prep ~/src/cerowrt
cd ~/src/prep
git clone git://github.com/dtaht/cerofiles-3.3.git
</pre>

There will be a *build_cero.sh* script in that checkout. There is also a *cero_config* file here. Copy *cero_config* to *~/.cero* and then edit it to suit your preferences.

<pre>
cp cerofiles-3.3/cero_config ~/.cero
vim ~/.cero # use the editor you are comfortable with
</pre>

This example assumes the use of folder *~/src/cerowrt* as main directory so you should change the *CERO_DIR* variable to 
<pre>
CERO_DIR=~/src/cerowrt
</pre>

then run
<pre>
~/src/prep/cerofiles-3.3/build_cero.sh init
cd ~/src/cerowrt
# in there will be your checked out dir, usually wndr3700v2, cd into that
make # But please see note below for an extra step to save on download hassles
</pre>

The first time you run this it will take a VERY long time to build the toolchains, etc. I have generally found -jX to fail on large numbers of processors, so just build it in series and go to a long dinner or lunch. Or...

<pre>
make -jX
make V=s
</pre>

Subsequent runs will be much faster, and -jX usually works. When it doesn't... 
<pre>
make package/the_breaking_package/{clean,compile,install} V=99 
</pre>
usually will work or show the problem.

**NOTE** With kernel.org down last year it was impossible to get a build to summon and compile all the needed packages. There is a temporary mirror of the needed packages available via rsync. It's still faster to just snag all the tarballs this way, so... inside the build dir above:

<pre> 
mkdir dl; cd dl; rsync -av huchra.bufferbloat.net::dl .
</pre>
(this is a temporary expedient and not actually necessary in normal use)

h2. Check your build

If the wndr3700's bin/ar71xx/ has images that are less than 5MB, you didn't get a good .config file, and/or some major packages are missing, and/or the phase of the moon was wrong. 

Your final images should be about the same size as on huchra.

h2. Notes:

Given that this builds most of cerowrt against the main git head trees, your build will differ somewhat from what we are making available as ""release candidates"":http://huchra.bufferbloat.net/~cero1/ at present. After we get stable, we will tag and freeze the relevant trees.

We note that due to this difference, there may be slight (or even major) differences in the default .config file. It helps to repeatedly cp env/.config onto .config and run make defconfig, and install packages, etc, until they more closely match.

We will improve this script as time goes on, and if you run into trouble, please contact the #bufferbloat irc channel and/or the mailing lists. 

h2. Keeping updated

The procedure above makes it possible to track all or parts of openwrt and cerowrt, by keeping multiple repositories around.
You can,for example, merely track ceropackages, by doing a git pull in the ceropackages directory and a ./scripts/feeds update in your build directory. Or setup something to track the mainline repos (this is what I do), do integration, and builds, and not bother the ongoing work in your release process. Doing continuous integration is difficult, but necessary if you wish to advance the state of the art.


[[changing your cerowrt ip addresses]] [[changing your dns domain]]","",2013-06-27 12:31:45.103186,26
30,30,3,"h1. Windows Tips 

h2. Enable Compound TCP

Compound TCP is a Hybrid TCP Congestion Control approach. You can also enable ECN (lossless congestion control feedback):

If enough end users enable ECN, core providers may be inclined to deploy [[AQM with Packet Marking]] too... And as [[Home Gateways]] are those which are prone to ECN implementation bugs, a full disconnect from the internet (rather than certain sites not reachable) is quite easy to quickly diagnose.

Also, enabling ECN gives you more retries with the SYN (3x ECN+SYN, 3x normal SYN), so in a heavy congested / bufferbloated environment, your small flows might get through eventually, with higher probability.

h3. Windows Vista / Windows 7 users can enable ""Compound TCP"", 

@  netsh int tcp set global congestionprovider=ctcp
   netsh int tcp set global ecncapability=enabled@

h3. Windows 8 and later

The use of netsh int tcp set global congestionprovider=ctcp has been depreciated.  In order to set or change the congestionprovider the following command must be used:

set-nettcpsetting -CongestionProvider CTCP 

However, CTCP is the default on windows 8 and later.

Type get-nettcpsetting to view other settings that used to be part of netsh tcp global.﻿

ECN is a global setting and is still configurable, even on clients, through netsh by running:

@netsh int tcp set global ecn=enable@  

On Windows Server 2012, you can change this setting through the custom template or netsh.","",2014-05-05 12:35:15.122787,8
311,311,3,"h1. RFP process

Network research is made especially hard by not having a good stable hardware base to work from, with open source components sufficient to make a difference.

We plan to generate one or more RFPs to find a hardware or chipset manufacturer willing to design a board and chipset suitable to meet our requirements for a low latency wifi solution.

We may also run a kickstarter in order to push hardware development along. ","",2014-08-09 10:31:53.707281,1
316,316,213,"h1. What to do about Bufferbloat

Bufferbloat is high latency (or lag) that occurs when there's other traffic on your network. Use the ""DSLReports Speed Test"":http://dslreports.com/speedtest or run the [[Quick Test for Bufferbloat]] to see if it's present.

*TL;DR* - if these tests show bufferbloat, your router is letting bulk traffic (uploads/downloads) interfere with (and slow down) your time-sensitive traffic (gaming, Skype, Facetime, etc.) Twiddling with QoS might help, but a faster internet connection won't help at all. You will need to find a way to fix the *router.* 

h2. To Eliminate Bufferbloat in your Network...

You will need a router whose manufacturer understands the principles of bufferbloat, and has updated the firmware to use one of the Smart Queue Management algorithms such as fq_codel, PIE, or others.

# We continue to be hopeful that commercial router vendors will offer SQM in their stock firmware. At this time, Ubuquiti and ipfire.org seem to include settings for fq_codel.
# Install the ""OpenWrt Barrier Breaker"":http://openwrt.org/ firmware at http://openwrt.org/ on your current router. These builds are now stable and include the luci-app-sqm package that includes the enhancements that we've tested and then pushed into the OpenWrt mainline source code. Use the ""Supported Devices"":http://wiki.openwrt.org/toh/start page to find your router. Then install the luci-app-sqm package to get sqm-scripts and its dependencies. Then use the Network -> SQM QoS menu to configure. There's a guide at the OpenWrt wiki http://wiki.openwrt.org/doc/howto/sqm
# Or install suitable DD-WRT (www.dd-wrt.com) or Gargoyle (www.gargoyle-router.com) firmware. We understand that current builds of both products support fq_codel.
# Finally, if none of these seem to be options, call your router vendor's support line. With the information from the DSLReports Speed Test or the Quick Test for Bufferbloat in hand, you can mention that the ping times get really high when up/downloading files, and that it really hurts your network performance. Ask if they're working on the problem, and when they're going to release a firmware update that solves it.

h2. Why does SQM work so well?

Why do fq_codel, PIE, etc. and other qdisc's work so well? These smart queue management (SQM) algorithms put each flow's traffic into its own queue. (A ""flow"" is typically defined as traffic from a single IP addresses/port to another address/port.) Then the qdisc makes sure that none of the queues get ""too long"". To do this, the qdisc looks at all the queues, and preferentially chooses to send packets from flows that have no/small queue. If the queue for a flow gets large, the qdisc can mark traffic with ECN, or drop a certain percentage of those packets to allow congestion avoidance to kick in for that flow. (The various queue management algorithms use different metrics to make these transmit/drop decisions, avoid starvation, etc.)

For a simple description of fq_codel, read ""Bufferbloat and the Ski Shop"":http://richb-hanover.com/bufferbloat-and-the-ski-shop/

For lots more details about the CoDel (and fq_codel) algorithm, see the Codel wiki at: http://www.bufferbloat.net/projects/codel/wiki/Wiki

h2. What's wrong with simply configuring QoS?

Quality of Service (QoS) settings will help, but won't solve bufferbloat completely. Why not? Any prioritization scheme works by pushing certain packets to the head of the queue, so they're transmitted first. Packets farther back in the queue still must be sent eventually. New traffic that hasn't been prioritized gets added to the end of the queue, and waits behind those previously queued packets. QoS settings don't have any way to inform the big senders that they're sending too fast/too much, so packets from those flows simply accumulate, increasing delay for all.

Furthermore, you can spend *a lot* of time updating priorities, setting up new filters, and checking to see whether VoIP, gaming, ssh, netflix, torrent, etc. are ""balanced"". (There is a whole 
cottage industry in updating WonderShaper rule sets. [[Wondershaper Must Die|They all have terrible flaws]], and they don't help a lot.) Worst of all, these rules create a maintenance hassle. Each new rule has to be adjusted in the face of new kinds of traffic. And if the router changes, or speed changes, or there's new traffic in the mix, then they need to be adjusted again.

h2. Setting up a Router Manually

If you can't get SQM/fq_codel in your router, your strategy should be to adjust the settings to control queue lengths first, then think about QoS. To do this:

# Remove all the QoS/Prioritization rules. 
# Control the amount of data queued. If your router supports BQL in the kernel and some kind of SQM/qdisc, such as fq_codel, PIE, etc., make sure they are enabled. In general, no configuration is required at all. These changes are available in modern Linux kernels, the OpenWrt and CeroWrt routers, and a growing number of other devices. This one change automatically sets up the router to work well:

 * Small flows of data (pings, DNS, ssh sessions, gaming, VoIP, TCP/HTTP connect messages & acks, etc.) go right through with minimal delay
 * Large flows (Netflix, file uploads/downloads, filesharing, etc) automatically adjust their rates
 * All traffic gets a fair share of the bottleneck traffic capacity
# Measure. Try to detect if all your data types/flows are as responsive as you like. We often find that there is no need for further configuration because the fq_codel algorithm does such a good job of giving priority to the flows that aren't sending much data.
# If you *can* determine that some traffic needs to priority, then set up some QoS rules. The number of rules will probably be small, perhaps only applying to a couple specific traffic types.
# This final rule actually goes with 4) above... If prioritization/QoS doesn't solve the problem, it may be necessary to get more bandwidth. When SQM is in place, the need for prioritization typically arises when there's already too much data to send on a long-term basis. Creating the rules simply determines which packets go to the head of the queue, and which will be sent later. If there is regularly more data than traffic capacity, QoS doesn't really help.","",2015-11-17 08:16:12.566,18
325,325,3,"h1. Cake FAQ

[cake] is the comprehensive queue management system the bufferbloat project has been working on since 2013 and is nearing release. It is the rollup of 3 years of deployment experience using the htb + fq_codel based [[sqm]]-scripts.

h2. What was the origin of the name?

Initially it came from the movie 2010 where an American was trying to explain the idioms ""Easy as pie"", and ""Piece of cake"" to a Russian, who kept getting it wrong. Where it started was when Dave Taht tried to explain the need for a comprehensive queue management system to an audience in the ietf aqm working group, and was basically booed off the stage.

Later on it became a reference to the game ""portal"" - where, at the conclusion of the game, the AI promises that: ""everyone will have cake"".

It is also (in a grand tradition of RED vs Blue) a backhanded reference to ""Pie"", which is a competing AQM algorithm missing many of the features of cake.

The backronym invented for it became ""Common Applications Kept Enhanced"" - which is also, actually, exactly what it does.

Despite our affection for the name there is still time to change it to something else - googling for ""cake shaper"" does not result in anything useful. CQM, SQM would seem to have more useful google-fu, but...

h2. When should I use cake?

h2. cake vs fq_codel

","",2015-11-19 03:19:21.030349,1
277,277,3,"h1. Campground Field Test

!>http://huchra.bufferbloat.net/~cero1/yurtlab_sm.jpg!

Over the course of the past year, we searched for a location devoid of wifi signals, so that we could explore, test, and benchmark wifi without interference from other signals. This proved remarkably hard. No matter where we went in the world, there was ALWAYS at least one AP with a competing signal on the channel. We gradually devolved into testing 5ghz only, where we could usually find clear air on some channel or another. 2.4ghz was simply not benchmarkable with any consistency.

Testing with competing wifi signals is definitely on the agenda, but first getting a clean setup was not optional.

Then summer hit, [[bloatlab_1]] became too hot to inhabit, and campground with 110 acres high in the Santa Cruz mountains, asked if we could fix their wifi, so long as it didn't cost them anything. SCORE!

* Convienent location to the Valley
* No competing wifi signals
* Multiple (mostly comcast) connections to the internet
* Challenging terrain: Various areas can be isolated from each other, and wifi fiddled with at varying distances
* Range of random multi-platform workloads from nearly nothing (during the week) to hundreds (weekends)
* Overnight facilities for guests
* Onsite pool, piano, and hottub

So this site ended up being the site of the first-ever test fq_codel and quagga-babeld deployment on wifi and ethernet, on real hardware, in June of 2012. It was moderately successful, and feedback from various use patterns and tests resulted in a serious push to make cerowrt more stable than it was, and the fq_codel algorithm less memory intensive.

The June-August campground testbed consisted of 5 directional 5ghz nanostation 5MPs, 3 picostation 2HPs, 4 cerowrt wndr3700s, 1 cerowrt wndr3800. All the devices were upgraded to then-current openwrt + the current cerowrt kernels, excercised heavily, and various workloads analyzed.

The plan was to expand the network to a ring of 8-10 5MPs covering the entire property, 6 picostation 2HPs, and add a fully fq_codel'd set of firewalls and RTT simulators using donated vyatta hardware... as well as a parallel test backbone and produce a multi-exit-fq-codel - but ""money ran out in August"":http://www.teklibre.com/cerowrt/subscribe.html, and we ran into some pesky bugs that are now mostly resolved as of the ""sugarland"" release of cerowrt.

A revamped design along the above lines is being put together for deployment early in 2013.

NOTE: To preserve the privacy of the site and the users, raw data regarding various tests will not be made available. 
","",2012-10-22 14:48:20.924283,19
299,299,213,"h1. Technical description of FQ CoDel

The codel algorithm is now an IETF draft:  ""FlowQueue-Codel"":https://tools.ietf.org/html/draft-ietf-aqm-fq-codel 

There is an informal summary on Page 4: https://tools.ietf.org/html/draft-ietf-aqm-fq-codel#page-4

","",2015-08-18 21:40:53.183935,10
278,278,3,"{{>toc}}

h1. Videos about Bufferbloat, Codel and FQ_codel

Over the last couple years, there have been a number of video presentations created to describe bufferbloat and the solutions to it. This is a collection of links to these resources, in roughly date order...

h2. Jim Gettys (of Alcatel) Bufferbloat: Dark Buffers in the Internet, April 26, 2011

""Jim Gettys'"":http://en.wikipedia.org/wiki/Jim_Gettys Google Tech Talk. This is a very detailed look into Jim's discovery of the problem, as well as a full early description of the problem. ""YouTube"":http://www.youtube.com/watch?v=qbIozKVz73g

h2. Fred Baker (of CISCO) explains bufferbloat at LACNIC, July 2012 (Español only video)

""Obesity, it's not just a human problem"":http://www.youtube.com/watch?v=uQ9ziQg_1zU 

h2. Van Jacobson (of Google) introduces the codel solution and the packet fountain analogy at the IETF84 conference, July-August 2012

""Van Jacobson"":http://www.wired.com/wiredenterprise/2012/05/van-jacobson/ speaking about ""TCP, Congestion, and CoDel cure"":http://recordings.conf.meetecho.com/Recordings/watch.jsp?recording=IETF84_TSVAREA&chapter=part_3 . The quality of the video is sadly poor, and his slides (""here"":https://plus.google.com/u/0/107942175615993706558/posts/eG8wZh7Qshs ) not in sync, but follow along, if you can. 
 
h2. IETF demo side-by-side of a normal cable modem vs fq_codel

IETF: ""Demonstration of web page load reduction times"":http://www.circleid.com/posts/20130418_bufferbloat_demo_see_how_much_faster_internet_access_can_be/

h2. Jesper Dangaard Brouer (of RedHat) leverage’s Van Jacobson's analogy 

in his ""in depth look at codel - Have we found the cure for Bufferbloat?"":http://www.circleid.com/posts/20130506_video_have_we_found_the_cure_for_bufferbloat/

h2. Eric Dumazet (of Google) at the Linux Plumbers conference

He (author of fq_codel) takes a shot at explaining ""How fq_codel works"":http://linuxplumbers.ubicast.tv/videos/codel-and-fq_codel-fighting-the-delays/

h2. Stephen Hemminger's (of Vyatta) Bufferbloat from a Plumbers Point of view, 25 March 2013

Stephen has put together an increasingly high energy talk and demonstrations about how ""various queue theories work"":http://www.youtube.com/watch?v=y5KPryOHwk8 - in friendly competition with Dave's talks... 

h2. Toke Høiland-Jørgensen 

* ""Steady state, fairness and transient behaviour of modern AQMs"":http://www.bufferbloat.net/attachments/222/abstract-aqm-algorithms.pdf filmed at:
  ""Stanford netseminar"":http://netseminar.stanford.edu/  http://netseminar.stanford.edu/

h2. Dave T&auml;ht's ""Water Videos"", November 2012

Dave T&auml;ht (Hindmost, Bufferbloat.net) gave a lecture at the University of Modena in late November 2012, where he managed to cover 30 years of network queueing theory in 80 minutes. Here are selected video segments from the lecture showing various queueing techniques. Full rate video (.mp4), an .mp3 of the audio, and the .odp presentation are available at http://www.teklibre.com/~d/talks/video/ or get a ""PDF version of the slides"":http://www.bufferbloat.net/attachments/download/147/Not_every_packet_is_sacred-Fixing_Bufferbloat_Codel_Fq_Codel.pdf

* *Bufferbloat #1/TCP 101*
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_143953.mp4 ""YouTube"":http://www.youtube.com/watch?v=KD5TwLQnq_8
* *Bufferbloat #2/Tail-drop queueing* 
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_144744.mp4 ""YouTube"":http://www.youtube.com/watch?v=PgFcqRMDqlk
* *Bufferbloat #3/FIFO, RED, Blue, and Fair Queueing*
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_150143.mp4 ""YouTube"":http://www.youtube.com/watch?v=Y9xJbwb28Zc
* *Bufferbloat #4/Wifi, Netalyzr, SFQ, SFQRED*
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_151516.mp4 ""YouTube"":http://www.youtube.com/watch?v=ol_BcKA9Ohg
* *Bufferbloat #5/CoDel and Drop Head Queueing*
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_152757.mp4 ""YouTube"":http://www.youtube.com/watch?v=R8Esi0zjNdE
* *Bufferbloat #6/More details on FQ-Codel* 
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_153327.mp4 ""YouTube"":http://www.youtube.com/watch?v=bi-jumVNVGk
* *Bufferbloat #7/Questions and Answers*
	""Raw .mp4"":http://www.teklibre.com/~d/talks/video/20121128_154620.mp4 ""YouTube"":http://www.youtube.com/watch?v=JFH5fGNzBJU

h2. Dave T&auml;ht's ""FQ_codel World Tour"", March-June 2013

Dave then went on a world tour to try and find ways of explaining the fq_codel solution to bufferbloat in depth, to a variety of audiences.

* Stanford: ""Inside Codel and FQ Codel"":http://netseminar.stanford.edu/
* MIT: ""What's wrong with wifi?"":http://www.youtube.com/watch?v=Wksh2DPHCDI&feature=youtu.be
* The Gathering: ""How to really fix your lag"":http://technet.gathering.org/2013/03/31/tg13-preso/ 
* RIPE 66: ""CeroWrt against an uncaring Universe"":https://ripe66.ripe.net/archives/video/1200/
* UKNOF 25: ""Beating Bufferbloat with fq_codel"":http://www.youtube.com/watch?v=quAaZKBHvs8

h2. Dave T&auml;ht's ""Make-wifi-fast Tour"", Jul - ?? 2015

* Battlemesh: ""How to make wifi fast again"":https://www.youtube.com/watch?v=-vWrFCZXOWk
* Battlemesh: ""Fixing IoT and the space program"":https://www.youtube.com/watch?v=QWdL2Wu7M-8


","",2015-09-06 04:14:58.566063,39
241,241,213,"h1. Historical Documents

h2. Berlin (CeroWrt 3.8) Builds

Berlin is the code name for the Cerowrt 3.8 (3.9?) build which is currently (May 2013) under development.

h2. Modena (CeroWrt 3.7) Builds

Modena is the code name for the current CeroWrt 3.7.5-2 build, created in February 2013. You can read about it at the main Wiki page.

h2. Sugarland (CeroWrt 3.3) Builds

Sugarland (CeroWrt 3.3.8-26) was released on 18 Sep 2012, and is the first release to include CoDel code. It is listed here only for the historical record, since the the Modena (3.7) builds incorporate all its features and offer significantly improved performance.

* CeroWrt 3.3 Release Notes: http://www.bufferbloat.net/projects/cerowrt/wiki/CeroWrt_33_Release_Notes
* Download from: http://huchra.bufferbloat.net/~cero1/3.3/3.3.8-26/
* Read This First for CeroWrt 3.3 and earlier: [[READ THIS FIRST]]
* CeroWrt (Sugarland and earlier) benefitted from [[Setting QoS]]
* First CeroWrt build to incorporate fq_codel was 3.3.6-3, 14May2012 (https://lists.bufferbloat.net/pipermail/cerowrt-devel/2012-May/000233.html)

h2. BQL builds

The bql-smoketest builds provided a good improvement to the buffer bloat problem from November 2011 through February 2012. However, all their major improvements have been implemented in the Linux 3.3 kernel. You can read the [[BQL series release notes]].  bql-smoketests: http://huchra.bufferbloat.net/~cero1/bql-smoketests/

h2. OCEAN CITY builds

About the OCEAN CITY release. In the latter half of 2011, we had hoped to release a build with grand goals. This release was to be named OCEAN CITY. But reality set in, and it became obvious that we could not meet these goals. The rc6 build is the culmination of the Ocean City release. Download the stable release: http://huchra.bufferbloat.net/~cero1/cerowrt-wndr3700-1.0rc6/ 

Any remaining references to an Ocean City on these pages are being changed to align with the more important goals set out above. The [[OCEAN CITY]] page lists obsolete information.

h2. Other documents

The following may be incomplete or outdated.

[[Architecture Notes]]

[[targets]]

[[Building CeroWrt on your own machine]]

[[Using the CeroWrt test tools]]

h3. Packages developed during Bismark boot camp

[[netperf]]

[[uftp]]

h3. Test Labs

[[BloatLab 1]] (isc.org)

[[pdsh]]

[[bloat:BANA]]

[[scratch]]","",2014-05-08 05:29:21.334433,10
250,250,3,"h1. CoDel Overview

{{>toc}}

CoDel is a novel “no knobs”, “just works”, “handles variable bandwidth and RTT”, and simple AQM algorithm.

* It is parameterless — no knobs are required for operators, users, or implementers to adjust.
* It treats good queue and bad queue differently - that is, it keeps the delays low while permitting bursts of traffic.
* It controls delay, while insensitive to round-trip delays, link rates, and traffic loads.
* It adapts to dynamically changing link rates with no negative impact on utilization.

CoDel (the name comes from ""controlled delay"") is the first fundamental advance in the state of the art of network Active Queue Management in many, many years.

It is pronounced ""coddle"", because it handles network streams in a gentle way.

With the ""fq_codel"" variant (Fair/Flow Queueing + Codel) it is  possible to reduce bottleneck delays by several orders of magnitude, and provide accurate RTT estimates to elephant TCP flows, while allowing shorter (sparser) flows like DNS, ARP, SYN, routing, etc packets priority access.

We don't say *several orders of magnitude* lightly. We have ""the benchmarks"":http://www.bufferbloat.net/projects/codel/wiki/RRUL_Rogues_Gallery to back it up.  Some more recent benchmarks on cable systems are here: http://burntchrome.blogspot.com/2014/05/fixing-bufferbloat-on-comcasts-blast.html - and there are multiple papers on the subject now of widely varying quality.

h2. Deployments

OpenWrt Barrier Breaker, Chaos calmer and later, CeroWrt, dd-wrt, IPfire and many others now use fq_codel in their main QoS system.
Free.fr's revolution V6 router uses it by default. It is also available in ubnt's edgerouter series of products.
It is a component of Qualcomm's ""streamboost"" QoS system. It is in Netgear's ""Dynamic Qos"" feature for their X4 product.
And in many places elsewhere. Linux version 3.6 and greater has support for it (not turned on by default). The sysctl
knob landed in 3.12, and systems that use systemd, like fedora 22, now default to fq_codel.

We are nearly done creating a successor to fq_codel and the ""sqm"" system, called ""cake"":http://www.bufferbloat.net/projects/codel/wiki/CakeTechnical which we addresses a few edge cases fq_codel had, is faster code, and better all across the board.

h2. Papers and Publications

The most up to date descriptions of codel and fq_codel are now the subject of IETF internet drafts.

""Codel"":http://tools.ietf.org/html/draft-nichols-tsvwg-codel-02

""FlowQueueCodel"":http://tools.ietf.org/html/draft-hoeiland-joergensen-aqm-fq-codel-00


h2. Older Papers

""Controlling Queue Delay"":http://queue.acm.org/detail.cfm?id=2209336 ACM Queue, Kathleen Nichols, Van Jacobson, May, 2012
""Codel"":http://www.pollere.net/CoDel.html page at ""Pollere"":http://www.pollere.net . Pollere does research on and analysis of network performance via modeling and simulation, measurement,and laboratory prototypes.
""Kathie Nichol's CoDel"":http://recordings.conf.meetecho.com/Recordings/watch.jsp?recording=IETF84_TSVAREA&chapter=part_3 at the IETF-84 Transport Area Open Meeting, 30 July, 2012, Vancouver, Canada, by Van Jacobson.

h2. Simulations

Kathie Nichols' and Van Jacobson's original ""ns2 simulation of codel"":http://www.pollere.net/CoDel.html
Their most current ns2 code is now available ""via git"":https://github.com/dtaht/ns2

We worked on updating the codel and fq_codel ns3 simulations in a ""github repository"":https://github.com/dtaht/ns-3-dev - but that is now obsolete. Codel landed in ns3 mainline in sept, 2014, as part of the Google Summer of Code, and fq_codel (and variants) are slated for the next version.

There are now basically 6 slightly different variants of codel (see [[Reconciling codel variants]]), flying in loose formation. The code as published in the original paper is obsolete. Research is continuing. Come help!

h2. Mailing list and chat room

There is a ""CoDel mailing list"":https://lists.bufferbloat.net/listinfo/codel, and discussions that take place on irc.freenode.net in the #bufferbloat chat room.
Please go to the codel mailing list if you have questions.

h2. Linux Code

CoDel - in order to run well at line rate - requires the Linux 3.3 ""Byte Queue Limits"":http://lwn.net/Articles/454390/ . It has proven too hard to backport BQL to Linux 3.2 or earlier (an attempt for 3.2 exists, but no driver support), so you will need to upgrade to Linux 3.5 or later, and have a driver that supports BQL (only about 24 as of the present writing). 

If you are doing soft rate limiting (eg shaping with HTB or HFSC), BQL is *not* required at the driver level. Codel and fq_codel are in the Linux 3.5 release - no patches are required, but BQL support is limited, as noted. There were multiple bugs in HTB fixed prior to Linux 3.11.

While fq_codel and codel are ""no knobs"" qdiscs, several other knobs can be tweaked for the lowest latency results. An example script for doing that is called ""debloat.sh"" which is available from ""the deBloat repository"":https://github.com/dtaht/deBloat on github. It tunes up BQL, turns off various forms off tcp offloads, and offers both a fq_codel and codel + qfq model to play with. Turning off BQL is not really needed since linux 3.8 and later, the autotuning works well. TCP small queues has evolved to
where it does the right thing with TCP offloads as of linux 3.12.

So most of the debloat script is no longer needed.

All codel and fq_codel development was pushed into the linux mainline as of linux 3.6 and you should look there for the most up to date code.

iproute2 added support for fq_codel in the 3.6 release and configuration and statistics should be available by default in most Linux systems shipped today.

h2. [[cerowrt:Wiki|CeroWrt]] Version

The CeroWrt research router project was started, specifically, to test new AQM technologies, and has been tracking codel closely.

A pretty solid build ""is now available"":http://www.bufferbloat.net/projects/cerowrt/wiki/CeroWrt_310_Release_Notes

The fq_codel code has already migrated into the OpenWrt mainline (upon which Cerowrt is based), so the research has paid off! - there is more to come...

h2. Binary code and kernels for Linux based operating systems:

All modern linux distros now ship with fq_codel. 

For servers with tcp-heavy workloads, particularly at 10GigE speeds, for queue management, we recomend sch_fq instead of fq_codel as of linux 3.12.  

Either qdisc can be enabled by default via a single sysctl option in /etc/sysctl.conf

net.core.default_qdisc = fq_codel # best general purpose qdisc

net.core.default_qdisc = fq # for fat servers, fq_codel for routers. Note that in a virtualized environment the underlying server IS a router, the guest VMs are hosts and we don't have a lot of data regarding either qdiscs' performance at 10gigE speeds on vms - and early data on fq shows fq_codel's lowered quantums of benefit at 1GigE and below. We certainly expect fq to continue to improve on hosts and servers... and we expect fq_codel to improve also.

h2. Code for other operating systems

A port of Codel exists for BSD and is available in pfsense and elsewhere.

h2. Known issues

At very low bandwidths (e.g. .5Mbps) on ADSL, we're having to play with the target; Kathie did not have to in her simulations. This is due to inevitable buffering
in htb or in the device driver. We have a version under development that does bandwidth limiting without buffering an extra packet, called cake. It's looking good so far.

People have tried to run CoDel in very big routers, with hundreds of simultaneous flows, a situation not simulated in advance. There, it isn't controlling the queue the way it should: whether this is a problem with the algorithm, or the implementation, is not yet understood. fq_codel does better in this case.

It is clear that without lowering the target and interval variables, CoDel is not appropriate for AQM of traffic solely inside a data center; it does not react in a timely enough fashion. Whether the modifications of the ideas in CoDel will solve this problem is not yet known. Again, this is an area which CoDel was not designed to solve or it simulated in before publication.","",2015-10-14 10:26:53.042443,80
313,313,3,"h1. Upcoming Talks on Bufferbloat related issues

|_. Date |_. Who |_. Affiliation |_. Title |_. Where |_. Public? |_. More |
| 2014-10-15 | Stephen Hemminger | Brocade | ""Why is my network slow?"":http://lccoelce14.sched.org/event/b72fb0300cb6509ba3baaa664d84fe1e#.VDrb762NGV4 | Linux Plumbers conference | Yes | |
| 2014-10-16 | Avery Pennarun | Google Fiber  | ""802.11ac speeds are great - if you are 3 feet away"":http://www.linuxplumbersconf.org/2014/ocw/sessions/2145 | Linux Plumbers conference | Yes | |
| 2014-10-16 5:30 | Jesper Dangaard Brouer  | Redhat | ""Linux packet processing performance improvements"":http://www.linuxplumbersconf.org/2014/ocw/sessions/2469 | Linux Plumbers conference | Yes | |
| 2014-10-20 14:00 | Toke Høiland-Jørgensen |Karlstad University | ""How to reliably measure..."":http://www.bufferbloat.net/attachments/222/abstract-combined.pdf | Caida | | |
| 2014-10-21 10:00| Toke Høiland-Jørgensen |Karlstad University | ""Steady state, fairness and transient behaviour of modern AQMs"":http://www.bufferbloat.net/attachments/222/abstract-aqm-algorithms.pdf | UCLA | | |
| 2014-10-23 10:00 | Toke Høiland-Jørgensen |Karlstad University | ""How to reliably measure..."":http://www.bufferbloat.net/attachments/222/abstract-combined.pdf | UCSB | | |
| 2014-10-27 13:30 | Toke Høiland-Jørgensen |Karlstad University | ""How to reliably measure..."":http://www.bufferbloat.net/attachments/222/abstract-combined.pdf | Google | No | |
| 2014-10-30 12:15 | Toke Høiland-Jørgensen |Karlstad University | ""Steady state, fairness and transient behaviour of modern AQMs"":http://www.bufferbloat.net/attachments/222/abstract-aqm-algorithms.pdf | ""Stanford netseminar"":http://netseminar.stanford.edu/ | Semi | |
| 2014-11-06 18:30 | Dave Taht | Teklibre | How to make wifi fast | Meraki | Yes | SF office |
| 2015-01-29 18:30 | Dave Taht | Teklibre | ""Fair Queuing, AQM, and ECN"":http://www.nznog.org/home/speakers | NZNOG | Yes | ""Distinction Hotel, Rotora, NZ"":http://www.nznog.org/venue |


Older (and filmed) Talks are archived on the [[cerowrt:bloat-videos]] page.","",2015-01-11 19:55:04.800984,22
276,276,3,"h1. Benchmarking Codel and FQ Codel

Please see the complete [[Best practices for benchmarking Codel and FQ_Codel]] page for extensive details.

h2. Benchmark tool issues

Benchmarks such as netperf, speedtest.net, and netanalyzer are all flawed in that they tend to test single stream behavior, rather than multi-stream. Most of the web based tests peak out at 20Mbits, and none run long enough to generate a statistically valid result.

The core bufferbloat benchmarks all test ""latency under load"", for multiple streams. The kind of testing you should do while optimizing your network connection would be, for example, A speedtest.net test, WHILE doing a ping. A netperf, WHILE making a phone call, trying to hold the latency and jitter of the smaller stream (ping or voip)small. 

We have developed the ""netperf-wrapper"":https://github.com/tohojo/netperf-wrapper tool suite to make benchmarking these various network attributes easier, with results that can be easily shared and graphed several dozen ways. It is available for Linux, BSD, and BSD-derived systems such as OSX.

Also:

The codel algorithm uses buffering as a ""shock absorber"", and thus, short term udp flooding tests such as netalyzer, show the actual physical amount of buffering, not the amount codel eventually converges on for a single stream. So netanalyzer in particular, will show you have excessive buffering, when a better test would be measuring latency of a second stream.

Unmeasured by anything, fq_codel gives the first packet in each stream priority, so that small streams jump to the front of the queue, allowing for much higher parallelization and utilization. We keep hoping to be able to benchmark this effect on web applications in particular, but haven't come up with a way to do so.


The fq_codel version of codel won the accolades of codel's co-designer, ""Van Jacobson"":http://recordings.conf.meetecho.com/Recordings/watch.jsp?recording=IETF84_TSVAREA&chapter=part_3 :

bq. fq_codel provides great isolation... if you've got low-rate videoconferencing and low rate web traffic they never get dropped. A lot of the issues with iw10 go away, because all that other traffic sees is the front of the queue and you don't know how big its window is and you don't care because you are not affected by it. And: fq_codel increases utilization across your entire networking fabric especially for bidirectional traffic... If we're sticking code into boxes to deploy codel, don't do that. Deploy fq_codel. It's just an across the board win."" - Van Jacobson 

And since then, we've been working on deploying it, rather than refining it.

h2. Third party benchmarks

""fq_codel and pie vs cable"":http://burntchrome.blogspot.com/2014_05_01_archive.html

http://planet.ipfire.org/post/ipfire-2-13-tech-preview-fighting-bufferbloat
","",2014-09-02 09:45:33.286891,10
317,317,3283,"h1. Cake - Common Applications Kept Enhanced

*Development on Cake was orignally sponsored by* ""IIS"":http://www.iis.se and is now sponsored by ""NLnet"":http://nlnet.nl We appreciate their support... and could always use more help from others that care about speeding up the internet.

{{>toc}}

Cake is the rollup of 3 years of deployment experience of the htb + fq_codel based sqm-scripts [[cerowrt:SQM]] for aqm/fq/qos inbound and outbound bufferbloat management. For input into the design and implementation, please join the  ""cake mailing list"":https://lists.bufferbloat.net/listinfo/cake . For an alternative approach to inbound traffic management, see [[Bobbie]].

Slides from a recent talk on Cake, at Battlemesh v8:  attachment:cake-battlemesh-v8.pdf

h2. Features and enhancements of cake over htb + fq_codel

h3.  8 way set associativity

This makes the hash collision problem Toke pointed out in fq_codel at the ietf meeting previous *go away* even for REALLY large numbers of flows. We note that this is not a panacea in that it means that the codel portion of the algorithm gets less chance to run and proves problematic... (cake stablizes at a much higher delay than we would like right now) but it does mean that we get way better flow isolation in general, which may lead to a more ideal aqm implementation.

h3.  An integral shaper (that can be on or off or tuned dynamically) 

Is much ""tighter"" than htb - uses about 30% less cpu on low end hardware (don't take that as a final or even accurate figure!) , and is less ""bursty"".

h3. TSO/GSO/GRO ""peeling""

!>https://www.iis.se/docs/iis_logo-160x160.png!
!>https://nlnet.nl/logo/banner-320x120.jpg!

Many ethernet device drivers and tcp stacks bulk up multiple packets for one destination into a offloaded ""superpacket"" that is handed off to the hardware. This dynamic range of 1000x1 is very hard on aqm and fq algorithms which seek to have minimal drops and maximal fairness.

And yet, at higher rates (>100mbit), present day hardware requires those offloads be present in order to achieve maximum utilization.

So cake, when shaping to a lower rate than gigE, will peel apart large superpackets back into packets again, and thus fq and aqm them better than fq_codel did.

Preliminary indications are that not doing GRO ""peeling"" is where the first generation of fq_codel enabled 802.11ac routers went wrong in their QoS systems.

h3. Command line interface is WAY simpler than htb + fq_codel

<pre>

tc qdisc add dev eth2 root cake bandwidth 50mbitUsage: ... cake [ bandwidth RATE | unlimited* | autorate_ingress ]
                [ rtt TIME | datacentre | lan | metro | regional | internet* | oceanic | satellite | interplanetary ]
                [ besteffort | squash | precedence | diffserv8 | diffserv4* ] # diffserv variants including none
                [ flowblind | srchost | dsthost | hosts | flows* ] # hash algorithm on what fields
                [ atm | noatm* ] [ overhead N | conservative | raw* ]
    (* marks defaults)

(squash) removes DSCP from packets and applies 'besteffort' to the result
(flowblind) gives pure single queue codel aqm behavior, useful for testing the new codel implementation
(autorate_ingress) is very experimental

</pre>

h3.  ECN always on with overload protection 

(so it cannot be easily gamed)

h3. ECN also done more right when in overflow mode 

(drop then mark for an immediate congestion signal)

h3. Better codel model 

(tighter recovery algorithm, more accurate invsqrt, earlier kick in on overload)

h3.  Packet limit management done with bytes rather than packets

Despite these new algorithms tightly controlling the queue size, practical circumstances (available memory) and resistance to attacks requires there be some outside limit at which point the qdisc arbitrarily drops packets. fq_codel, codel, pie, and others all use a per packet limit.

Per packet limits has a dynamic range of roughly 1000x1 (64k to 64 bytes). This is really hard to cope with. A small limit might run you short on keeping the device fed (for small packets) yet completely overwhelm the memory on big (offloaded with GRO/TSO/GSO) packets. 

A sensible byte limit, on the other hand has a dynamic range of about 4x1 in the worst case (each packet has about 256 bytes of overhead associated with it, so a 64 byte packet is 5x bigger than it should be, but a 1500 byte packet only a few percent). Additionally, when cake is handed a bandwidth argument, it is possible to come up with a reasonable size based on the BDP and a few heuristics, to come up with a reasonable outer limit. To what degree cake is coming up with reasonable outer limits right now, is still a matter of debate and coding.

h3. Extensive framing compensation (for DSL/ATM/PPPoe)

The initial cake-overhead patch included only “raw” and “conservative” shortcut keywords, alongside the numeric “overhead” parameter for experts.  I’ve now worked out an extended set of keywords which, I think, takes care of all the normal cases.

There are eight new keywords which deal with the basic ADSL configurations.  These switch on ATM cell-framing compensation, and set the overhead based on the raw IP packet as a baseline.

ipoa-vcmux (8)
ipoa-llcsnap (16)
bridged-vcmux (24)
bridged-llcsnap (32)
pppoa-vcmux (10)
pppoa-llc (14)
pppoe-vcmux (32)
pppoe-llcsnap (40)

Note that “pppoa-llc” is not a typo - it really doesn’t involve SNAP, and is thus a little more compact than if it did.

Two more new keywords deal with the basic VDSL2 configurations.  Again, the overheads use IP as a baseline, but this time ATM cell-framing is turned off.  Apparently PTM does have a small additional overhead on the order of 1/128, due to HDLC framing which attaches special meaning to 0x7D and 0x7E bytes; I might need to add approximate handling for that, kernel-side.

pppoe-ptm (27)
bridged-ptm (19)

For those interested in shaping ethernet links the following keywords are defined.

ether-phy (20) - pre-amble, inter-frame gap
ether-all (24) - pre-amble, inter-frame gap & Frame Check Sequence

The final three keywords are not for standalone use, but act as modifiers to some previous keyword.  They can be specified more than once, which is probably only useful for “ether-vlan”.

via-ethernet (-14)
ether-fcs (+4)
ether-vlan (+4)

h3. Diffserv support 

Based on the efforts of the ietf ""Dart"" working group, we have a rough set of classifications that make sense into 4 bins of priority, but getting this right, too, is a matter of debate. Certainly 8 seems like overkill. Pure precedence is in cake as an option also, based on the CSX-CS7 set of priorities but it should not be used in a modern diffserv installation. 

The only way we know how to ""fix"" bittorrent is to classify it somewhat, somehow, as ""background"". 

sqm-scripts used 3 tiers of priority pretty successfully as does free.fr. - de-prioritization seems a good idea, prioritization not so much.

h2. Some of the history

We have  been discussing/working on this for about two years. Work stalled out on the first two versions in september 2014 (after we hit some major snags also). Jonathan could not work for free anymore either... As of April 2015, he is now committed to 2-3 months work (via a donation), and we are back to making some serious progress.

At line (native) rate cake uses more cpu than what fq_codel does.

At a shaped rate, it does much better than htb + fq_codel does. There are a lot of easy cpu speed up mods left to make, but we prefer to work on fixing two problematic bits of codel right now... adding other features, and fixing bugs.

Cake is largely Jonathan Morton's work, based on extensive discussions with Dave Taht, Toke, and Eric Dumazet and fragments of the various codel and fq_codel stuff Dave Taht had done over the last 3 years. In particular, the set associative hash, shaper, and diffserv code innovations are all Jonathan's contributions.

h2. Some Statistics

Here are tons of statistics tested live on a comcast 115Mbit/12Mbit connection. You can see both drops and marks (as the new overload protection kicks in).

The Pk delay is the ewma of the delay being experienced by the fat flow. Av is average. sp is the delay experienced by ""sparse"" flows - typical voip dns etc that fq_codel already did so well that we have always found hard to measure.
You do not see anything real for pk,av, etc because the tc dump was taken after the test.

The ""way"" stuff is related to the 8 way set associative hash. We never had a collision on this test - it is going to take serious work to create a test that will create one!

h3. Inbound rate limiter:

<pre>

qdisc cake3 8021: root refcnt 2 bandwidth 115Mbit diffserv4 flows
 Sent 854846030 bytes 601627 pkt (dropped 3, overlimits 502755 requeues 0) 
 backlog 0b 0p requeues 0
           Class 0     Class 1     Class 2     Class 3
  rate       115Mbit  107812Kbit   86250Kbit   28750Kbit
  target       5.0ms       5.0ms       5.0ms       5.0ms
interval     105.0ms     105.0ms     105.0ms     105.0ms
Pk delay        28us       165us       171us         0us
Av delay         2us         3us         4us         0us
Sp delay         0us         2us         3us         0us
  pkts        279494           6           6           0
way inds           0           0           0           0
way miss         126           2           4           0
way cols           0           0           0           0
  bytes    854849821         702         763           0
  drops            3           0           0           0
  marks           65           0           0           0

</pre>

I note that this is 1 minute of the rrul test to get this drop/mark rate. It is useful to get a feel for what is a ""good"" drop rate is by plunking these into a spreadsheet and to factor in the actual bandwidth and bytes transferred, AND to use varying numbers of flows. Most people do not have intuition here.

h3. Outbound rate limiter

<pre>
qdisc cake3 8020: root refcnt 9 bandwidth 12Mbit diffserv4 flows
 Sent 89763694 bytes 252935 pkt (dropped 29, overlimits 446956 requeues 0) 
 backlog 0b 0p requeues 0
           Class 0     Class 1     Class 2     Class 3
  rate        12Mbit   11250Kbit       9Mbit       3Mbit
  target       5.0ms       5.0ms       5.0ms       6.1ms
interval     105.0ms     105.0ms     105.0ms     106.1ms
Pk delay       6.4ms        33us         0us       5.4ms
Av delay       1.7ms         2us         0us       1.7ms
Sp delay         0us         0us         0us         0us
  pkts         50193       86214           0       98744
way inds           0           0           0           0
way miss           7         137           0           6
way cols           0           0           0           0
  bytes     14462333    52805488           0    22497221
  drops           20           1           0           8
  marks          294          86           0         621
qdisc ingress ffff: parent ffff:fff1 ----------------
 Sent 830112863 bytes 601877 pkt (dropped 0, overlimits 0 requeues 0)
 backlog 0b 0p requeues 0                      

</pre>

h2. Installing ""Cake"" out of tree on Linux

We are attempting to make it easier for people to test cake on pre-existing kernels. Please note that cake is under heavy development. The API might change. The code might change. If it breaks, you get to keep both pieces.

Do a:

*IF you have kernel source installed to leverage, adding cake is as easy as*

<pre>

git clone https://github.com/dtaht/sch_cake.git

cd sch_cake
make; sudo make install
</pre>

FIXME: How do you install kernel headers on various linuxes?

NOTE: I did not take the time to get the linux version checks exactly correct, but did manage to get it to compile on linux 3.13 and linux 3.18 without error, on x86_64, in the current git tree.

To use it properly, you will also need to build and install the iproute with cake support:

<pre>

git clone git://kau.toke.dk/cake/iproute2/ iproute2-cake
cd iproute2-cake
make
sudo make install

#Then:

tc qdisc add dev whatever root cake # and whatever options
</pre>

h2. Configuring cake

We had found that a ton of edge cases involving very low (sub 2.5mbit) bandwidths, and PPPoe and ATM framing compensation were bothersome in fq_codel, so cake automagically does some of that, although the atm compensation is untested at present.

You may need to do a modprobe of sch_cake and of act_mirred, and of other modules (u32?) for this to work. Also, on many devices, it used to be VERY helpful to turn off GRO on ALL ethernet devices, and TSO and GSO on the outbound device. We added ""peeling"" to fix this so you no longer have to turn off offloads like thiese.

There are numerous other traps for the unwary, documented in [[codel:Best_practices_for_benchmarking_Codel_and_FQ_Codel]] - we are trying to make those traps less dangerous in cake, for example, we came up with a way to ""peel"" apart TSO/GSO/GRO offloads to deal with packets rather than superpackets. 

h3. Outbound configuration under linux

While we have published some mods to make cake easy to configure under the existing sqm-scripts (cake eliminates many, many lines of code there) and gui, they have not quite made it out to openwrt yet.

Configuration of outbound is easy, the simplest default setting is:

<pre>
modprobe sch_cake
modprobe act_mirred
tc qdisc add dev eth2 root cake bandwidth XXmbit # where XX is your mbit. You can do kbit also. substitute your outbound interface for eth2.
</pre>

If you are interested in what pure AQM alone accomplishes, try the ""flowblind"" option. If you do not want classification, specify ""besteffort"". IF you want to run at line rate for your device, relying instead on backpressure from the ethernet driver (and hopefully [[BQL]]) don't specify the bandwidth.

h3. Inbound configuration under linux

Inbound is mildly more difficult because you have to setup an IFB (intermediate functional block) device, and re-route inbound traffic to it. A simple configuration (sqm-scripts example below) would be:

<pre>
ip link add name ifb4eth2 type ifb
tc qdisc del dev eth2 ingress
tc qdisc add dev eth2 handle ffff: ingress
tc qdisc del dev ifb4eth2 root
tc qdisc add dev ifb4eth2 root cake bandwidth 110000kbit besteffort
ifconfig ifb4eth2 up # if you don't bring the device up your connection will lock up on the next step.
tc filter add dev eth2 parent ffff: protocol all prio 10 u32 match u32 0 0 flowid 1:1 action mirred egress redirect dev ifb4eth2
</pre>

We have generally found that most diffserv inbound priorities are wrong, so we tend to specify besteffort here, and may add a ""squash"" option directly to cake to remove the diffserv markings entirely.

h2. Some example results while a rrul test was running:

<pre>

d at nuc-client:~/git/iproute2-cake$ ./tc/tc -s qdisc show dev eth0
qdisc cake 8002: root refcnt 2 unlimited diffserv4 flows
 Sent 13895939355 bytes 9605458 pkt (dropped 194, overlimits 0 requeues 0)
 backlog 318798b 26p requeues 0
           Class 0     Class 1     Class 2     Class 3
  rate          0bit        0bit        0bit        0bit
  target       5.0ms       5.0ms       5.0ms       5.0ms
interval     105.0ms     105.0ms     105.0ms     105.0ms
Pk delay       6.0ms       5.0ms         1us       2.3ms
Av delay       1.5ms       1.4ms         0us       654us
Sp delay       317us       201us         0us       141us
  pkts        128068      316663          56      236467
way inds           0           0           0           0
way miss           3          40           3           7
way cols           0           0           0           0
  bytes     45317244 11531124242        5524  2320607748
  drops          173          21           0           0
  marks            0           0           0           0

</pre>

A problem I have is in reconciling the netperf-wrapper plots which hit a minimum of 2ms for sparse flows, where I typically see ~200us delay in the qdiscs themselves. I have generally not cared at all about about anything less than 3ms prior to now.

<pre>

qdisc cake 8003: root refcnt 2 bandwidth 920Mbit diffserv4 flows
 Sent 2298586363 bytes 1826648 pkt (dropped 45, overlimits 474931 requeues 0)
 backlog 468331b 25p requeues 0
           Class 0     Class 1     Class 2     Class 3
  rate       920Mbit  862500Kbit     690Mbit     230Mbit
  target       5.0ms       5.0ms       5.0ms       5.0ms
interval     105.0ms     105.0ms     105.0ms     105.0ms
Pk delay       4.6ms       3.2ms         0us       5.2ms
Av delay       1.5ms       1.2ms         0us       1.6ms
Sp delay       303us       290us         0us       191us
  pkts        110498      111953           0      181478
way inds           0           0           0           0
way miss           3          31           0           6
way cols           0           0           0           0
  bytes    347279080  1377499174           0   574954712
  drops           14           0           0          31
  marks            0           0           0           0

</pre>

Have I mentioned how much I hate offloads? see the backlog relative to the number of ""packets"".

Still, I do think developing this out of tree will help a lot, after we get kernel versions straightened out more. Next up is trying to get
it to build on openwrt, also out of tree.

h2. Installing CAKE out of tree on OpenWrt - rough instructions

This is relatively easy and recently became a lot easier due to a couple of package handling bugs being fixed.  Also as of 13 Jul 2015 Toke pushed CAKE aware versions of some required utilities.

First you will need to install the OpenWrt source and build environment, fuller details including required dependencies can be found at http://wiki.openwrt.org/doc/howto/buildroot.exigence

Briefly to clone the latest version of OpenWrt, known as 'trunk' into a subdirectory 'openwrt' of your current directory:

<pre>
git clone git://git.openwrt.org/openwrt.git
</pre>

OpenWrt divides software components into packages and combines groups of packages into feeds.  For CAKE we'll need to add an extra feed as well as add all the packages from the standard feeds.  Install the standard packages:

<pre>
cd openwrt
./scripts/feeds update -a
./scripts/feeds install -a
</pre>

We're still missing the all important kernel 'cake' algorithm packet scheduling module, and whilst we're here we might as well have the 'pie' algorithm. Also a 'cake' aware version of tc is needed. There are OpenWrt suitable packages in Dave Taht's 'ceropackages' package feed.  Many packages exist in this feed so we have to be careful to only install those required.

<pre>
cp feeds.conf.default feeds.conf
echo ""src-git cero https://github.com/dtaht/ceropackages-3.10.git"" >>feeds.conf
</pre>

Now we need to tell OpenWrt to get this feed and install the required packages:

kmod-sched-cake & fq_pie are the qdisc kernel modules, tc-adv contains a patched version of 'tc' that understands the supported options to those modules.  Suitably up-to-date sqm-scripts packages are already in OpenWrt's package feed.

<pre>
./scripts/feeds update -a
./scripts/feeds install -p cero kmod-sched-cake kmod-sched-fq_pie tc-adv
</pre>

At this point we're building OpenWrt proper so you'll have to take the options appropriate for your target hardware.  Run 'make menuconfig' and select things as required.  As an example, for the Archer C7 v2 as I have I would select/navigate the following menu/options as a bare minimum:

<pre>
Target Profile -> TP-LINK Archer C5/C7

Luci -> Collections -> Luci (*)
        Applications -> luci-app-sqm (*)
Kernel Modules -> Network Support -> kmod-sched-cake & kmod-sched-fq_pie (*)
Network -> Routing & Redirection -> tc-adv (*)
</pre>

Exit menuconfig, saving your configuration, then run 'make' to build OpenWrt.  You'll find binary images to flash to your router in the bin/'platform' subdirectory.

If you're using some form of ipv6 in ipv4 tunneling then consider adding ""option tos 'inherit'"" to the 'wan6' interface definition in
/etc/config/network.  This will copy the DSCP classification from the encapsulated IPv6 packets to the encapsulating IPv4 packets and help cake classify the contained flows into the correct tin.  Enjoy! - Kevin D-B","",2015-12-10 12:30:46.434425,62
279,279,3,"h1. Best Practices for Benchmarking CoDel and FQ CoDel (and almost any other network subsystem!)

{{>toc}}

Document version: 1.5, May 26, 2014.

The bufferbloat project has had trouble getting consistent repeatable results from other experimenters, due to a variety of factors. This page attempts to identify the most common omissions and mistakes. There be land mines here. Your data will be garbage if you don't avoid them!

h2. Hardware/Software Traps for the Unwary

Network hardware (even in cheap hardware!) has grown ""smart"", with offload engines of various sorts.  Modern network hardware has often sprouted various ""offload"" engines, unfortunately now often enabled by default, which tend to do more damage than good except for extreme benchmarking fanatics, often primarily on big server machines in data centers. If you are trying to emulate a router's behavior, turning off offloads like TSO/GSO/GRO/LFO is a good start. In the case of a host, there have been mods to TCP's behavior to make it less bursty and to more sanely use these offloads post Linux 3.13 with the sch_fq and pacing options added to it. 

h3. Enabling Byte Queue Limits

Transmit and receive rings are now ubiquitous, to get the CPU's out of the business of handling interrupts on a per packet basis when running at high bandwidths with small packets. There is a potential dynamic range of a ""packet"" of 64 bytes to 64k bytes in modern systems with TSO enabled. This is often a large source of bufferbloat, as the drivers have managed the rings in the most primitive possible way. ""BQL"":https://lwn.net/Articles/454390/ (byte queue limits) is *the first step* in putting sanity back into Ethernet driver transmit ring management.

There are now over 24 BQL enabled Ethernet drivers in Linux 4.1, many of which apply to many card models, and most are well tested. They are:

<pre>
As of the last kernel we looked at, support for BQL was in the following multi-queued (and mostly 10GigE) drivers:

find drivers/net/ -name '*.c' -exec fgrep -l \
netdev_tx_completed_queue {} \;

drivers/net/ethernet/broadcom/bnx2.c
drivers/net/ethernet/broadcom/bnx2x/bnx2x_cmn.c
drivers/net/ethernet/broadcom/tg3.c
drivers/net/ethernet/intel/igb/igb_main.c
drivers/net/ethernet/intel/i40e/i40e_txrx.c
drivers/net/ethernet/intel/ixgbe/ixgbe_main.c
drivers/net/ethernet/intel/fm10k/fm10k_main.c
drivers/net/ethernet/intel/i40evf/i40e_txrx.c
drivers/net/ethernet/mellanox/mlx4/en_tx.c
drivers/net/ethernet/sfc/tx.c
drivers/net/ethernet/freescale/gianfar.c
drivers/net/ethernet/amd/xgbe/xgbe-drv.c


And in the following (most GigE and lower) drivers:

find drivers/net/ -name '*.c' -print | \
xargs fgrep -l netdev_completed_queue

drivers/net/ethernet/nvidia/forcedeth.c
drivers/net/ethernet/atheros/alx/main.c
drivers/net/ethernet/broadcom/b44.c
drivers/net/ethernet/broadcom/bgmac.c
drivers/net/ethernet/intel/e1000/e1000_main.c
drivers/net/ethernet/intel/e1000e/netdev.c
drivers/net/ethernet/realtek/8139cp.c
drivers/net/ethernet/via/via-rhine.c
drivers/net/ethernet/stmicro/stmmac/stmmac_main.c
drivers/net/ethernet/marvell/sky2.c
drivers/net/ethernet/marvell/skge.c
drivers/net/ethernet/hisilicon/hip04_eth.c
drivers/net/ethernet/hisilicon/hix5hd2_gmac.c

</pre>

If your driver is NOT BQL enabled, you will need to use HTB to emulate rates correctly. (or, better! take the time to add the 4-8 lines of code needed for BQL for your devices's driver)

Beware that other network interfaces have often sprouted similar ""smart"" hardware (e.g. some DSL hardware, all USB to Ethernet devices); no help for them is yet available. Worse than that, software offloads emulating TSO (GSO) have now appeared, saving a little bit on interrupt processing at higher bandwidths, and bloating up packets at all bandwidths, including lower ones. We would really like to see GRO and GSO be disabled entirely at 100Mbit and below. Let packets be PACKETS!

The GRO problem is so common now (and so needed in now-shipping devices) that in [[Cake]] we added offload ""peeling"" to turn superpackets back into packets.

Consequently, you *must* understand the device drivers you are using before benchmarking.

h3. Ethernet BQL (Byte Queue Limits) Driver Enablement

BQL rate limits packet service to the device in terms of bytes on Ethernet. BQL was initially developed and tuned at 1 and 10Gbps. Its estimator is often wrong at speeds below 100Mbit, usually double or more what is needed (and see the last note here about how this further damages CoDel behavior. 100Mbit and below 3K suffices. 10Mbit and below 1514 is as low as you can go and it should be even lower.

Common experimental errors: Leaving BQL at autotuning, setting it to too high a value for the bandwidth available, etc.

We would like BQL to autotune better, but as of Linux 4.1, it does not. Perhaps BQL can be fixed to have a lower limit and just periodically exceed it for larger packets.

We are looking into other algorithms than BQL for other network types, which have often sprouted similarly ""smart"" hardware to Ethernet, e.g. ADSL/VDSL, which must cover a bandwidth range of 250Kbps to 100Mbps.

h3. Coping with offloads

Littered through this document presently are the evils of offloads, and a future re-org of this document will call them out in a dedicated section. This ""problem"" (it is also a needed optimization to run at gigE speeds on much modern hardware) has become so prevalent in both testing and the real world that a fix for codel's maxpacket calculation arrived in linux 4.1, and compensatory mechanisms are also now in TBF and [[Cake]].

h3. Dealing with NAPI

The linux NAPI subsystem defers receive interrupt processing for (usually) up to 64 packets. This is quite a lot at 100Mbit and it does not autotune. Even drivers targeted at 100Mbit devices tend to copy/paste the typical default of 64 (where 16 would be more sane) for the NAPI default.

h3. Dealing with sleep states

Aggressive sleep state behavior in intel nics was a problem - we saw jitter and oddities in the 2-3ms range in one recent Linux kernel, solved by disabling power save in the BIOS. 

h3. Hardware Rate Limiting

Adjusting the ethernet card to a different line rate is useful, but several other variables inside the stack must be adjusted. Those are turning off all network offloads on ALL cards, and setting BQL to an appropriate rate for the set bandwidth.

The ""debloat.sh"":https://github.com/dtaht/deBloat/blob/master/src/debloat.sh and ""debloat"":https://github.com/dtaht/deBloat/blob/master/src/debloat scripts try their best to eliminate those variables, but do not always succeed.

We have found that 3000 is a reasonable setting for BQL on a 100Mbit system and 1514 is reasonable for 10Mbit, _if configured with a low latency kernel_. We note that unlike experimenters leveraging what hardware and kernels they have lying around, a router maker should make these choices by default...

On some devices, you can also reduce the ethernet tx ring down to 2, at 10Mbit, with no ill effects, however you should measure this optimization's affect on throughput.

Note that most home routers have an internal switch that runs at a fixed rate. Turning down CeroWrt's rate on it's internal ethernet device *doesn't work* and for tests that try to use hardware rate limiting there, you are driving buffering into the switch, not the (ne)fq_codel algorithms, and most drops happen *in the switch*, thus invalidating your test.

Leave the switch out of your testbeds. If you must have one, measure its behaviour thoroughly, while under saturating load from two ports going into one. You may be surprised by how much buffering has crept into switches - one GigE switch we've seen has 50ms of buffering (at gigE!). What is more, your switch, which might or might not be properly buffered at 1Gbps, will likely have ten times too much buffering if used at 100Mbps, and 100 times too much buffering when used at 10Mbps.

h3. Hardware Flow Control

Many devices (notably DSL modems and some Homeplug devices) will exert ethernet hardware flow control frames, which are sometimes recognized and sometimes not, recognized by the NIC. When a latency sensitive AQM is in play, this can work marvellously well. When a fixed lenth fifo is, well... see what happens on ""homeplug networks"":http://caia.swin.edu.au/reports/130417A/CAIA-TR-130417A.pdf - and ""powerline with pause frames"":http://caia.swin.edu.au/reports/130121A/CAIA-TR-130121A.pdf

Some NICs will attempt to exert hardware flow control when the rx buffer overflows. This could also be a goodness, except that rx rings are generally quite large in the first place - and we have seen many devices running out of cpu to handle the workload actually just losing packets at the rx ring rather than the qdisc.

h3. Software Rate Limiting

Use of HTB to rate limit connections to a given speed is to be preferred, as HTB buffers up one, and only one packet. Note that HTB is timer based; default Linux kernels are often compiled with HZ=250 (or even lower), causing burstyness and non-uniform delivery of packets; building your kernels at HZ=1000 will reduce this effect. Very important also is that your kernel have support for hi resolution timers (hpet or better). 

Still, use of other hardware in your setup can bit you - debloat all devices thoroughly (as per the debloat scripts) in a routing - or routing emulating - setup. 

Common experimental error:

<pre>
ethtool -s eth0 advertise 0x002 # set one interface to 10Mbit
</pre>

This would allow for ""GRO"":https://lwn.net/Articles/358910/ to happen on another interface. (and TSO, GSO, GRO, UFO, LRO) offloads to happen on all interfaces, bloating up packet sizes). _Turn all offloads off on *all* interfaces always_ - unless you are using the new [[Cake]] or revised TBF.

We use multiple variants of HTB and HFSC shaper scripts from Dave Täht and Dan Siemon and others. Configuring HTB can be tricky, and simple errors will result (usually) in you directing a shaper bin into a pfifo_fifo fast queue rather than where you wanted it.

""sqm-scripts"":https://github.com/dtaht/ceropackages-3.10/blob/master/net/sqm-scripts/files/usr/lib/sqm/ might be a good starting place to for hacking. Please see also [[wondershaper must die]] for some insight on how *not* to do the hacking.

h3. Know Your Bottlenecks!

Switches have buffering; sometimes excessive (particularly on improperly configured enterprise switches).  And Ethernet flow control may move the bottleneck in your path to somewhere you didn't expect, or cause the available bandwidth to be very different than you expect (particularly in switched networks that mix different Ethernet speeds). Most Linux Ethernet drivers honor flow control by default. Cheap consumer Ethernet switches typically generate pause frames; enterprise switches typically do not.  There is no substitute for packet capture, mtr, and wireshark!

It's not just ethernet that has had issues. Try homeplugs... and of course DSL, wifi, and other technologies also have bad buffering strategies that we have not beaten yet, in most cases.

h2. Kernel Versions and Configuration is Important

We try to provide a modern, precompiled kernel (usually with several advanced versions of codel and fq_codel derived schedulers) on our website, along with patches and the config used to build it.

There are two differences from this kernel's config than a normal ""desktop"" or ""server"" configuration. It is configured for low latency and a high clock interrupt rate. Faster interrupt response makes smaller buffers feasible on a conventional x86 machine.

h3. The NetEm qdisc _does not work in conjunction with other qdiscs._

The Linux network emulator qdisc, ""netem"", in its current incarnation, although useful for inserting delay and packet loss, *cannot* be effectively used in combination with other queueing disciplines. If you intend to insert delays or other forms of netem based packet manipulation, an entirely separate machine is required. _A combination of netem + any complex qdisc (such as htb + fq_codel or RED, or qfq) WILL misbehave._ Don't do it; your data is immediately suspect if you do.

Note: netem has been improving of late... and some are using mininet and other tools.

Example of a flawed use: a netem queue has a default 1000 packet limit - if it is too small (say, you insert a 200ms delay on a gig link), it will drop packets when in excess of the queue limit. If your packet limit is too big and netem is the actual bottleneck link, it will accrue all the packets there, not in the qdisc supposedly managing the link. 

h3. Tuning txqueuelen on pfifo_fast

The default txqueuelen was set to 1000 in Linux, in 2006. This is arguably wrong, even for gigE. Most network simulations at 100Mbit and below use 100, or even 50 as their default. Setting it below 50 is generally wrong, too, at any speed, except on wireless.

There is no right size for buffering!

There is a bfifo queue type in linux that is worth playing with to more closely emulate dsl and cablemodem behavior.

h2. Tuning These Algorithms

Having a sane, parameter less algorithm is very important to us. The world (and current Linux implementation), however, is not yet co-operating as well as we (or the algorithms) would like.

h3. Tuning CoDel for Circumstances it Wasn't Designed for

CoDel is designed to attempt to be ""no knobs"" at the edge of the Internet (where most people are). At high speeds (10GigE), using a larger packet limit than 1000 is recommended. Also at those speeds, in a data center (not the open internet) the target and interval are often reduced to 500us and 20ms respectively by those attempting to use CoDel in those environments. At really low speeds (below 2.5mbit), we've found an interaction with htb means you need to increase the codel target to above a single MTU's transmit speed (13ms at 1Mbit). 

To date, no one has invented a truly ""no knobs"" algorithm that works in all environments in the Internet.

Secondly, codel is a ""drop strategy"", and is meant to be used in conjunction with another qdisc, such as DRR, QFQ, or (as we use it), several variants of (n,e)fq_codel. While available as a standalone qdisc this is intended primarily to be able to test variants of the algorithm. There is a patch for most of the current ns2 model available.

h3. Tuning fq_codel

By default fq_codel is tuned to run well, and with no parameters, at 10GigE speeds. 

However, today's Linux implementation of CoDel is imperfect: there are typically (at least) one or more packets of buffering *under* the Linux qdisc, in the device driver (or one packet in htb) even if BQL is available.  This means that the ""head drop"" of CoDel's design is not actually a true head drop, but several packets back in in the actual queue (since there is no packet loss at the device driver interface), and that CoDel's square root computation is not exactly correct.  These effects are vanishingly small at 1Gbps or higher, but when used at low speeds, even one packet of buffering is very significant; today's fq_codel and codel qdiscs do not try to compensate for what can be significant sojourn time of these packets at low bandwidth.  So you might have to ""tune"" the qdiscs in ways (e.g. the target) that in principle the CoDel algorithm should not require when used at low bandwidths.  We hope to get this all straightened out someday soon, but knowing exactly how much buffering is under a qdisc is currently difficult and it isn't clear when this will happen.

When running it at 1GigE and lower, today it helps to change a few parameters given limitations in today's Linux implementation and underlying device drivers.

The default packet limit of 10000 packets is crazy in any other scenario. It is sane to reduce this to a 1000, or less, on anything running at gigE or below. The over-large packet limit leads to bad results during slow start on some benchmarks. Note that, unlike txqueuelen, CoDel derived algorithms can and DO take advantage of larger queues, so reducing it to, say, 100, impacts new flow start, and a variety of other things. 

We tend to use ranges of 800-1200 in our testing, and at 10Mbit, currently 600.

We have generally settled on a quantum of 300 for usage below 100mbit as this is a good compromise between SFQ and pure DRR behavior that gives smaller packets a boost over larger ones.

h4. ECN Issues

ECN is enabled by default. ECN is useful in the data center but far less so today on the open internet. Current best practice is to turn off ECN on uplinks running at less than 4Mbit (if you want good VOIP performance; a single packet at 1Mbps takes 13ms, and packet drops get you this latency back).

ECN _IS_ useful on downlinks on a home router, where the terminating hop is only one or two hops away, and connected to a system that handles ECN correctly (all current OS's are believed to implement ECN correctly, but this assumption bears a need for greater testing!).

h4. Broadband Links

Fq_codel runs extremely well on asymmetric links such as your commonly available 24.5/5.5 service from a cable modem provider like Comcast. (in conjunction with setting a shaper to your providers's rates and ""htb rate limiting"":https://github.com/dtaht/ceropackages-3.3/blob/master/net/debloat/files/simple_qos.sh)

We have tons and tons of ""published benchmarks on cable modems"":http://burntchrome.blogspot.com/2014_05_01_archive.html at this point, as well as benchmarks against DSL, and other technologies.

We are finding that ""low end hardware has trouble doing inbound rate limiting at speeds above 50Mbit"":http://burntchrome.blogspot.com/2014_08_01_archive.html

h4. nfq_codel and efq_codel

We now have a new versions of fq_codel ""under test"":http://snapon.lab.bufferbloat.net/~cero1/deb/patches-3.6.2/ . nfq_codel is an implementation the experimental ns2 model of codel + what is standard fq_codel, and efq_codel is nfq_codel that takes much better advantage of the quantum size and interleaves small packets better at low bandwidths...

However, it helps to reduce the quantum slightly on efq_codel to improve downlink performance while not compromising upload performance. It appears that a ratio of 3x1 (500) is reasonable for most traffic in a 6x1 scenario. A quantum of 300 isn't bad either, and works for many kinds of interactive traffic. 

Life gets dicy in 12x1 as quantums below 256 disable a few key things efq_codel does to get good (for example) VOIP performance. Stay at 300 or above.

Anyway, a commonly used configuration line is this:
<pre>
tc qdisc add dev your_device root efq_codel quantum 300 limit 1000 noecn
</pre>

NOTE: An earlier version of this page identified nfq_codel as having the quantum optimization. Also note that ""sfq_codel"" in the ns2 distribution is packet oriented, the variants of (e,n)fq_codel have various degrees of byte orientation. 

Research continues. Also fq_codel in Linux 3.5 did not do fate sharing, and Linux 3.6 fq_codel reduces cwnd without packet drop on buffer overload on a tcp stream enqueue. 

h3. When not in control of the bottleneck link:

_Lastly, just running fq_codel by itself, does not help you very much when the next device in line is overbuffered (as in a home router next to today's cable modems)._ (it DOES help break up microbursts, however, and generally ""does no harm"") In that case, using HTB to rate limit your router to below the next gateway device and then applying fq_codel will work. See the note above about limitations to HTB.

Fq_codel needs a bit of tuning below 4Mbit and on ADSL links. Basically accounting for a single MTU's speed in the target parameter suffices in the former case, and correctly doing linklayer ATM cell framing in the second case, is what you need.

h2. Work on Making codel and fq_codel Implementations Better Continues

The time in packets spend in device drivers is not taken into account in CoDel's control law computation, resulting in the need for tuning with CoDel target, particularly at low speeds where even one packet is highly significant latency. This is a current implementation limitation as we have no way to find out how much time is being spent in a device driver; and several other possible bugs lurk. Let us know what you discover.

Improving BQL and other algorithms for driver ring buffer control is needed.  Ideally, being able to run delay based AQM algorithms across coupled queues such as OS queuing system & drivers as a unified queue would be best, but today's driver interfaces (and possibly hardware) make this difficult (or impossible).

h2. NS2 Simulation Traps with TCP

ns2 does not support ECN, or cubic (correctly), or ""proportional rate reduction"":http://research.google.com/pubs/pub37486.html . For that matter it doesn't support TCP compound, or any of numerous tweaks to TCP that exist in the field such as TCP timestamps, syn cookies or TFO. There is a built in assumption in most simulations that there is no tx ring, or mac layer buffering at the hardware layer (interfaces to DOCSIS or ATM), or software rate limiting enforced at the ISP. Also there is rarely accounting for ATM overhead. ns2 doesn't even support port numbers, making accurately benchmarking the various ""fq"" algorithms difficult and dicey to do right.

Most home links use asymmetric rate limiting (e.g. 20Mbit down, 4Mbit up) , and most simulations assume bidirectional symmetry. Simulations of 10Mbit links are still too high for the vast majority of the real world consumer links, and yet too low for many modern links. Higher bandwidths *need* tcp timestamps, in particular, to work well...

ns3 has similar problems, but recent efforts have added support for tcp timestamps, port numbers, cubic, and validated versions of codel and fq_codel which should appear
in the mainline ns3 code by december, 2014.

It would be useful if more sims came much closer to modeling the real world.","",2015-05-26 16:19:09.03061,47
254,254,3,"h1. Using CPE home gateways and settop boxes

On Thu, May 24, 2012 at 8:43 PM, Fred Baker wrote:
> You want my opinion, it *could* be put on a CPE Router, but would be even better on a set-top box. CalTech/USGS mentioned the set-top model to us a couple of years ago, along the lines of ""a $2 seismometer is not very accurate, but if you got a single un-repeated (eg, so half og them get lost, half don't) UDP message from each of the homes within a certain radius of the epicenter saying ""I felt it"" with a number, you could work out the issues.""""

Oh, sure! I note when I left the country, accelerometers were very
expensive, and although I'd had this idea back in jg's 'unobtanium'
days, I'd felt it was impossible to do...

I came back to the US last year, and they'd dropped to 3mm in size and
cost under 2 bucks, and are
easily interfaced with i2c or a simple D/A converter.


The reasoning for putting one on a cpe router, is that it can do
things like intercept dns and pop up a web page alert, or have a local
jabber server that will send a message (I have a small jabber server
built into cerowrt). Similarly, the software for doing the work can
live on the router and not have to deal with NAT as much, although I
thought hip or something similar could be used.

Intercepting web and dns page access on an earthquake alert is
basically what the japanese do, except they do it on their web
servers, which has a large latency, and that kind of is too much of a
pull model for my taste - I'd like an alert to flash out on irc,
jabber, dns, home audio gear, etc -

Certainly having it on a settop box would allow for audio and visual alarms.

And it could be done this way with minimal udp traffic.

I've been working this problem for a while, there are many other ways
to accomplish it on the cheap
in useful scenarios.

http://nex-6.taht.net/posts/Heroic_Engineering_In_Japan/","",2012-05-26 18:53:52.650883,1
281,281,3,"h1. RRUL test suite

h2. What is the RRUL test suite?

The ""Realtime Response Under Load (RRUL) test suite specification"":https://github.com/dtaht/deBloat/blob/master/spec/rrule.doc?raw=true is an attempt to provide useful tools for analyzing network performance under the heavy workloads that typically induce bufferbloat and other networking problems. By creating a well defined specification we hope to one day create a standard for network testing that is a vast improvement on what currently exists in the field, which is mostly ""packets per second"" and ""raw bandwidth"" testing.

h2. RRUL prototype

A rrul prototype is being developed as part of the ""netperf-wrappers"":https://github.com/tohojo/netperf-wrapper tests. As the title suggests, the tests are being wrapped around the popular ""netperf"":http://www.netperf.org netperf network analysis tool. Requirements are a recent version of netperf, python, matplotlib, python-matplotlib, and fping.

It does your classic latency under load tests in a variety of ways, and provides output data in json format, with plots in CDF (very helpful) and combination format. For an explanation of the charting techniques used,
see the [[RRUL charting methods]] page, and/or the [[RRUL Rogues Gallery]] for some example plots.

h2. What tests exist so far?

rrul: an 8 bidirectional stream test against icmp and udp traffic, that uses classification to attempt to exercise qos queues such as those in 802.11e
rrul_be: The same test as rrul, but without classification - the fairest test at all
rrul46compete: the same test, but using ipv4 and ipv6 at the same time
rtt_fair: test tcp performance between two or more hosts to see if a system is RTT-fair (meaning that connections to machines at different distances eventually or not get a fair share of the bandwidth)
reno_cubic_westwood_ledbat: test performance of different TCPs (if enabled on both systems) in the same test

There are also some simpler tests in the suite currently:

tcp_bidirectional: a basic test intended to give a ""textbook"" result of two competing streams against a ping
tcp_upload: test multiple tcp uploads against a ping
tcp_download: test multiple tcp downloads against a ping

h2. What tests are planned?

A core component of the specification includes measuring one-way delays, while under load. Measuring this well is very important for voice and gaming traffic as well as shorter transactions. We will probably write something new or adopt
d-itg for that.

Another core component is measuring typical web workloads, while under load
And the last component is a tcp traceroute or mtr, showing the source(s) of the bottleneck(s) affecting the test(s).

h2. Who is RRUL for?

Early versions are targetted at:

* OS developers and driver writers
* Network theorists
* CIOs and equipment buyers
* Students
* System administrators and IT staff

At some point (after the bugs are sorted out), a web driven version suitable for  end-user testing at the edge will be developed, similar to speedtest.net.

As the available resources and funding for developing even this first part of the test suite are slim, getting to the end result will take time and resources we do not have.

rrul tests are all over the web at this point... google for them.
","",2014-03-23 00:46:45.067339,3
322,322,3,"h1. Notable Quotes

""FQ_Codel provides great isolation... if you've got low-rate videoconferencing and low rate web traffic they never get dropped. A lot of issues with IW10 go away, because all the other traffic sees is the front of the queue. You don't know how big its window is, but you don't care because you are not affected by it.  FQ_Codel increases utilization across your entire networking fabric, especially for bidirectional traffic. If we're sticking code into boxes to deploy codel, don't do that. Deploy fq_codel. It's just an across the board win.”  - Van Jacobson

* ""I just wanted to toss out a thank you for the work on sqm-scripts. I finally installed it on my router and wow, does it ever help. I get a much more responsive internet connection when my roommate is watching Netflix. Hearing how much bufferbloat affects performance is one thing but actually seeing the difference is pretty amazing."":https://lists.bufferbloat.net/pipermail/cerowrt-devel/2015-June/004835.html - Eric Schultz, Community Manager, prpl Foundation

* OpenWrt, ""As of r31759 qos-scripts replaced sfq/red with fq_codel to massively improve latency under load"":http://wiki.openwrt.org/doc/uci/qos

* ""Fq-codel really is that much of a silver bullet"":http://www.snbforums.com/threads/ubiquiti-updates-edgeos-to-1-7.25522/ - on edgerouter 1.7 OS.

* ""Fq-codel really whips the llama's ass"":http://www.reddit.com/r/openwrt/comments/2i0vzl/so_whats_the_main_difference_between_openwrt_and




","",2015-07-04 21:01:05.94267,4
280,280,3,"h1. RRUL Rogues Gallery

{{>toc}}

This is a web page dedicated to showing off and explaining some results obtained via (early) prototypes of the [[RRUL test suite]].

h2. Yurtlab testing (comcast 20Mbit up 8Mbit down)

Various fq_codel based rate shaping prototypes are under test at the [[cerowrt:Yurtlab]]. 

h3. NFQ_Codel with HTB rate limiting vs PFIFO_FAST

An initial test of the comcast based connection, using standard drop tail and no other optimizations:

!http://snapon.lab.bufferbloat.net/~d/campground/campground_pfifo_fast.svg!

After rate shaping was employed via ""this HTB + nfq_codel script"":http://snapon.lab.bufferbloat.net/~d/campground/lupin_qos.sh , which gives EF packets a max of 33% of the bandwidth, and background traffic a max of 20% under contention, this is what that network now looks like:

!http://snapon.lab.bufferbloat.net/~d/campground/campground_lupin_qos.svg!

Bandwidth went up, and more importantly the increase in latency under load dropped to less than 4ms on average. However averages are misleading, and a RRUL CDF plot is more accurate.

!http://snapon.lab.bufferbloat.net/~d/campground/cdf1.svg!

It was actually impossible to get an accurate measure of the actual bandwidth available using the non-rate shaped version! Using the RRUL test and changing the rate shaping parameters, it became possible to get an accurate measurement of what was actually available on this link. IT was rated for 22 Mbit down, 2Mbit up, and the actual performance achieved was very, very different, closer to 20Mbit down, 8 up.

This is fq_codel, by itself, without rate shaping, on this link:

!http://snapon.lab.bufferbloat.net/~d/campground/campground_fq_codel.svg!

Although the results are more ""fair"", they aren't very much more fair. Most of the buffering moved into the cable modem and CMTS where it was unmanaged. You have to take back control of the buffering into your own device in order for this stuff to work, by setting your rate a little bit below the provided rate.

h3. Two RRUL tests, competing

It is perhaps more illustrative than RRUL alone, to run it twice. In this test series a second copy of the RRUL test was run at T+30 seconds, and the first RRUL test extended to run for 120 seconds (-H 120)

!http://snapon.lab.bufferbloat.net/~d/campground/campground_lupin_qos-competing-120.svg!

As you can see, the second test kicks in quite rapidly, and when complete, the other test scales back up to full bandwidth, quite rapidly.

!http://snapon.lab.bufferbloat.net/~d/campground/campground_pfifo_fast-competing-120.svg!

In the above test the second test doesn't ramp up to full bandwidth for over 20 seconds after test start, and the TCP streams are very ""unfair"" relative to each other.

For more detail on these tests see http://snapon.lab.bufferbloat.net/~d/campground/

h2. Verizon FIOS Testing at 25Mbit up and 25Mbit down

Before a fq_codel enabled shaper is deployed:

!http://snapon.lab.bufferbloat.net/~d/verizon/noshaper/ipv4-icei.svg!

Verizon seems to have egress buffering under control, but probably has an ingress buffer set to a good value for their highest end 300Mbit service.

After a fq_codel enabled shaper is deployed:

!http://snapon.lab.bufferbloat.net/~d/verizon/finalshaper/ipv4-icei.svg!

5 times the upload bandwidth, and roughly 1/7 the observed latency.

h2. TCP Global Synchronization

One interesting result obtained along the way was a textbook case of ""TCP Global Synchronization"":http://en.wikipedia.org/wiki/TCP_global_synchronization where multiple streams would synchronize, collapse, and restart at the same time. This is the behavior that the RED algorithm and successors in particular were designed to avoid... if they had ever been deployed. The second chart in this image shows what TCP global sync looks like. 

!http://huchra.bufferbloat.net/~d/denmark-germany-wired-2.png!

These results were obtained over a 40ms link between Denmark and Germany, on a device that probably had a very short TXQUEUE. So this is what can happen if buffers are too small, rather than ""just right"".

h2. Different forms of TCP

h2. Competing RTT

h2. IPv6 vs IPv4","",2013-08-11 17:28:30.956474,13
305,305,213,"h1. CeroWrtScripts Bundle

CeroWrtScripts is a set of scripts that you can use for maintaining and troubleshooting a CeroWrt router. It is archived on ""Github.com"":https://github.com/richb-hanover/CeroWrtScripts. The bundle includes scripts to:

* *Measure the performance* of your router - _betterspeedtest.sh, netperfrunner.sh, networkhammer.sh_
* *Configure the CeroWrt router* consistently after flashing factory firmware - _config-cerowrt.sh_
* *Set up an IPv6 6-in-4 tunnel* to TunnelBroker.net - _tunnelbroker.sh_
* *Collect troubleshooting information* (see [[Debugging CeroWrt]]) that helps us diagnose problems - _cerostats.sh_

h2. How do I get these scripts?

# CeroWrt 3.10.44 and newer contain the scripts built into the router. They are in @/usr/lib/CeroWrtScripts@
# You can also get the ""full suite of scripts"":https://github.com/richb-hanover/CeroWrtScripts from *Github* (https://github.com/richb-hanover/CeroWrtScripts) 

The docs for the scripts are now maintained in Github.","",2014-06-24 04:00:41.560127,10
261,261,3,"h1. FQ Codel on Wireless-n

Cerowrt was originally started to probe the epidemic of bufferbloat-related problems observed with the current wifi deployments.

That proved too hard, and we went and worked first on fixing ethernet. With BQL and fq_codel we think we've made a real dent in that. Sadly 100s of ethernet drivers remain to be BQL-enabled, and soft-rate limiting is finicky, so we are a long way away from seeing that set of proven fixes ( [[SQM]] ) widely deployed.

3 years later... Cerowrt is now experimenting with various forms of fq_codel on top of the wireless stack. The problems in wireless-n are so legion that it's difficult to know where to start.

We anticipate that making wireless-n work well will be a multi-year re-architectural project in linux, requiring a half dozen people to do. We have multiple brilliant folk working on the ideas in their spare time. 

* Andrew McGregor - The original ""minstrel rate control algorithm"":http://linuxwireless.org/en/developers/Documentation/mac80211/RateControl/minstrel/ co-author
* Felix Feitkau - current minstrel maintainer, also maintainer of the ath9k driver
* Dave Täht - just ""this guy"":http://the-edge.blogspot.com/2010/10/who-invented-embedded-linux-based.html

and a few others, with notable contributions from various bloat email list members that also had something to do with linux wifi. Certainly we welcome anyone else that wants to help fix the internet to join in, but all we can offer is karmic rewards.

We totally lack a

* QA person
* Test Developer
* Funding

It bugs us that there are million activations of android a day with a wifi stack that can be so dramatically improved by a variety of queue management techniques -  and 10s of millions of APs and 100s of millions of deployed wifi devices, all with problems - 

most of which that would benefit HUGELY from the work, and yet we can only work on this in our spare time.

So, lacking funding, in the meantime, we hack.

At the moment, felix is enabling new knobs in the ath9k driver, andrew is working on various ns3 simulations, and Dave is experimenting with reducing hw queue lengths and applying fq_codel on top of wifi in cerowrt.

fq_codel at the qdisc layer for wifi is the ""wrong thing"" as:

1) Wireless-n does packet aggregation to gain bandwidth. FQ on an AP splits up streams into often non-aggregatable chunks.
2) Reducing the hw queue length has a negative effect on throughput over-all in the current driver design
3) TXOPs, not bytes are the limiting factor
4) You need *a* queue as a shock absorber, but you don't need 4 queues to manage the hw queues, one that can feed 4 queues would be better and save on memory use besides.

The principal usage of the fq_codel and hw queue changes in cerowrt 3.3.8-10 and later is to observe how well or how badly codel reacts to sudden, rapid bandwidth changes common in wifi. Losing good aggregation in the short term is a good thing as it normalizes some results.

The ""right thing"", long term, appears to be:

0) come up with a way to fund and test the work
1) tie the codel aqm and minstrel's rate algorithms together better
2) add per station queues to the wifi stack
3) move codel into the mac80211 layer and make it's maxtarget value account for the number of active stations and their aggregate queue lengths 
4) fair queue inside each queue
5) come up with additional sane drop strategies within aggregates
6) Address the hidden management frames problem
","",2014-08-03 08:36:08.505837,17
314,314,3,"h1. Cerowrt and OpenWrt Barrier Breaker Interoperation

CeroWrt was a research project intended to spin up new functionality into a single, conventional, home router. Nearly everything in the 3.10.50-1 release (and later) was pushed into OpenWrt ""Barrier Breaker"", which supports thousands of different router types, however a few things are different, notably cerowrt routes, rather than bridges everything.

h2. HOWTO Configuring an openwrt Barrier Breaker device to be more ""cerowrt-like""

Let's say you have an existing CeroWrt box, and you want to add an Access Point elsewhere on your network. For the sake of this example, we'll use a Ubnt Picostation, which is a good outdoor access point, with a single ethernet interface, and that you are configuring it from a linux laptop. 

h3. First Steps

* Download the nano-m factory firmware update and the babels package from the openwrt repositories

* Install openssh-server and telnet on your laptop.

* Generate an ssh-key for your router with ""ssh-keygen"" - you can make one specific to administration if you like

* Set your laptop to a static ip of 192.168.1.2/24 and then plug it into the pico.

* Boot the Pico. Install Barrier Breaker on the device.

via the firmware upload web interface (it's on 192.168.1.20) or via the classic tftp update method.

This will get a basic load of the BB OS in place, which you can telnet to on 192.168.1.1 or access via the (unencrypted by default) web gui

* telnet to the device

* Install babels - note the s - on it.

scp from your laptop the babels package you downloaded earlier to /tmp. 
opkg install /tmp/babel*
/etc/init.d/babeld enable # but don't start it yet

While you are here, take your generated ssh public key, and put it in /etc/dropbear/authorized_keys

* Change the IP address range to suit

In this example I will use 172.20.6 throughout. pick your own address range that doesn't conflict with the cerowrt setup, preferably one inside the same /16 cero is in.

sed -i s/192.168.1/172.20.6/g /etc/config/*

* Disable dhcp serving (for now) and make it be a dhcp client (for now)

edit the /etc/config/dhcp file and tell it to ""ignore '1'"" on both interfaces for now

* Give it a name in /etc/config/system

* Kill the firewall

This is an interior router, no need to firewall, particularly during setup.
Feel free to copy the firewall script to a backup, you might want to do some stuff later on it.

Make /etc/config/firewall look like this.

<pre>
config defaults
        option input 'ACCEPT'
        option output 'ACCEPT'
        option forward 'ACCEPT'

</pre>

* Reboot. Plug the ethernet into your cerowrt box, the device should now be routed and
on your network, with a new IP address you can derive from inspecting the /tmp/dhcp.leases file
or get to via local dns.

h3. Next Steps

* ssh into the router, do a

<pre>
opkg update # should grab the openwrt BB database if dns is working
opkg install snmpd # if you intend to monitor the system with snmp
opkg install netperf tcpdump-mini # also optional. I like to test with netperf and look at stuff with tcpdump
</pre>

* Break apart the AP and the wifi

By default openwrt bridges rather than routes. We want to route. 

* Setup the wifi

h4. If you want to mesh via ethernet

h4. If you want to mesh via wifi

IMPORTANT: The babel protocol uses the BSSID rather than the SSID to tie radios together, so you need to specify the same one that's on cerowrt.

h4. If you want to mesh via wifi AND provide service via wifi


h3. Customization

Hit the web gui and add in the appropriate time. 

do an opkg list | less and see if there are other packages you'd like to add

You can either disable the gui (I generally do this), or add ssl support to it


* Change the password


","",2014-10-14 12:08:16.765176,1
290,290,213,"h1. Setting up AQM for CeroWrt 3.10

*THIS PAGE IS DEPRECATED* in favor of the [[Setting_up_SQM_for_CeroWrt_310]] page.

*Why?*

Smart Queue Management (SQM) is our name for an intelligent combination of better packet scheduling (flow queueing) techniques along with with active queue length management (AQM).

We've moved away from the term ""Active Queue Management"" (AQM) because ""Dave Täht points out"":https://lists.bufferbloat.net/pipermail/cerowrt-devel/2013-December/001840.html that it has pretty much come to be defined as active queue *length* management and not packet scheduling.

If you want to set up your CeroWrt router, see the  [[Setting up SQM for CeroWrt 3.10]] page.
 

","",2014-03-18 10:59:22.461839,35
