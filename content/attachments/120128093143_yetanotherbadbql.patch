diff --git a/target/linux/ar71xx/files-3.2/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c b/target/linux/ar71xx/files-3.2/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
index a69ed27..deab6d2 100644
--- a/target/linux/ar71xx/files-3.2/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
+++ b/target/linux/ar71xx/files-3.2/drivers/net/ethernet/atheros/ag71xx/ag71xx_main.c
@@ -134,6 +134,7 @@ static void ag71xx_ring_tx_clean(struct ag71xx *ag)
 {
 	struct ag71xx_ring *ring = &ag->tx_ring;
 	struct net_device *dev = ag->dev;
+	u32 bytes_compl = 0, pkts_compl = 0;
 
 	while (ring->curr != ring->dirty) {
 		u32 i = ring->dirty % ring->size;
@@ -143,16 +144,17 @@ static void ag71xx_ring_tx_clean(struct ag71xx *ag)
 			dev->stats.tx_errors++;
 		}
 
-		if (ring->buf[i].skb)
+		if (ring->buf[i].skb) {
+			bytes_compl += ring->buf[i].skb->len;
+			pkts_compl++;
 			dev_kfree_skb_any(ring->buf[i].skb);
-
+		}
 		ring->buf[i].skb = NULL;
-
 		ring->dirty++;
 	}
-
 	/* flush descriptors */
 	wmb();
+	netdev_completed_queue(dev, pkts_compl, bytes_compl);
 
 }
 
@@ -174,6 +176,7 @@ static void ag71xx_ring_tx_init(struct ag71xx *ag)
 
 	ring->curr = 0;
 	ring->dirty = 0;
+	netdev_reset_queue(ag->dev); 
 }
 
 static void ag71xx_ring_rx_clean(struct ag71xx *ag)
@@ -326,6 +329,7 @@ static void ag71xx_rings_cleanup(struct ag71xx *ag)
 	ag71xx_ring_free(&ag->rx_ring);
 
 	ag71xx_ring_tx_clean(ag);
+	netdev_reset_queue(ag->dev); 
 	ag71xx_ring_free(&ag->tx_ring);
 }
 
@@ -700,14 +704,15 @@ static netdev_tx_t ag71xx_hard_start_xmit(struct sk_buff *skb,
 
 	/* flush descriptor */
 	wmb();
-
 	ring->curr++;
+
 	if (ring->curr == (ring->dirty + ring->size)) {
 		DBG("%s: tx queue full\n", ag->dev->name);
 		netif_stop_queue(dev);
 	}
 
 	DBG("%s: packet injected into TX queue\n", ag->dev->name);
+	netdev_sent_queue(dev, skb->len);
 
 	/* enable TX engine */
 	ag71xx_wr(ag, AG71XX_REG_TX_CTRL, TX_CTRL_TXE);
